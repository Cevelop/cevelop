<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.4"?>
<fragment>

  <extension point="com.cevelop.codeanalysator.core.guideline">
    <implementation impl="com.cevelop.codeanalysator.autosar.guideline.AutosarGuideline"></implementation>
  </extension>
  	
  <extension point="org.eclipse.cdt.codan.core.checkers"
         id="org.eclipse.cdt.codan.core.categories">
    <category id="com.cevelop.codeanalysator.core.autosar"
           name="AUTOSAR Guidelines"/>
  </extension>
    
   <extension
         id="com.cevelop.codeanalysator.core.autosar.info.marker"
         name="AUTOSAR Guideline"
         point="org.eclipse.core.resources.markers">
      <super type="org.eclipse.cdt.codan.core.codanProblem"/>
      <persistent value="false"></persistent>
   </extension>

   <extension
         id="com.cevelop.codeanalysator.core.autosar.warning.marker"
         name="AUTOSAR Guideline"
         point="org.eclipse.core.resources.markers">
      <super type="org.eclipse.cdt.codan.core.codanProblem"/>
      <persistent value="false"></persistent>
   </extension>
	
   <extension point="org.eclipse.ui.ide.markerResolution">
        <markerResolutionGenerator
            class="com.cevelop.codeanalysator.core.markerresolution.CodeAnalysatorMarkerResolutionGenerator"
            markerType="com.cevelop.codeanalysator.core.autosar.info.marker">
        </markerResolutionGenerator>
   </extension>

   <extension point="org.eclipse.ui.ide.markerResolution">
        <markerResolutionGenerator
            class="com.cevelop.codeanalysator.core.markerresolution.CodeAnalysatorMarkerResolutionGenerator"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
   		</markerResolutionGenerator>
   </extension>
   
   <extension point="org.eclipse.ui.editors.annotationTypes">
      <type markerSeverity="0"
            markerType="com.cevelop.codeanalysator.core.autosar.info.marker"
            name="com.cevelop.codeanalysator.core.autosar.info.annotationType"
            super="org.eclipse.ui.workbench.texteditor.info">
      </type>
   </extension>

   <extension point="org.eclipse.ui.editors.annotationTypes">
      <type markerSeverity="1"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker"
            name="com.cevelop.codeanalysator.core.autosar.warning.annotationType"
            super="org.eclipse.ui.workbench.texteditor.warning">
      </type>
   </extension>
   
   <extension point="org.eclipse.ui.editors.markerAnnotationSpecification">
      <specification
            annotationType="com.cevelop.codeanalysator.core.autosar.info.annotationType"
            colorPreferenceKey="com.cevelop.codeanalysator.core.autosar.info.markerAnnotation.color"
            colorPreferenceValue="0,0,255"
            contributesToHeader="true"
            highlightPreferenceKey="com.cevelop.codeanalysator.core.autosar.info.markerAnnotation.highlight"
            highlightPreferenceValue="false"
            icon="icons/autosar.png"
            label="AUTOSAR Info"
            quickFixIcon="icons/autosar.png">
      </specification>

      <specification
            annotationType="com.cevelop.codeanalysator.core.autosar.warning.annotationType"
            colorPreferenceKey="com.cevelop.codeanalysator.core.autosar.warning.markerAnnotation.color"
            colorPreferenceValue="255,255,0"
            contributesToHeader="true"
            highlightPreferenceKey="com.cevelop.codeanalysator.core.autosar.warning.markerAnnotation.highlight"
            highlightPreferenceValue="false"
            icon="icons/autosar.png"
            label="AUTOSAR Problem"
            quickFixIcon="icons/autosar.png">
      </specification>
   </extension>
   
  
   <extension point="org.eclipse.cdt.codan.core.checkers">
	   <checker
	        class="com.cevelop.codeanalysator.autosar.checker.AutosarChecker"
	        id="com.cevelop.codeanalysator.autosar.checker.AutosarChecker"
	        name="AUTOSAR Guideline Checker">
	     <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A02-13-05: Hexadecimal constants should be uppercase"
            id="com.cevelop.codeanalysator.autosar.problem.hexvaluesmustbeuppercase"
            messagePattern="A02-13-05: Hexadecimal constants should be uppercase"
            name="A02-13-05: Hexadecimal constants should be uppercase"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
	     <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A04-07-01: Avoid lossy (narrowing, truncating) arithmetic conversions"
            id="com.cevelop.codeanalysator.autosar.problem.avoidlossyconversions"
            messagePattern="A04-07-01: Avoid {0} conversions"
            name="A04-07-01: Avoid lossy (narrowing, truncating) arithmetic conversions"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-00-02: The condition of an if or iteration statement shall have type bool"
            id="com.cevelop.codeanalysator.autosar.problem.conditionmustbebool"
            messagePattern="A05-00-02: The condition of an if or iteration statement shall have type bool"
            name="A05-00-02: The condition of an if or iteration statement shall have type bool"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-00-03: The declaration of objects shall contain no more than two levels of pointer indirection"
            id="com.cevelop.codeanalysator.autosar.problem.nomorethantwolevelsofindirection"
            messagePattern="A05-00-03: The declaration of objects shall contain no more than two levels of pointer indirection"
            name="A05-00-03: The declaration of objects shall contain no more than two levels of pointer indirection"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-01-01: Literal values shall not be used apart from type initialization"
            id="com.cevelop.codeanalysator.autosar.problem.donotuseliteralvalues"
            messagePattern="A05-01-01: Literal values shall not be used apart from type initialization"
            name="A05-01-01: Literal values shall not be used apart from type initialization"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
          <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-01-02: Variables shall not be implicitly captured in a lambda expression"
            id="com.cevelop.codeanalysator.autosar.problem.donotimplicitlycapturevariables"
            messagePattern="A05-01-02: Variables shall not be implicitly captured in a lambda expression"
            name="A05-01-02: Variables shall not be implicitly captured in a lambda expression"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-01-03: Parameter list (possibly empty) shall be included in every lambda expression"
            id="com.cevelop.codeanalysator.autosar.problem.mandatorylambdaparameterlist"
            messagePattern="A05-01-03: Parameter list (possibly empty) shall be included in every lambda expression"
            name="A05-01-03: Parameter list (possibly empty) shall be included in every lambda expression"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
	     <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-01-04: A lambda expression object shall not outlive any of its reference-captured objects"
            id="com.cevelop.codeanalysator.autosar.problem.donotoutlivereferencecapturedobjects"
            messagePattern="A05-01-04: A lambda expression object shall not outlive any of its reference-captured objects"
            name="A05-01-04: A lambda expression object shall not outlive any of its reference-captured objects"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Info"
            defaultEnabled="true"
            description="A05-01-06: Return type of a non-void return type lambda expression should be explicitly specified"
            id="com.cevelop.codeanalysator.autosar.info.noimplicitlambdareturntype"
            messagePattern="A05-01-06: Return type of a non-void return type lambda expression should be explicitly specified"
            name="A05-01-06: Return type of a non-void return type lambda expression should be explicitly specified"
            markerType="com.cevelop.codeanalysator.core.autosar.info.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Info"
            defaultEnabled="true"
            description="A05-01-08: Lambda expressions should not be defined inside another lambda expression"
            id="com.cevelop.codeanalysator.autosar.info.donotnestlambdas"
            messagePattern="A05-01-08: Lambda expressions should not be defined inside another lambda expression"
            name="A05-01-08: Lambda expressions should not be defined inside another lambda expression"
            markerType="com.cevelop.codeanalysator.core.autosar.info.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-02-01: Dynamic_cast should not be used"
            id="com.cevelop.codeanalysator.autosar.problem.donotusedynamiccast"
            messagePattern="A05-02-01: Dynamic_cast should not be used"
            name="A05-02-01: Dynamic_cast should not be used"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-02-01: The operands of a logical AND or OR shall be parenthesized if the operands contain binary operators"
            id="com.cevelop.codeanalysator.autosar.problem.parenthesizelogicaloperators"
            messagePattern="A05-02-01: The operands of a logical AND or OR shall be parenthesized if the operands contain binary operators"
            name="A05-02-01: The operands of a logical AND or OR shall be parenthesized if the operands contain binary operators"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-10-01: A pointer to member virtual function shall only be tested for equality with null-pointer-constant"
            id="com.cevelop.codeanalysator.autosar.problem.onlycomparepointertovirtualmemberfunctionwithnullpointer"
            messagePattern="A05-10-01: A pointer to member virtual function shall only be tested for equality with null-pointer-constant"
            name="A05-10-01: A pointer to member virtual function shall only be tested for equality with null-pointer-constant"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A05-16-01: The ternary conditional operator shall not be used as a sub-expression"
            id="com.cevelop.codeanalysator.autosar.problem.donotuseternaryconditionaloperatorassubexpression"
            messagePattern="A05-16-01: The ternary conditional operator shall not be used as a sub-expression"
            name="A05-16-01: The ternary conditional operator shall not be used as a sub-expression"
			markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A06-04-01: A switch statement shall have at least two case-clauses, distinct from the default label"
            id="com.cevelop.codeanalysator.autosar.problem.switchmusthaveatleasttwocases"
            messagePattern="A06-04-01: A switch statement shall have at least two case-clauses, distinct from the default label"
            name="A06-04-01: A switch statement shall have at least two case-clauses, distinct from the default label."
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A07-01-04: Do not use register"
            id="com.cevelop.codeanalysator.autosar.problem.donotuseregister"
            messagePattern="A07-01-04: Do not use register"
            name="A07-01-04: Do not use register"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A07-01-05: The auto specifier shall not be used apart from specific cases"
            id="com.cevelop.codeanalysator.autosar.problem.useautosparingly"
            messagePattern="A07-01-05: The auto specifier shall not be used apart from specific cases"
            name="A07-01-05: The auto specifier shall not be used apart from specific cases"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A07-01-06: The typedef specifier shall not be used"
            id="com.cevelop.codeanalysator.autosar.problem.donotusetypedef"
            messagePattern="A07-01-06: The typedef specifier shall not be used"
            name="A07-01-06: The typedef specifier shall not be used"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A07-02-02: Enumeration underlying base type shall be explicitly defined"
            id="com.cevelop.codeanalysator.autosar.problem.explicitlydefineenumunderlyingbasetype"
            messagePattern="A07-02-02: Enumeration underlying base type shall be explicitly defined"
            name="A07-02-02: Enumeration underlying base type shall be explicitly defined"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A07-02-03: Enumerations shall be declared as scoped enum classes"
            id="com.cevelop.codeanalysator.autosar.problem.usescopedenumclasses"
            messagePattern="A07-02-03: Enumerations shall be declared as scoped enum classes"
            name="A07-02-03: Enumerations shall be declared as scoped enum classes"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A07-02-04: In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized"
            id="com.cevelop.codeanalysator.autosar.problem.initializenonefirstorallenumerators"
            messagePattern="A07-02-04: In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized"
            name="A07-02-04: In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A07-04-01: The asm declaration shall not be used"
            id="com.cevelop.codeanalysator.autosar.problem.donotuseasm"
            messagePattern="A07-04-01: The asm declaration shall not be used"
            name="A07-04-01: The asm declaration shall not be used"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A07-05-01: A function shall not return a reference or a pointer to a parameter that is passed by reference to const"
            id="com.cevelop.codeanalysator.autosar.problem.donotreturnreferencetoparameterpassedbyconstreference"
            messagePattern="A07-05-01: A function shall not return a reference or a pointer to a parameter that is passed by reference to const"
            name="A07-05-01: A function shall not return a reference or a pointer to a parameter that is passed by reference to const"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
	     <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A08-05-00: Always initialize an object"
            id="com.cevelop.codeanalysator.autosar.problem.alwaysinitializeanobject"
            messagePattern="A08-05-00: Always initialize an object"
            name="A08-05-00: Always initialize an object"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A08-05-02: Braced-initialization {}, without equals sign, shall be used for variable initialization"
            id="com.cevelop.codeanalysator.autosar.problem.usebracedinitialization"
            messagePattern="A08-05-02: Braced-initialization '{}', without equals sign, shall be used for variable initialization"
            name="A08-05-02: Braced-initialization {}, without equals sign, shall be used for variable initialization"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
	        category="com.cevelop.codeanalysator.core.autosar"
	        defaultSeverity="Warning"
	        defaultEnabled="true"
	        description="A08-05-03: A variable of type auto shall not be initialized using initializer list"
	        id="com.cevelop.codeanalysator.autosar.problem.donotinitializeautousinginitializerlist"
	        messagePattern="A08-05-03: A variable of type auto shall not be initialized using initializer list"
	        name="A08-05-03: A variable of type auto shall not be initialized using initializer list"
	        markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
	     </problem>
	     <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A09-05-01: Unions shall not be used"
            id="com.cevelop.codeanalysator.autosar.problem.donotuseunion"
            messagePattern="A09-05-01: Unions shall not be used"
            name="A09-05-01: Unions shall not be used"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
	      <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A10-01-01: Class shall not be derived from more than one base class which is not an interface class"
            id="com.cevelop.codeanalysator.autosar.problem.noderivationfrommorethanonebaseclass"
            messagePattern="A10-01-01: Class shall not be derived from more than one base class which is not an interface class"
            name="A10-01-01: Class shall not be derived from more than one base class which is not an interface class"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A10-02-01: Do not hide non-virtual member functions"
            id="com.cevelop.codeanalysator.autosar.problem.donothidememberfunctions"
            messagePattern="A10-02-01: Do not hide non-virtual member functions"
            name="A10-02-01: Do not hide non-virtual member functions"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A10-03-01: Virtual functions shall have extactly one	specifier, either virtual, override or final"
            id="com.cevelop.codeanalysator.autosar.problem.virtualfunctionshallhaveexactlyonespecifier"
            messagePattern="A10-03-01: Virtual functions shall have extactly one	specifier, either virtual, override or final"
            name="A10-03-01: Virtual functions shall have extactly one	specifier, either virtual, override or final"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
        </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A10-03-02: Each overriding virtual function shall be declared with the override or final specifier"
            id="com.cevelop.codeanalysator.autosar.problem.donotomitvirtspecifier"
            messagePattern="A10-03-02: Each overriding virtual function shall be declared with the override or final specifier"
            name="A10-03-02: Each overriding virtual function shall be declared with the override or final specifier"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A10-03-03: Do not introduce virtual functions in final class"
            id="com.cevelop.codeanalysator.autosar.problem.donotintroducevirtualfunctioninfinalclass"
            messagePattern="A10-03-03: Do not introduce virtual functions in final class"
            name="A10-03-03: Do not introduce virtual functions in final class"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A10-03-05: A user-defined assignment operator shall not be virtual"
            id="com.cevelop.codeanalysator.autosar.problem.novirtualassignementoperators"
            messagePattern="A10-03-05: A user-defined assignment operator shall not be virtual"
            name="A10-03-05: A user-defined assignment operator shall not be virtual"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
        <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A12-00-01: Avoid redundant default operations"
            id="com.cevelop.codeanalysator.autosar.problem.redundantoperations"
            messagePattern="A12-00-01: Avoid redundant default operations"
            name="A12-00-01: Avoid redundant default operations"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
         <problem
            category="com.cevelop.codeanalysator.core.autosar"
            defaultSeverity="Warning"
            defaultEnabled="true"
            description="A12-00-01: Missing special member functions"
            id="com.cevelop.codeanalysator.autosar.problem.missingspecialmemberfunctions"
            messagePattern="A12-00-01: Missing special member functions"
            name="A12-00-01: Missing special member functions"
            markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
         </problem>
		 <problem
	        category="com.cevelop.codeanalysator.core.autosar"
	        defaultSeverity="Warning"
	        defaultEnabled="true"
	        description="A13-05-02: User-defined conversion operators shall be defined explicit"
	        id="com.cevelop.codeanalysator.autosar.problem.explicitconversionoperators"
	        messagePattern="A13-05-02: User-defined conversion operators shall be defined explicit"
	        name="A13-05-02: User-defined conversion operators shall be defined explicit"
	        markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
	     </problem>
         <problem
	        category="com.cevelop.codeanalysator.core.autosar"
	        defaultSeverity="Warning"
	        defaultEnabled="true"
	        description="A13-05-03: Avoid conversion operators"
	        id="com.cevelop.codeanalysator.autosar.problem.avoidconversationoperators"
	        messagePattern="A13-05-03: Avoid conversion operators. Consider removal!"
	        name="A13-05-03: Avoid conversion operators"
	        markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
	     </problem>
         <problem
	        category="com.cevelop.codeanalysator.core.autosar"
	        defaultSeverity="Warning"
	        defaultEnabled="true"
	        description="A15-03-05: Catch exceptions by reference"
	        id="com.cevelop.codeanalysator.autosar.problem.catchexceptionsbyreference"
	        messagePattern="A15-03-05: Catch exceptions by reference"
	        name="A15-03-05: Catch exceptions by reference"
	        markerType="com.cevelop.codeanalysator.core.autosar.warning.marker">
	     </problem>
	  </checker>
   </extension>
</fragment>