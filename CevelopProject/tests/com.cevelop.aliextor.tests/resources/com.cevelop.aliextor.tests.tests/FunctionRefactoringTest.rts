//!AliExtorExtractConstIntWithoutCompoundStatementAndMain
//@.config
newName=INT
//@A1.cpp
/*$*/int/*$*/ beschte { 54 };
int main() {
	int foo { 43 };
}
//=
using INT = int;
INT beschte { 54 };
INT main() {
	INT foo { 43 };
}
//!AliExtorExtractFunctionParameter
//@.config
newName=CINT
//@A1.cpp
int main(){
	int y { 4 + 2 };
}

void func(/*$*/const int/*$*/ x) {
	int y { x };
}
//=
using CINT = const int;

int main(){
	int y { 4 + 2 };
}

void func(CINT x) {
	int y { x };
}
//!AliExtorExtractFunctionParameterAndStatements
//@.config
newName=CINT
//@A1.cpp
int main(){
	const int x { 42 };
}

void func(/*$*/const int/*$*/ x) {
	const int y { x * x };
}
//=
using CINT = const int;

int main(){
	CINT x { 42 };
}

void func(CINT x) {
	CINT y { x * x };
}
//!AliExtorExtractFunctionParameterAndStatementsAndReturnTypes
//@.config
newName=CINT
//@A1.cpp
int main(){
	const int y { func(3, 5) };
}

const int func(/*$*/const int/*$*/ x, const int y) {
	return x + y;
}
//=
using CINT = const int;

int main(){
	CINT y { func(3, 5) };
}

CINT func(CINT x, CINT y) {
	return x + y;
}
//!AliExtorExtractFunctionParameterSeveralFunctions
//@.config
newName=CINT
//@A1.cpp
int main(){
	const int x { func1(1, 2) + func2(3) };
}

const int func1(const int x, const int y) {
	return x + y;
}

const int func2(/*$*/const int/*$*/ z) {
	return z * z;
}
//=
using CINT = const int;

int main(){
	CINT x { func1(1, 2) + func2(3) };
}

CINT func1(CINT x, CINT y) {
	return x + y;
}

CINT func2(CINT z) {
	return z * z;
}
//!AliExtorExtractOnlySelectedNodeFunctionParameter
//@.config
newName=CINT
justRefactorSelected=true
//@A1.cpp
int main() {
	const int x { 42 };
	double y { 42 };
}
const int func(/*$*/const int/*$*/ x) {
	return x;
}
//=
using CINT = const int;

int main() {
	const int x { 42 };
	double y { 42 };
}
const int func(CINT x) {
	return x;
}
//!AliExtorExtractOnlySelectedNodeReturnType
//@.config
newName=CINT
justRefactorSelected=true
//@A1.cpp
int main() {
	const int x { 42 };
	double y { 42 };
}
/*$*/const int/*$*/ func(const int x) {
	return x;
}
//=
using CINT = const int;

int main() {
	const int x { 42 };
	double y { 42 };
}
CINT func(const int x) {
	return x;
}
//!AliExtorExtractFunctionDeclaration
//@.config
newName=myFunc
extractFunctionDeclaration=true
//@A1.cpp
/*$*/void * func(int y)/*$*/{
	void * res { };
	return res;
}
int main(){
	// Do stuff
}
//=
using myFunc = void*(int);

void * func(int y){
	void * res { };
	return res;
}
int main(){
	// Do stuff
}
//!AliExtorExtractFunctionPointer
//@.config
newName=myFuncPtr
extractFunctionPointer=true
//@A1.cpp
void * func(int y){
	void * res { };
	return res;
}
/*$*/int * func1()/*$*/{
	int * foo { };
	return foo;
}
int main(){
	// Do stuff
}
//=
using myFuncPtr = int*(*)();

void * func(int y){
	void * res { };
	return res;
}
int * func1(){
	int * foo { };
	return foo;
}
int main(){
	// Do stuff
}
//!AliExtorExtractFunctionReference
//@.config
newName=myFuncRef
extractFunctionReference=true
//@A1.cpp
void * func(int y){
	void * res { };
	return res;
}
/*$*/int * func1()/*$*/{
	int * foo { };
	return foo;
}
int main(){
	// Do stuff
}
//=
using myFuncRef = int*(&)();

void * func(int y){
	void * res { };
	return res;
}
int * func1(){
	int * foo { };
	return foo;
}
int main(){
	// Do stuff
}
//!AliExtorExtractFunctionDeclarationSeveralOccurrences
//@.config
newName=func
extractFunctionDeclaration=true
//@A1.cpp
int calc(int x, int y, int (f)(int, int)) {
	return f(x, y);
}

int betterCalc(int x, int y, int (f)(int, int)) {
	return f(x, y);
}

/*$*/int add(int x, int y)/*$*/ {
	return x + y;
}
//=
using func = int(int, int);

int calc(int x, int y, func f) {
	return f(x, y);
}

int betterCalc(int x, int y, func f) {
	return f(x, y);
}

int add(int x, int y) {
	return x + y;
}
//!AliExtorExtractFunctionDeclarationSeveralOccurrencesSelectParameter
//@.config
newName=func
extractFunctionDeclaration=true
//@A1.cpp
int calc(int x, int y, int (f)(int, int)) {
	return f(x, y);
}

int betterCalc(int x, int y, /*$*/int (f)(int, int)/*$*/) {
	return f(x, y);
}

int add(int x, int y) {
	return x + y;
}
//=
using func = int(int, int);

int calc(int x, int y, func f) {
	return f(x, y);
}

int betterCalc(int x, int y, func f) {
	return f(x, y);
}

int add(int x, int y) {
	return x + y;
}
//!AliExtorExtractFunctionDeclarationSeveralOccurrencesSelectParameterJustSelected
//@.config
newName=func
justRefactorSelected=true
extractFunctionDeclaration=true
//@A1.cpp
int calc(int x, int y, int (f)(int, int)) {
	return f(x, y);
}

int betterCalc(int x, int y, /*$*/int (f)(int, int)/*$*/) {
	return f(x, y);
}

int add(int x, int y) {
	return x + y;
}
//=
using func = int(int, int);

int calc(int x, int y, int (f)(int, int)) {
	return f(x, y);
}

int betterCalc(int x, int y, func f) {
	return f(x, y);
}

int add(int x, int y) {
	return x + y;
}
//!AliExtorExtractFunctionDeclarationSeveralOccurrencesSelectDifferFromFuncPointer
//@.config
newName=func
extractFunctionDeclaration=true
//@A1.cpp
int calc(int x, int y, int (f)(int, int)) {
	return f(x, y);
}

int betterCalc(int x, int y, /*$*/int (f)(int, int)/*$*/) {
	return f(x, y);
}

int evenBetterCalc(int x, int y, int (*f)(int, int)) {
	return f(x, y);
}

int add(int x, int y) {
	return x + y;
}
//=
using func = int(int, int);

int calc(int x, int y, func f) {
	return f(x, y);
}

int betterCalc(int x, int y, func f) {
	return f(x, y);
}

int evenBetterCalc(int x, int y, int (*f)(int, int)) {
	return f(x, y);
}

int add(int x, int y) {
	return x + y;
}