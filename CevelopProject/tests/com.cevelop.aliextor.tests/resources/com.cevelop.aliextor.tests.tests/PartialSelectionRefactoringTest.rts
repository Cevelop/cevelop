//! AliExtor Extract Simple Partial Selection
//@.config
newName=INT
justRefactorSelected=true
//@A1.cpp
int main() {
	const /*$*/int/*$*/ foo { 43 };
}
//=
int main() {
	using INT = int;
	const INT foo { 43 };
}

//! AliExtor ExtractSimplePartialSelectionWithPointerOperators
//@.config
newName=INT
justRefactorSelected=true
//@A1.cpp
int main() {
	const /*$*/int/*$*/ * const foo { };
}
//=
int main() {
	using INT = int;
	const INT * const foo { };
}
//! AliExtor ExtractSimplePartialSelectionWithPointerOperatorsReference
//@.config
newName=INT
justRefactorSelected=true
//@A1.cpp
int main() {
	const /*$*/int/*$*/ & foo { };
}
//=
int main() {
	using INT = int;
	const INT & foo { };
}
//! AliExtor ExtractPartialSelectionWithStorageClass
//@.config
newName=INT
justRefactorSelected=true
//@A1.cpp
int main() {
	extern const /*$*/int/*$*/ foo;
}
//=
int main() {
	using INT = int;
	extern const INT foo;
}
//! AliExtor ExtractPartialSelectionWithStorageClass2
//@.config
newName=CINT
justRefactorSelected=true
//@A1.cpp
int main() {
	extern /*$*/const int/*$*/ foo;
}
//=
int main() {
	using CINT = const int;
	extern CINT foo;
}
//!AliExtor ExtractPartialSelectionWithConst
//@.config
newName=CINT
justRefactorSelected=true
//@A1.cpp
int main() {
	extern /*$*/const int/*$*/ foo;
}
//=
int main() {
	using CINT = const int;
	extern CINT foo;
}
//!AliExtor ExtractPartialSelectionWithConstOnly
//@.config
newName=CINT
justRefactorSelected=true
//@A1.cpp
int main() {
	extern volatile /*$*/const int/*$*/ foo;
}
//=
int main() {
	using CINT = const int;
	extern volatile CINT foo;
}
//!AliExtor ExtractPartialSelectionWithVolatile
//@.config
newName=VINT
justRefactorSelected=true
//@A1.cpp
int main() {
	extern /*$*/volatile int/*$*/ foo;
}
//=
int main() {
	using VINT = volatile int;
	extern VINT foo;
}
//!AliExtor ExtractPartialSelectionWithVolatileOnly
//@.config
newName=VINT
justRefactorSelected=true
//@A1.cpp
int main() {
	extern const /*$*/volatile int/*$*/ foo;
}
//=
int main() {
	using VINT = volatile int;
	extern const VINT foo;
}
//!AliExtor ExtractPartialSelectionWithVolatileAndConst
//@.config
newName=CVINT
justRefactorSelected=true
//@A1.cpp
int main() {
	extern /*$*/const volatile int/*$*/ foo;
}
//=
int main() {
	using CVINT = const volatile int;
	extern CVINT foo;
}
//!AliExtor ExtractPartialSelectionOfIntWithMultipleOccurrences
//@.config
newName=INT
//@A1.cpp
int main() {
	extern const volatile /*$*/int/*$*/ foo;
	int abc { 13 };
}
//=
int main() {
	using INT = int;
	extern const volatile INT foo;
	INT abc { 13 };
}
//!AliExtor ExtractPartialSelectionOfConstIntWithMultipleOccurrences
//@.config
newName=CINT
//@A1.cpp
int main() {
	extern volatile /*$*/const int/*$*/ foo;
	const int abc { };
}
//=
int main() {
	using CINT = const int;
	extern volatile CINT foo;
	CINT abc { };
}
//!AliExtor ExtractPartialSelectionOfVolatileIntWithMultipleOccurrences
//@.config
newName=VINT
//@A1.cpp
int main() {
	extern const /*$*/volatile int/*$*/ foo;
	volatile int abc { };
	const int abcd { };
}
//=
int main() {
	using VINT = volatile int;
	extern const VINT foo;
	VINT abc { };
	const int abcd { };
}
//!AliExtor ExtractPartialSelectionOfVolatileCostIntWithMultipleOccurrences
//@.config
newName=CVINT
//@A1.cpp
int main() {
	extern /*$*/const volatile int/*$*/ foo;
	const volatile int abc { };
}
//=
int main() {
	using CVINT = const volatile int;
	extern CVINT foo;
	CVINT abc { };
}
//!AliExtor ExtractPartialSelectionOfVolatileIntWithMultipleOccurrencesAndStorageModifier
//@.config
newName=INT
//@A1.cpp
int main() {
	/*$*/int extern/*$*/ volatile * const foo;
	int abc { 15 };
}
//=
int main() {
	using INT = int;
	extern volatile INT * const foo;
	INT abc { 15 };
}
//!AliExtor ExtractConstIntPointer
//@.config
newName=CIPTR
justRefactorSelected=true
//@A1.cpp
int main(){
	/*$*/int const * const/*$*/ foo { };
}
//=
int main(){
	using CIPTR = const int*const;
	CIPTR foo { };
}
//!AliExtor ExtractConstIntReference
//@.config
newName=CIREF
justRefactorSelected=true
//@A1.cpp
int main(){
	/*$*/int const &/*$*/ foo { };
}
//=
int main(){
	using CIREF = const int&;
	CIREF foo { };
}
//!AliExtor ExtractConstIntPointerRefactorAll
//@.config
newName=CIPTR
//@A1.cpp
int main(){
	/*$*/int const * const/*$*/ foo { };
}
//=
int main(){
	using CIPTR = const int*const;
	CIPTR foo { };
}
//!AliExtor ExtractConstIntReferenceRefactorAll
//@.config
newName=CIREF
//@A1.cpp
int main(){
	/*$*/int const &/*$*/ foo { };
}
//=
int main(){
	using CIREF = const int&;
	CIREF foo { };
}
//!AliExtor ExtractConstIntPointerWith2Occurrences
//@.config
newName=CIPTR
justRefactorSelected=true
//@A1.cpp
int main(){
	/*$*/int const * const/*$*/ foo { };
	int const * const * volatile food { };
}
//=
int main(){
	using CIPTR = const int*const;
	CIPTR foo { };
	int const * const * volatile food { };
}
//!AliExtor ExtractConstIntReferenceWith2Occurrences
//@.config
newName=CIREF
justRefactorSelected=true
//@A1.cpp
int main(){
	/*$*/int const &/*$*/ foo { };
	int const * const & food { };
}
//=
int main(){
	using CIREF = const int&;
	CIREF foo { };
	int const * const & food { };
}
//!AliExtor ExtractConstIntPointerWith2OccurrencesRefactorAll
//@.config
newName=CIPTR
//@A1.cpp
int main(){
	/*$*/int const * const/*$*/ foo { };
	int const * const * volatile food { };
}
//=
int main(){
	using CIPTR = const int*const;
	CIPTR foo { };
	CIPTR* volatile food { };
}
//!AliExtor ExtractConstIntReferenceWith2OccurrencesRefactorAll
//@.config
newName=CIREF
//@A1.cpp
int main(){
	/*$*/int const &/*$*/ foo { };
	const int & food { };
}
//=
int main(){
	using CIREF = const int&;
	CIREF foo { };
	CIREF food { };
}
//!AliExtor ExtractConstIntPointerWith2PointerOperators
//@.config
newName=DBLPTR
//@A1.cpp
int main(){
	int const * const foo { };
	/*$*/int const * const * volatile/*$*/ food { };
}
//=
int main(){
	using DBLPTR = const int*const *volatile;
	int const * const foo { };
	DBLPTR food { };
}
//!AliExtor ExtractConstIntReferenceWith2PointerOperators
//@.config
newName=DBLPTR
//@A1.cpp
int main(){
	int const * const foo { };
	/*$*/int const * const * volatile/*$*/ & food { };
}
//=
int main(){
	using DBLPTR = const int*const *volatile;
	int const * const foo { };
	DBLPTR& food { };
}
//!AliExtor ExtractConstIntReferenceWith2PointerOperators2
//@.config
newName=DBLREF
//@A1.cpp
int main(){
	int const * const foo { };
	/*$*/int const * const * volatile &/*$*/ food { };
}
//=
int main(){
	using DBLREF = const int*const *volatile &;
	int const * const foo { };
	DBLREF food { };
}
//!AliExtor ExtractVectorOfStringsWithPointer
//@.config
newName=VS
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	/*$*/std::vector<std::string> * const/*$*/ strings { };
	int * const nums { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string>*const;
	VS strings { };
	int * const nums { };
}
//!AliExtor ExtractVectorOfStringsWithReference
//@.config
newName=VS
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	const /*$*/std::vector<std::string> &/*$*/ strings { };
	const int & nums { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string>&;
	const VS strings { };
	const int & nums { };
}
//!AliExtor ExtractVectorOfStringsWithPointerRefactorAll
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	/*$*/std::vector<std::string> * const/*$*/ strings { };
	int * const nums { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string>*const;
	VS strings { };
	int * const nums { };
}
//!AliExtor ExtractVectorOfStringsWithReferenceRefactorAll
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	const /*$*/std::vector<std::string> &/*$*/ strings { };
	const int * const nums { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string>&;
	const VS strings { };
	const int * const nums { };
}
//!AliExtor ExtractVectorOfStringsWithPointerRefactorAllWith2Occurrences
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	/*$*/std::vector<std::string> * const/*$*/ strings { };
	std::vector<std::string> normalStrings { };
	std::vector<std::string> * const otherStrings { };
	int * const nums { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string>*const;
	VS strings { };
	std::vector<std::string> normalStrings { };
	VS otherStrings { };
	int * const nums { };
}
//!AliExtor ExtractVectorOfStringsWithReferenceRefactorAllWith2Occurrences
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	const /*$*/std::vector<std::string> &/*$*/ strings { };
	const std::vector<std::string> normalStrings { };
	const std::vector<std::string> & otherStrings { };
	const int * const nums { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string>&;
	const VS strings { };
	const std::vector<std::string> normalStrings { };
	const VS otherStrings { };
	const int * const nums { };
}
//!AliExtor ExtractVectorOfStringsWithPointerRefactorAllWith2SimilarOccurrences
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	/*$*/std::vector<std::string> * const/*$*/ strings { };
	std::vector<std::string> normalStrings { };
	std::vector<std::string> * const * otherStrings { };
	int * const nums { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string>*const;
	VS strings { };
	std::vector<std::string> normalStrings { };
	VS* otherStrings { };
	int * const nums { };
}
//!AliExtor ExtractVectorOfStringsWithReferenceRefactorAllWith2SimilarOccurrences
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	const /*$*/std::vector<std::string>* const/*$*/ & strings { };
	std::vector<std::string> normalStrings { };
	const std::vector<std::string> * const & otherStrings { };
	const int * const nums { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string>*const;
	const VS& strings { };
	std::vector<std::string> normalStrings { };
	const VS& otherStrings { };
	const int * const nums { };
}
//!AliExtor ExtractVectorOfStringsWithPointerRefactorAllWith2SimilarOccurrences2
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	/*$*/std::vector<std::string> * const */*$*/ strings { };
	std::vector<std::string> normalStrings { };
	std::vector<std::string> * const otherStrings { };
	int * const nums { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string>*const *;
	VS strings { };
	std::vector<std::string> normalStrings { };
	std::vector<std::string> * const otherStrings { };
	int * const nums { };
}
//!AliExtor ExtractVectorOfStringsWithNestedPointer
//@.config
newName=VS
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	/*$*/std::vector<std::string*> * const */*$*/ strings { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string*>*const *;
	VS strings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedPointerAndReference
//@.config
newName=VS
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	const /*$*/std::vector<std::string*> * const * &/*$*/ strings { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string*>*const *&;
	const VS strings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedPointerRefactorAll
//@.config
newName=VS
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	/*$*/std::vector<std::string*> * const */*$*/ strings { };
	int num { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string*>*const *;
	VS strings { };
	int num { };
}
//!AliExtor ExtractVectorOfStringsWithNestedReferenceRefactorAll
//@.config
newName=VS
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	const /*$*/std::vector<std::string*> * const * &/*$*/ strings { };
	int num { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string*>*const *&;
	const VS strings { };
	int num { };
}
//!AliExtor ExtractVectorOfStringsWithNestedPointerRefactorAllWith2Occurrences
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	/*$*/std::vector<std::string*> * const */*$*/ strings { };
	std::vector<std::string*> * const * otherStrings { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string*>*const *;
	VS strings { };
	VS otherStrings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedReferenceRefactorAllWith2Occurrences
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	const /*$*/std::vector<std::string*> * const * &/*$*/ strings { };
	const std::vector<std::string*> * const * & otherStrings { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string*>*const *&;
	const VS strings { };
	const VS otherStrings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedPointerRefactorAllWith2OccurrencesPartiallySelected
//@.config
newName=VS
//@A1.cpp
#include <vector>
int main(){
	/*$*/std::vector<std::string*> * const /*$*/* strings { };
	std::vector<std::string*> * const otherStrings { };
}
//=
#include <vector>
int main(){
	using VS = std::vector<std::string*>*const;
	VS* strings { };
	VS otherStrings { };
}

//!AliExtor ExtractVectorOfStringsWithNestedPointerInnerSelected
//@.config
newName=letters
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	std::vector</*$*/std::string*/*$*/> * const * strings { };
}
//=
#include <vector>
int main(){
	using letters = std::string*;
	std::vector<letters> * const * strings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedReferenceInnerSelected
//@.config
newName=letters
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	std::vector</*$*/std::string&/*$*/> * const * strings { };
}
//=
#include <vector>
int main(){
	using letters = std::string&;
	std::vector<letters> * const * strings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedPointerInnerPartiallySelected
//@.config
newName=letters
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	std::vector</*$*/std::string*/*$*/*> * const * strings { };
}
//=
#include <vector>
int main(){
	using letters = std::string*;
	std::vector<letters*> * const * strings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedReferenceInnerPartiallySelected
//@.config
newName=letters
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	std::vector</*$*/std::string*/*$*/&> * const * strings { };
}
//=
#include <vector>
int main(){
	using letters = std::string*;
	std::vector<letters&> * const * strings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedPointerInnerPartiallySelectedWithTQs
//@.config
newName=letters
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	std::vector</*$*/std::string* const/*$*/* volatile> * const * strings { };
}
//=
#include <vector>
int main(){
	using letters = std::string*const;
	std::vector<letters* volatile > * const * strings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedReferenceInnerPartiallySelectedWithTQs
//@.config
newName=letters
justRefactorSelected=true
//@A1.cpp
#include <vector>
int main(){
	std::vector</*$*/std::string* const/*$*/* volatile &> * const * strings { };
}
//=
#include <vector>
int main(){
	using letters = std::string*const;
	std::vector<letters* volatile &> * const * strings { };
}
//!AliExtor ExtractVectorOfStringsWithNestedPointerInnerPartiallySelected2Occurrences
//@.config
newName=letters
//@A1.cpp
#include <vector>
int main(){
	std::vector</*$*/std::string*/*$*/*> * const * strings { };
	std::string* things { };
}
//=
#include <vector>
int main(){
	using letters = std::string*;
	std::vector<letters*> * const * strings { };
	letters things { };
}
//!AliExtor ExtractVectorOfStringsWithNestedPointerInnerPartiallySelectedWithTQs2Occurrences
//@.config
newName=letters
//@A1.cpp
#include <vector>
int main(){
	std::vector</*$*/std::string* const/*$*/* volatile> * const * strings { };
	std::string* const notes { };
}
//=
#include <vector>
int main(){
	using letters = std::string*const;
	std::vector<letters* volatile > * const * strings { };
	letters notes { };
}
//!AliExtor ExtractRefactorRValue
//@.config
newName=RVINT
//@A1.cpp
int main(){
	int num { 2 };
	/*$*/int&&/*$*/ rvalue_ref { std::move(num) };
}
//=
int main(){
	using RVINT = int&&;
	int num { 2 };
	RVINT rvalue_ref { std::move(num) };
}
//! AliExtor ExtractRefactorRValue2Occurrences
//@.config
newName=RVINT
//@A1.cpp
int main(){
	int num { 2 };
	int betterNum { 42 };
	/*$*/int&&/*$*/ rvalue_ref { std::move(num) };
	int&& otherRvalue_ref { std::move(betterNum) };
}
//=
int main(){
	using RVINT = int&&;
	int num { 2 };
	int betterNum { 42 };
	RVINT rvalue_ref { std::move(num) };
	RVINT otherRvalue_ref { std::move(betterNum) };
}