//!Array Declaration
//@main.cpp
int main(){
	int c[42];
}
//=
#include <array>
int main(){
	std::array<int, 42> c;
}


//!Array Initialization With List
//@main.cpp
int main(){
	int c[3] = {12, 13, 44};
}
//=
#include <array>
int main(){
	std::array<int, 3> c = { { 12, 13, 44 } };
}


//!Array Initialization Without Size
//@main.cpp
int main(){
	int c[] = {12, 13, 44};
}
//=
#include <array>
int main(){
	std::array<int, 3> c = { { 12, 13, 44 } };
}


//!Include Statement Insertion
//@main.cpp
#include <array>
int main(){
	int c[] = {12, 13, 44};
}
//=
#include <array>
int main(){
	std::array<int, 3> c = { { 12, 13, 44 } };
}

//!Multiple Declarators 1
//@main.cpp
int main()  {
  int a = 12, b[] = {1,2,3}, c = 0; 
}
//=
#include <array>
int main()  {
	int a = 12;
	std::array<int, 3> b = { { 1, 2, 3 } };
	int c = 0;
}

//!Multiple Declarators 2
//@main.cpp
int main()  {
  int a{12}, b[]{1,2,3}, c{0}; 
}
//=
#include <array>
int main()  {
	int a { 12 };
	std::array<int, 3> b { { 1, 2, 3 } };
	int c { 0 };
}

//!Multiple Declarators 3
//@main.cpp
int main()  {
  int a(12), b[]{1,2,3}, c(0); 
}
//=
#include <array>
int main()  {
	int a(12);
	std::array<int, 3> b { { 1, 2, 3 } };
	int c(0);
}

//!Multiple Declarators 4
//@main.cpp
int main()  {
  int a = { 12 }, b[] = {1,2,3}, c = {0}; 
}
//=
#include <array>
int main()  {
	int a = { 12 };
	std::array<int, 3> b = { { 1, 2, 3 } };
	int c = { 0 };
}

//!Replace All Occurrences
//@main.cpp
void printArray(int a[], int size)  {
  std::cout << "[ ";
  for(int i = 0; i < size; ++i)  {
		std::cout << a[i] << " ";
	}
  std::cout << "]";
}
int main()  {
  int a[] = {1,2,3};
  a[0] = 4;
  printArray(a, 3);
}
//=
#include <array>
void printArray(int a[], int size)  {
  std::cout << "[ ";
  for(int i = 0; i < size; ++i)  {
		std::cout << a[i] << " ";
	}
  std::cout << "]";
}
int main()  {
	std::array<int, 3> a = { { 1, 2, 3 } };
  a[0] = 4;
	printArray(a.data(), 3);
}


//!Multiple Line Declaration
//@main.cpp
int main(){
int myNumbers[] = {
		1,
		2,
		3,
		4,
		5
};}
//=
#include <array>
int main(){
	std::array<int, 5> myNumbers = { { 1, 2, 3, 4, 5 } };
}


//!Global Declaration
//@main.cpp
int numbers[12];
//=
#include <array>
std::array<int, 12> numbers;


//!Global Declaration Without Size
//@main.cpp
int numbers[] = {1,2,3,4};
//=
#include <array>
std::array<int, 4> numbers = { { 1, 2, 3, 4 } };


//!Global Declaration With Size
//@main.cpp
int numbers[12] = {1,2,3,4};
//=
#include <array>
std::array<int, 12> numbers = { { 1, 2, 3, 4 } };


//!Multiple Global Declarations
//@main.cpp
int numbers, notes[11];
//=
#include <array>
int numbers;
std::array<int, 11> notes;


//!Multiple Replace Ocurrencies
//@main.cpp
#include <iostream>
int a[3];
void printArray(int a[], int size) {
		std::cout << "[ ";
		for (int i = 0; i < size; ++i) {
			std::cout << a[i] << " ";
		}
		std::cout << "]";
}
int main() {
		a[1] = 2;
		a[2] = 3;
		a[0] = 4;
		printArray(a, 3);
}
//=
#include <iostream>
#include <array>
std::array<int, 3> a;
void printArray(int a[], int size) {
		std::cout << "[ ";
		for (int i = 0; i < size; ++i) {
			std::cout << a[i] << " ";
		}
		std::cout << "]";
}
int main() {
		a[1] = 2;
		a[2] = 3;
		a[0] = 4;
	printArray(a.data(), 3);
}


//!Char Array
//@main.cpp
int main() {
	char* words[] = {"hello", "World", "!"};
}
//=
#include <array>
int main() {
	std::array<char*, 3> words = { { "hello", "World", "!" } };
}

//!Multidimensional Arrays
//@main.cpp
int numbers[4][5][12];
//=
#include <array>
std::array<std::array<std::array<int, 12>, 5>, 4> numbers;

//!Multidimensional Array With Values
//@main.cpp
int main() {
	double myNumbers[][5] = {{ 32.19, 47.29, 31.99, 19.11, 11.19},
				{ 11.29, 22.49, 33.47, 17.29, 5.01 },
				{ 41.97, 22.09, 9.76, 22.55, 6.22 }};}
//=
#include <array>
int main() {
	std::array<std::array<double, 5>, 3> myNumbers = { { { 32.19, 47.29, 31.99,
			19.11, 11.19 }, { 11.29, 22.49, 33.47, 17.29, 5.01 }, { 41.97,
			22.09, 9.76, 22.55, 6.22 } } };
}

//!Macro Modifier
//@main.cpp
#define ARR_LENGTH 42
#include <iostream>

int main(){
		int numbers[ARR_LENGTH];
		numbers[0] = 1;
		numbers[1] = 2;
		std::cout << numbers[0];
}
//=
#define ARR_LENGTH 42
#include <iostream>
#include <array>

int main(){
	std::array<int, ARR_LENGTH> numbers;
		numbers[0] = 1;
		numbers[1] = 2;
		std::cout << numbers[0];
}


//!Static Const Array
//@main.cpp
static const int numbers[]= {1,2,3,4,5};
//=
#include <array>
static std::array<const int, 5> numbers = { { 1, 2, 3, 4, 5 } };


//!Multidimensional Const Array
//@main.cpp
static const int numbers[][3]= {{1,2,3},{4,5,6}};
//=
#include <array>
static std::array<std::array<const int, 3>, 2> numbers = { { { 1, 2, 3 }, { 4,
		5, 6 } } };


//!Array Length
//@main.cpp
int main()  {
  int arr[] = {1,2,3,4};
  int len1 = sizeof(arr) / sizeof(*arr);
  int len2 = sizeof arr / sizeof *arr;
}
//=
#include <array>
int main()  {
	std::array<int, 4> arr = { { 1, 2, 3, 4 } };
	int len1 = arr.size();
	int len2 = arr.size();
}

//!Typedef Array
//@A.cpp
typedef int arr[10];
//=
#include <array>
typedef std::array<int, 10> arr;

//!Extern Array
//@A.cpp
extern double arr[10];
//=
#include <array>
extern std::array<double, 10> arr;

//!Mutable Array Member
//@A.cpp
struct X{
	int arr[10];
};
//=
#include <array>
struct X{
	std::array<int, 10> arr;
};

//!Mutable Array Member with included array header
//@A.cpp
#include <array>
struct X{
	std::array<int, 10> arr1;
	int arr2[10];
};
//=
#include <array>
struct X{
	std::array<int, 10> arr1;
	std::array<int, 10> arr2;
};

//!Brace Initialization 1
//@main.cpp
#include <string>
int main()  {
  std::string arr[]{ "One", "Two", "Three" };
}
//=
#include <string>
#include <array>
int main()  {
	std::array < std::string, 3 > arr { { "One", "Two", "Three" } };
}

//!Brace Initialization 2
//@main.cpp
#include <string>
int main()  {
  std::string arr[5]{ "One", "Two", "Three" };
}
//=
#include <string>
#include <array>
int main()  {
	std::array < std::string, 5 > arr { { "One", "Two", "Three" } };
}

//!Array with constant expression
//@main.cpp
int main()  {
	char arr[5 * sizeof(void*)];
}
//=
#include <array>
int main()  {
	std::array<char, 5 * sizeof(void*)> arr;
}

//!Array with constant expression array already included
//@main.cpp
#include <array>
int main()  {
	std::array<char, 5 * sizeof(void*)> arr1;
	char arr2[5 * sizeof(void*)];
}
//=
#include <array>
int main()  {
	std::array<char, 5 * sizeof(void*)> arr1;
	std::array<char, 5 * sizeof(void*)> arr2;
}
//!Replace Global Array
//@A.cpp
constexpr unsigned cArrayLength = 42;
unsigned cArray[cArrayLength];
//=
#include <array>

constexpr unsigned cArrayLength = 42;
std::array<unsigned, cArrayLength> cArray;
//!Use correct sizeof
//@main.cpp
int main() {
	int buf[100];
    return sizeof(buf);
}
//=
#include <array>

int main() {
	std::array<int, 100> buf;
	return sizeof(buf);
}
//!Optimize char sizeof
//@main.cpp
int main() {
	char buf[100];
	return sizeof(buf);
}
//=
#include <array>

int main() {
	std::array<char, 100> buf;
	return buf.size();
}