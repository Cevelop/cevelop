//!StrstrCleanup1
//@main.cpp
int main() {
	std::string str = "a string";
	char *found = strstr(&*str.begin(), "str");
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "a string";
	std::string::size_type found_pos = str.find("str");
	char *found = found_pos != std::string::npos ? &str[found_pos] : nullptr;
	std::cout << found << std::endl;
}


//!StrstrCleanup2
//@main.cpp
int main() {
	std::string str = "a string";
	const char *found = strstr(str.c_str(), "str");
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "a string";
	std::string::size_type found_pos = str.find("str");
	const char *found =
			found_pos != std::string::npos ? &str[found_pos] : nullptr;
	std::cout << found << std::endl;
}


//!StrstrCleanup3
//@main.cpp
int main() {
	std::string str = "a string";
	char *found;
	found = strstr(&*str.begin(), "str");
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "a string";
	char *found;
	std::string::size_type found_pos = str.find("str");
	found = found_pos != std::string::npos ? &str[found_pos] : nullptr;
	std::cout << found << std::endl;
}


//!StrstrCleanup4
//@main.cpp
struct X {
	char *ptr;
};

int main() {
	std::string str = "a string";
	X x;
	x.ptr = strstr(&*str.begin(), "str");
	std::cout << x.ptr << std::endl;
}
//=
struct X {
	char *ptr;
};

int main() {
	std::string str = "a string";
	X x;
	std::string::size_type ptr_pos = str.find("str");
	x.ptr = ptr_pos != std::string::npos ? &str[ptr_pos] : nullptr;
	std::cout << x.ptr << std::endl;
}


//!StrstrCleanup5
//@main.cpp
int main() {
	std::string str = "this is a test";
	const char *found = str.c_str();

	if(true)
		found = strstr(str.c_str(), "test");
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "this is a test";
	const char *found = str.c_str();

	if(true)
		{
		std::string::size_type found_pos = str.find("test");
		found = found_pos != std::string::npos ? &str[found_pos] : nullptr;
	}
	std::cout << found << std::endl;
}


//!StrstrCleanup6
//@main.cpp
int main() {
	int found_pos = 0;
	
	if(true) {
		std::string str = "a string";
		char *found = strstr(&*str.begin(), "str");
		std::cout << found << std::endl;
	}
}
//=
int main() {
	int found_pos = 0;
	
	if(true) {
		std::string str = "a string";
		std::string::size_type found_pos = str.find("str");
		char *found =
				found_pos != std::string::npos ? &str[found_pos] : nullptr;
		std::cout << found << std::endl;
	}
}


//!StrstrCleanup7
//@main.cpp
int main() {
	int found_pos = 0;
	
	if(true) {
		found_pos = 2;
		std::string str = "a string";
		char *found = strstr(&*str.begin(), "str");
		std::cout << found << std::endl;
	}
}
//=
int main() {
	int found_pos = 0;
	
	if(true) {
		found_pos = 2;
		std::string str = "a string";
		std::string::size_type found_pos2 = str.find("str");
		char *found =
				found_pos2 != std::string::npos ? &str[found_pos2] : nullptr;
		std::cout << found << std::endl;
	}
}


//!StrstrCleanup8
//@main.cpp
int main() {
	int found_pos = 0;
	std::string str = "a string";
	char *found = strstr(&*str.begin(), "str");
	std::cout << found << std::endl;
}
//=
int main() {
	int found_pos = 0;
	std::string str = "a string";
	std::string::size_type found_pos2 = str.find("str");
	char *found = found_pos2 != std::string::npos ? &str[found_pos2] : nullptr;
	std::cout << found << std::endl;
}


//!StrstrCleanup9
//@main.cpp
void f(int found_pos) {
	std::string str = "a string";
	char *found = strstr(&*str.begin(), "str");
	std::cout << found << std::endl;
}

int main() {
}
//=
void f(int found_pos) {
	std::string str = "a string";
	std::string::size_type found_pos2 = str.find("str");
	char *found = found_pos2 != std::string::npos ? &str[found_pos2] : nullptr;
	std::cout << found << std::endl;
}
int main() {
}


//!StrstrCleanup10
//@main.cpp
int main() {
	std::string str = "a string";
	char *found = strstr(&*str.begin(), "str");
	if (found != nullptr) {
		int index = found - str.c_str();
		std::cout << found << std::endl;
	}
	if (found != 0) {
		std::cout << found << std::endl;
	}
}
//=
int main() {
	std::string str = "a string";
	std::string::size_type found_pos = str.find("str");
	if (found_pos != std::string::npos) {
		int index = found_pos;
		std::cout << (str.c_str() + found_pos) << std::endl;
	}
	if (found_pos != std::string::npos) {
		std::cout << (str.c_str() + found_pos) << std::endl;
	}
}


//!StrstrCleanup11
//@main.cpp
int main() {
	std::string str = "a string";
	std::string search = "str";
	char *found = strstr(&*str.begin(), search.c_str());
	if (found != nullptr) {
		std::cout << found << std::endl;
	}
}
//=
int main() {
	std::string str = "a string";
	std::string search = "str";
	std::string::size_type found_pos = str.find(search);
	if (found_pos != std::string::npos) {
		std::cout << (str.c_str() + found_pos) << std::endl;
	}
}


//!StrstrCleanup12
//@main.cpp
#include "string.h"
int main() {
	std::string url = "http://www.domain.com/script?x=y";
	const char* com_tld = strstr(url.c_str(), ".com");
	if (com_tld) {
		if (strchr(com_tld, '/')) {
			std::cout << "test";
		}
	}
}
//=
#include "string.h"
int main() {
	std::string url = "http://www.domain.com/script?x=y";
	std::string::size_type com_tld_pos = url.find(".com");
	if (com_tld_pos != std::string::npos) {
		if (url.find('/', com_tld_pos) != std::string::npos) {
			std::cout << "test";
		}
	}
}


//!StrstrCleanup13
//@main.cpp
#include "string.h"
int main() {
	std::string str = "this is a test";
	const char* p = strstr(str.c_str(), "test");
	if(p) {
		std::cout << *(p + 1) << std::endl;
		std::cout << p[1] << std::endl;
	}
}
//=
#include "string.h"
int main() {
	std::string str = "this is a test";
	std::string::size_type p_pos = str.find("test");
	if (p_pos != std::string::npos) {
		std::cout << str[p_pos + 1] << std::endl;
		std::cout << str[p_pos + 1] << std::endl;
	}
}


//!StrchrCleanup1
//@main.cpp
int main() {
	std::string str = "a string";
	char *found = strchr(&*str.begin(), 's');
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "a string";
	std::string::size_type found_pos = str.find('s');
	char *found = found_pos != std::string::npos ? &str[found_pos] : nullptr;
	std::cout << found << std::endl;
}


//!StrchrCleanup2
//@main.cpp
int main() {
	std::string str = "a string";
	const char *found = strchr(str.c_str(), 's');
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "a string";
	std::string::size_type found_pos = str.find('s');
	const char *found =
			found_pos != std::string::npos ? &str[found_pos] : nullptr;
	std::cout << found << std::endl;
}


//!StrrchrCleanup1
//@main.cpp
int main() {
	std::string str = "a string";
	char *found = strrchr(&*str.begin(), 's');
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "a string";
	std::string::size_type found_pos = str.rfind('s');
	char *found = found_pos != std::string::npos ? &str[found_pos] : nullptr;
	std::cout << found << std::endl;
}


//!StrrchrCleanup2
//@main.cpp
int main() {
	std::string str = "a string";
	const char *found = strrchr(str.c_str(), 's');
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "a string";
	std::string::size_type found_pos = str.rfind('s');
	const char *found =
			found_pos != std::string::npos ? &str[found_pos] : nullptr;
	std::cout << found << std::endl;
}


//!StrpbrkCleanup1
//@main.cpp
int main() {
	std::string str = "a string";
	char *found = strpbrk(&*str.begin(), "0123456789");
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "a string";
	std::string::size_type found_pos = str.find_first_of("0123456789");
	char *found = found_pos != std::string::npos ? &str[found_pos] : nullptr;
	std::cout << found << std::endl;
}


//!StrpbrkCleanup2
//@main.cpp
int main() {
	std::string str = "a string";
	const char *found = strpbrk(str.c_str(), "0123456789");
	std::cout << found << std::endl;
}
//=
int main() {
	std::string str = "a string";
	std::string::size_type found_pos = str.find_first_of("0123456789");
	const char *found =
			found_pos != std::string::npos ? &str[found_pos] : nullptr;
	std::cout << found << std::endl;
}


//!StrcspnAssignedToVariableWithCheck
//@main.cpp
#include <cstring>
#include <iostream>
#include <string>

int main() {
	std::string str = "this is a string";
	size_t first_digit = strcspn(str.c_str(), "0123456789");
	if(first_digit != str.size()) {
		std::cout << "found a digit at: " << first_digit << std::endl;
	}
	if(first_digit == str.size()) {
		std::cout << "contains no digits" << std::endl;
	}
}
//=
#include <cstring>
#include <iostream>
#include <string>

int main() {
	std::string str = "this is a string";
	std::string::size_type first_digit = str.find_first_of("0123456789");
	if (first_digit != std::string::npos) {
		std::cout << "found a digit at: " << first_digit << std::endl;
	}
	if (first_digit == std::string::npos) {
		std::cout << "contains no digits" << std::endl;
	}
}


//!StrcspnAssignedToVariableWithoutCheck
//@main.cpp
#include <cstring>
#include <iostream>
#include <string>

int main() {
	std::string str = "this is a string";
	size_t first_digit = strcspn(str.c_str(), "0123456789");
	std::cout << first_digit << std::endl;
	if(first_digit != str.size()) {
		std::cout << "found a digit at: " << first_digit << std::endl;
	}
}
//=
#include <cstring>
#include <iostream>
#include <string>

int main() {
	std::string str = "this is a string";
	size_t first_digit = str.find_first_of("0123456789");
	if (first_digit == std::string::npos) {
		first_digit = str.size();
	}
	std::cout << first_digit << std::endl;
	if(first_digit != str.size()) {
		std::cout << "found a digit at: " << first_digit << std::endl;
	}
}


//!StrspnAssignedToVariableWithCheck
//@main.cpp
#include <cstring>
#include <iostream>
#include <string>

int main() {
	std::string str = "this is a string";
	size_t first_non_digit = strspn(str.c_str(), "0123456789");
	if(first_non_digit != str.size()) {
		std::cout << "found non-digit at: " << first_non_digit << std::endl;
	}
	if(first_non_digit == str.size()) {
		std::cout << "contains only digits" << std::endl;
	}
}
//=
#include <cstring>
#include <iostream>
#include <string>

int main() {
	std::string str = "this is a string";
	std::string::size_type first_non_digit = str.find_first_not_of("0123456789");
	if (first_non_digit != std::string::npos) {
		std::cout << "found non-digit at: " << first_non_digit << std::endl;
	}
	if (first_non_digit == std::string::npos) {
		std::cout << "contains only digits" << std::endl;
	}
}


//!StrspnAssignedToVariableWithoutCheck
//@main.cpp
#include <cstring>
#include <iostream>
#include <string>

int main() {
	std::string str = "this is a string";
	size_t first_non_digit = strspn(str.c_str(), "0123456789");
	std::cout << first_non_digit << std::endl;
	if(first_non_digit != str.size()) {
		std::cout << "found non-digit at: " << first_non_digit << std::endl;
	}
}
//=
#include <cstring>
#include <iostream>
#include <string>

int main() {
	std::string str = "this is a string";
	size_t first_non_digit = str.find_first_not_of("0123456789");
	if (first_non_digit == std::string::npos) {
		first_non_digit = str.size();
	}
	std::cout << first_non_digit << std::endl;
	if(first_non_digit != str.size()) {
		std::cout << "found non-digit at: " << first_non_digit << std::endl;
	}
}


//!MemchrCleanup1
//@main.cpp
int main() {
	std::string str = "a string";
	char *found = (char *) memchr(str.c_str(), ' ', str.size());
	std::cout << found << std::endl;
}
//=
#include <algorithm>

int main() {
	std::string str = "a string";
	auto found_pos = find(str.begin(), str.end(), ' ');
	char *found = (char *) (found_pos != str.end() ? &*found_pos : nullptr);
	std::cout << found << std::endl;
}


//!MemchrCleanup2
//@main.cpp
int main() {
	std::string str = "a string";
	char *found = 
		(char *) memchr(str.c_str(), ' ', 2);
	std::cout << found << std::endl;
}
//=
#include <algorithm>

int main() {
	std::string str = "a string";
	auto found_pos = find(str.begin(), str.begin() + 2, ' ');
	char *found = 
		(char *) (found_pos != str.begin() + 2 ? &*found_pos : nullptr);
	std::cout << found << std::endl;
}


//!MemchrCleanup3
//@main.cpp
int main() {
	std::string str = "a string";
	char *found;
	found = (char *) memchr(str.c_str(), ' ' , str.size());
	std::cout << found << std::endl;
}
//=
#include <algorithm>

int main() {
	std::string str = "a string";
	char *found;
	auto found_pos = find(str.begin(), str.end(), ' ');
	found = (char *) (found_pos != str.end() ? &*found_pos : nullptr);
	std::cout << found << std::endl;
}


//!MemchrCleanup4
//@main.cpp
struct X {
	char *ptr;
};

int main() {
	std::string str = "a string";
	X x;
	x.ptr = (char *) memchr(str.c_str(), ' ', str.size());
	std::cout << x.ptr << std::endl;
}
//=
#include <algorithm>

struct X {
	char *ptr;
};

int main() {
	std::string str = "a string";
	X x;
	auto ptr_pos = find(str.begin(), str.end(), ' ');
	x.ptr = (char *) (ptr_pos != str.end() ? &*ptr_pos : nullptr);
	std::cout << x.ptr << std::endl;
}


//!MemchrCleanup5
//@main.cpp
#include <algorithm>

int main() {
	std::string str = "this is a test";
	const char *found = str.c_str();

	if(true)
		found = (char *) memchr(str.c_str(), 'a', str.size());
	std::cout << found << std::endl;
}
//=
#include <algorithm>

int main() {
	std::string str = "this is a test";
	const char *found = str.c_str();

	if(true)
		{
		auto found_pos = find(str.begin(), str.end(), 'a');
		found = (char*) ((found_pos != str.end() ? &*found_pos : nullptr));
	}
	std::cout << found << std::endl;
}


//!MemchrCleanup6
//@main.cpp
int main() {
	int found_pos = 0;
	
	if(true) {
		std::string str = "a string";
		char *found = (char *) memchr(str.c_str(), ' ', str.size());
		std::cout << found << std::endl;
	}
}
//=
#include <algorithm>

int main() {
	int found_pos = 0;
	
	if(true) {
		std::string str = "a string";
		auto found_pos = find(str.begin(), str.end(), ' ');
		char *found = (char *) (found_pos != str.end() ? &*found_pos : nullptr);
		std::cout << found << std::endl;
	}
}


//!MemchrCleanup7
//@main.cpp
int main() {
	int found_pos = 0;
	
	if(true) {
		found_pos = 2;
		std::string str = "a string";
		char *found = 
			(char *) memchr(str.c_str(), ' ', str.size());
		std::cout << found << std::endl;
	}
}
//=
#include <algorithm>

int main() {
	int found_pos = 0;
	
	if(true) {
		found_pos = 2;
		std::string str = "a string";
		auto found_pos2 = find(str.begin(), str.end(), ' ');
		char *found = 
			(char *) (found_pos2 != str.end() ? &*found_pos2 : nullptr);
		std::cout << found << std::endl;
	}
}


//!MemchrCleanup8
//@main.cpp
int main() {
	int found_pos = 0;
	std::string str = "a string";
	char *found = (char *) 
		memchr(str.c_str(), ' ', 4);
	std::cout << found << std::endl;
}
//=
#include <algorithm>

int main() {
	int found_pos = 0;
	std::string str = "a string";
	auto found_pos2 = find(str.begin(), str.begin() + 4, ' ');
	char *found = (char *) 
		(found_pos2 != str.begin() + 4 ? &*found_pos2 : nullptr);
	std::cout << found << std::endl;
}


//!MemchrCleanup9
//@main.cpp
void f(int found_pos) {
	std::string str = "a string";
	char *found = (char *) memchr(str.c_str(), ' ', str.size());
	std::cout << found << std::endl;
}

int main() {
}
//=
#include <algorithm>

void f(int found_pos) {
	std::string str = "a string";
	auto found_pos2 = find(str.begin(), str.end(), ' ');
	char *found = (char *) (found_pos2 != str.end() ? &*found_pos2 : nullptr);
	std::cout << found << std::endl;
}
int main() {
}


//!MemchrCleanup10
//@main.cpp
int main() {
	std::string str = "a string";
	char *found = 
		(char *) std::memchr(str.c_str(), ' ', 2);
	std::cout << found << std::endl;
}
//=
#include <algorithm>

int main() {
	std::string str = "a string";
	auto found_pos = find(str.begin(), str.begin() + 2, ' ');
	char *found = 
		(char *) (found_pos != str.begin() + 2 ? &*found_pos : nullptr);
	std::cout << found << std::endl;
}


//!WebkitExample1
//@main.cpp
#include <algorithm>
#include <string>
int findMonth(std::string monthStr) {
	std::string needle = monthStr.substr(0, 3);
	std::transform(needle.begin(), needle.end(), needle.begin(), ::tolower);
	std::string haystack = "janfebmaraprmayjunjulaugsepoctnovdec";

	char *str = strstr(haystack.c_str(), needle.c_str());
	if(str) {
		int position = static_cast<int>(str - haystack.c_str());
        if (position % 3 == 0)
            return position / 3;
    }
    return -1;
}
//=
#include <algorithm>
#include <string>
int findMonth(std::string monthStr) {
	std::string needle = monthStr.substr(0, 3);
	std::transform(needle.begin(), needle.end(), needle.begin(), ::tolower);
	std::string haystack = "janfebmaraprmayjunjulaugsepoctnovdec";
	std::string::size_type str_pos = haystack.find(needle);
	if (str_pos != std::string::npos) {
		int position = static_cast<int>(str_pos);
        if (position % 3 == 0)
            return position / 3;
    }
    return -1;
}


//!WebkitExample2
//@main.cpp
#include <algorithm>
#include <string>
int findMonth(std::string monthStr) {
	std::string needle = monthStr.substr(0, 3);
	std::transform(needle.begin(), needle.end(), needle.begin(), ::tolower);
	std::string haystack = "janfebmaraprmayjunjulaugsepoctnovdec";

	char *str = strstr(haystack.c_str(), needle.c_str());
	if(str != nullptr) {
		int position = static_cast<int>(str - haystack.c_str());
        if (position % 3 == 0)
            return position / 3;
    }
    return -1;
}
//=
#include <algorithm>
#include <string>
int findMonth(std::string monthStr) {
	std::string needle = monthStr.substr(0, 3);
	std::transform(needle.begin(), needle.end(), needle.begin(), ::tolower);
	std::string haystack = "janfebmaraprmayjunjulaugsepoctnovdec";
	std::string::size_type str_pos = haystack.find(needle);
	if (str_pos != std::string::npos) {
		int position = static_cast<int>(str_pos);
        if (position % 3 == 0)
            return position / 3;
    }
    return -1;
}


//!WebkitExample3
//@main.cpp
#include <algorithm>
#include <string>
int findMonth(std::string monthStr) {
	std::string needle = monthStr.substr(0, 3);
	std::transform(needle.begin(), needle.end(), needle.begin(), ::tolower);
	std::string haystack = "janfebmaraprmayjunjulaugsepoctnovdec";

	char *str = strstr(haystack.c_str(), needle.c_str());
	if(str != 0) {
		int position = static_cast<int>(str - haystack.c_str());
        if (position % 3 == 0)
            return position / 3;
    }
    return -1;
}
//=
#include <algorithm>
#include <string>
int findMonth(std::string monthStr) {
	std::string needle = monthStr.substr(0, 3);
	std::transform(needle.begin(), needle.end(), needle.begin(), ::tolower);
	std::string haystack = "janfebmaraprmayjunjulaugsepoctnovdec";
	std::string::size_type str_pos = haystack.find(needle);
	if (str_pos != std::string::npos) {
		int position = static_cast<int>(str_pos);
        if (position % 3 == 0)
            return position / 3;
    }
    return -1;
}


//!WebkitExample4
//@main.cpp
#include <algorithm>
#include "string.h"
int findMonth(std::string monthStr) {
	std::string needle = monthStr.substr(0, 3);
	std::transform(needle.begin(), needle.end(), needle.begin(), ::tolower);
	std::string haystack = "janfebmaraprmayjunjulaugsepoctnovdec";

	char *str = strstr(haystack.c_str(), needle.c_str());
	if(str != NULL) {
		int position = static_cast<int>(str - haystack.c_str());
        if (position % 3 == 0)
            return position / 3;
    }
    return -1;
}
//=
#include <algorithm>
#include "string.h"
int findMonth(std::string monthStr) {
	std::string needle = monthStr.substr(0, 3);
	std::transform(needle.begin(), needle.end(), needle.begin(), ::tolower);
	std::string haystack = "janfebmaraprmayjunjulaugsepoctnovdec";
	std::string::size_type str_pos = haystack.find(needle);
	if (str_pos != std::string::npos) {
		int position = static_cast<int>(str_pos);
        if (position % 3 == 0)
            return position / 3;
    }
    return -1;
}
