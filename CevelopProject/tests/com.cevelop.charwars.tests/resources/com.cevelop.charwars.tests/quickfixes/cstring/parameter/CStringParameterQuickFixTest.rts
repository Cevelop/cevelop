//!CStringParameterQuickFix1
//@main.cpp
#include "iostream.h"
#include "string.h"
#include "cstring.h"

void inspect(const char *filename);

int main() {
	inspect("myfile.txt");
	inspect("mypic.jpg");
	inspect("aworddoc.doc");
}

void inspect(const char *filename) {
	if (filename) {
		const char* ext = strrchr(filename, '.');
		if (!strcmp(ext, ".txt")) {
			std::cout << "This is a text file";
		} else if (!strcmp(ext, ".jpg")) {
			std::cout << "This is a picture file";
		}
	}
}
//=
#include <string>
#include "iostream.h"
#include "string.h"
#include "cstring.h"

void inspect(const std::string& filename);
void inspect(const char *filename);

int main() {
	inspect("myfile.txt");
	inspect("mypic.jpg");
	inspect("aworddoc.doc");
}

void inspect(const std::string& filename) {
	const char* ext = strrchr(filename.c_str(), '.');
	if (!strcmp(ext, ".txt")) {
		std::cout << "This is a text file";
	} else if (!strcmp(ext, ".jpg")) {
		std::cout << "This is a picture file";
	}
}

void inspect(const char *filename) {
	if (filename) {
		inspect(std::string(filename));
	}
}


//!CStringParameterQuickFix2
//@main.cpp
#include "iostream.h"
#include "string.h"

void printFileType(const char *file);

int main() {
}

void printFileType(const char *file) {
	if(file) {
		if(strcmp(file+strlen(file)-4, ".jpg") == 0) {
			std::cout << "Image file" << std::endl;
		}
		if(strcmp(file+strlen(file)-4, ".mp3") == 0) {
			std::cout << "Sound file" << std::endl;
		}
		if(strcmp(file+strlen(file)-4, ".txt") == 0) {
			std::cout << "Text file" << std::endl;
		}
	}
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

void printFileType(const std::string& file);
void printFileType(const char *file);

int main() {
}

void printFileType(const std::string& file) {
	if (file.compare(file.size() - 4, std::string::npos, ".jpg") == 0) {
		std::cout << "Image file" << std::endl;
	}
	if (file.compare(file.size() - 4, std::string::npos, ".mp3") == 0) {
		std::cout << "Sound file" << std::endl;
	}
	if (file.compare(file.size() - 4, std::string::npos, ".txt") == 0) {
		std::cout << "Text file" << std::endl;
	}
}

void printFileType(const char *file) {
	if (file) {
		printFileType(std::string(file));
	}
}


//!CStringParameterQuickFixGuardClause1
//@main.cpp
#include "iostream.h"
#include "string.h"

void func(int i, const char *str);

int main() {
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (!str) {
		std::cout << "B" << std::endl;
		return;
	}
	
	std::cout << "C" << std::endl;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

void func(int i, const std::string& str);
void func(int i, const char *str);

int main() {
}

void func(int i, const std::string& str) {
	std::cout << "C" << std::endl;
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (!str) {
		std::cout << "B" << std::endl;
		return;
	}
	func(i, std::string(str));
}


//!CStringParameterQuickFixGuardClause2
//@main.cpp
#include "iostream.h"
#include "string.h"

void func(int i, const char *str);

int main() {
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (!str)
		return;
	
	std::cout << "B" << std::endl;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

void func(int i, const std::string& str);
void func(int i, const char *str);

int main() {
}

void func(int i, const std::string& str) {
	std::cout << "B" << std::endl;
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (!str)
		return;

	func(i, std::string(str));
}


//!CStringParameterQuickFixGuardClause3
//@main.cpp
#include "iostream.h"
#include "string.h"

int func(int i, const char *str);

int main() {
}

int func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (!str) {
		std::cout << "B" << std::endl;
		return -1;
	}
	
	std::cout << "C" << std::endl;
	return 0;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

int func(int i, const std::string& str);
int func(int i, const char *str);

int main() {
}

int func(int i, const std::string& str) {
	std::cout << "C" << std::endl;
	return 0;
}

int func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (!str) {
		std::cout << "B" << std::endl;
		return -1;
	}
	return func(i, std::string(str));
}


//!CStringParameterQuickFixGuardClause4
//@main.cpp
#include "iostream.h"
#include "string.h"

int func(int i, const char *str);

int main() {
}

int func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (i < 0 || !str) {
		std::cout << "B" << std::endl;
		return -1;
	}
	
	std::cout << "C" << std::endl;
	return 0;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

int func(int i, const std::string& str);
int func(int i, const char *str);

int main() {
}

int func(int i, const std::string& str) {
	std::cout << "C" << std::endl;
	return 0;
}

int func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (i < 0 || !str) {
		std::cout << "B" << std::endl;
		return -1;
	}
	return func(i, std::string(str));
}


//!CStringParameterQuickFixGuardClause5
//@main.cpp
#include "iostream.h"
#include "string.h"

int func(int i, const char *str);

int main() {
}

int func(int i, const char *str) {
	assert(str);
	std::cout << str << std::endl;
	return 0;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

int func(int i, const std::string& str);
int func(int i, const char *str);

int main() {
}

int func(int i, const std::string& str) {
	std::cout << str << std::endl;
	return 0;
}

int func(int i, const char *str) {
	assert(str);
	return func(i, std::string(str));
}


//!CStringParameterQuickFixNullCheck1
//@main.cpp
#include "iostream.h"
#include "string.h"

void func(const char *str);

int main() {
}

void func(const char *str) {
	std::cout << "A" << std::endl;
	
	if (str) {
		bool equal = strcmp(str, "test") == 0;
		std::cout << "B" << std::endl;
	} else {
		std::cout << "C" << std::endl;
	}
	
	std::cout << "D" << std::endl;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

void func(const std::string& str);
void func(const char *str);

int main() {
}

void func(const std::string& str) {
	bool equal = str == "test";
	std::cout << "B" << std::endl;
}

void func(const char *str) {
	std::cout << "A" << std::endl;
	
	if (str) {
		func(std::string(str));
	} else {
		std::cout << "C" << std::endl;
	}
	
	std::cout << "D" << std::endl;
}


//!CStringParameterQuickFixNullCheck2
//@main.cpp
#include "iostream.h"
#include "string.h"

void func(const char *str);

int main() {
}

void func(const char *str) {
	std::cout << "A" << std::endl;
	
	if (!str) {
		std::cout << "B" << std::endl;
	} else {
		bool equal = strcmp(str, "test") == 0;
		std::cout << "C" << std::endl;
	}
	
	std::cout << "D" << std::endl;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

void func(const std::string& str);
void func(const char *str);

int main() {
}

void func(const std::string& str) {
	bool equal = str == "test";
	std::cout << "C" << std::endl;
}

void func(const char *str) {
	std::cout << "A" << std::endl;
	
	if (!str) {
		std::cout << "B" << std::endl;
	} else {
		func(std::string(str));
	}
	
	std::cout << "D" << std::endl;
}


//!CStringParameterQuickFixNullCheck3
//@main.cpp
#include "iostream.h"
#include "string.h"

int func(const char *str);

int main() {
}

int func(const char *str) {
	std::cout << "A" << std::endl;
	
	if (str) {
		bool equal = strcmp(str, "test") == 0;
		std::cout << "B" << std::endl;
		return 0;
	} else {
		std::cout << "C" << std::endl;
	}
	
	std::cout << "D" << std::endl;
	return -1;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

int func(const std::string& str);
int func(const char *str);

int main() {
}

int func(const std::string& str) {
	bool equal = str == "test";
	std::cout << "B" << std::endl;
	return 0;
}

int func(const char *str) {
	std::cout << "A" << std::endl;
	
	if (str) {
		return func(std::string(str));
	} else {
		std::cout << "C" << std::endl;
	}
	
	std::cout << "D" << std::endl;
	return -1;
}


//!CStringParameterQuickFixNullCheck4
//@main.cpp
#include "iostream.h"
#include "string.h"

void func(int i, const char *str);

int main() {
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (str) {
		bool equal = strcmp(str, "test") == 0;
		std::cout << "B" << std::endl;
	}
	
	std::cout << "C" << std::endl;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

void func(int i, const std::string& str);
void func(int i, const char *str);

int main() {
}

void func(int i, const std::string& str) {
	bool equal = str == "test";
	std::cout << "B" << std::endl;
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (str) {
		func(i, std::string(str));
	}
	
	std::cout << "C" << std::endl;
}


//!CStringParameterQuickFixNullCheck5
//@main.cpp
#include "iostream.h"
#include "string.h"

void func(int i, const char *str);

int main() {
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (i > 0 && str) {
		bool equal = strcmp(str, "test") == 0;
		std::cout << "B" << std::endl;
	}
	
	std::cout << "C" << std::endl;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

void func(int i, const std::string& str);
void func(int i, const char *str);

int main() {
}

void func(int i, const std::string& str) {
	bool equal = str == "test";
	std::cout << "B" << std::endl;
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (i > 0 && str) {
		func(i, std::string(str));
	}
	
	std::cout << "C" << std::endl;
}


//!CStringParameterQuickFixNullCheck6
//@main.cpp
#include "iostream.h"
#include "string.h"

void func(int i, const char *str);

int main() {
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (i <= 0 || !str) {
		std::cout << "B" << std::endl;
	}
	else {
		bool equal = strcmp(str, "test") == 0;
		std::cout << "C" << std::endl;
	}
	
	std::cout << "D" << std::endl;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

void func(int i, const std::string& str);
void func(int i, const char *str);

int main() {
}

void func(int i, const std::string& str) {
	bool equal = str == "test";
	std::cout << "C" << std::endl;
}

void func(int i, const char *str) {
	std::cout << "A" << std::endl;
	
	if (i <= 0 || !str) {
		std::cout << "B" << std::endl;
	}
	else {
		func(i, std::string(str));
	}
	
	std::cout << "D" << std::endl;
}


//!CStringParameterQuickFixResultVariable1
//@main.cpp
#include "iostream.h"
#include "string.h"

int func(int i, const char *str);

int main() {
}

int func(int i, const char *str) {
	int res = 0;
	
	if (str) {
		std::cout << "A" << std::endl;
		res = strlen(str);
	}
	
	return res;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

int func(int i, const std::string& str);
int func(int i, const char *str);

int main() {
}

int func(int i, const std::string& str) {
	int res = 0;
	std::cout << "A" << std::endl;
	res = str.size();
	return res;
}

int func(int i, const char *str) {
	int res = 0;
	
	if (str) {
		res = func(i, std::string(str));
	}
	
	return res;
}


//!CStringParameterQuickFixResultVariable2
//@main.cpp
#include "iostream.h"
#include "string.h"

int func(int i, const char *str);

int main() {
}

int func(int i, const char *str) {
	int res;
	
	if (str) {
		std::cout << "A" << std::endl;
		res = strlen(str);
	}
	else {
		std::cout << "B" << std::endl;
		res = -1;
	}
	
	return res;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

int func(int i, const std::string& str);
int func(int i, const char *str);

int main() {
}

int func(int i, const std::string& str) {
	int res;
	std::cout << "A" << std::endl;
	res = str.size();
	return res;
}

int func(int i, const char *str) {
	int res;
	
	if (str) {
		res = func(i, std::string(str));
	}
	else {
		std::cout << "B" << std::endl;
		res = -1;
	}
	
	return res;
}


//!CStringParameterQuickFixResultVariable3
//@main.cpp
#include "iostream.h"
#include "string.h"

int func(int i, const char *str);

int main() {
}

int func(int i, const char *str) {
	int res;
	
	if (!str) {
		std::cout << "A" << std::endl;
		res = -1;
	}
	else {
		std::cout << "B" << std::endl;
		res = strlen(str);
	}
	
	return res;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

int func(int i, const std::string& str);
int func(int i, const char *str);

int main() {
}

int func(int i, const std::string& str) {
	int res;
	std::cout << "B" << std::endl;
	res = str.size();
	return res;
}

int func(int i, const char *str) {
	int res;
	
	if (!str) {
		std::cout << "A" << std::endl;
		res = -1;
	}
	else {
		res = func(i, std::string(str));
	}
	
	return res;
}


//!CStringParameterQuickFixHHVMExample1
//@main.cpp
#include "string.h"

std::string getCommand(const char* serverObject);

int main() {
}

std::string getCommand(const char* serverObject) {
	assert(serverObject);
	if (!*serverObject) {
		return "";
	}
	
	while (*serverObject == '/') {
		++serverObject;
	}
	return serverObject;
}
//=
#include <string>
#include "string.h"

std::string getCommand(const std::string& serverObject);
std::string getCommand(const char* serverObject);

int main() {
}

std::string getCommand(const std::string& serverObject) {
	if (serverObject.empty()) {
		return "";
	}
	std::string::size_type serverObject_pos = 0;
	while (serverObject[serverObject_pos] == '/') {
		++serverObject_pos;
	}
	return (serverObject.c_str() + serverObject_pos);
}

std::string getCommand(const char* serverObject) {
	assert(serverObject);
	return getCommand(std::string(serverObject));
}


//!CStringParameterQuickFixXBMCExample1
//@main.cpp
#include "iostream.h"
bool MatchDnsName(const char* hostname, const char* dns_name) {
	if (hostname == nullptr || *hostname == '\0') return false;
	if (dns_name == nullptr || *dns_name == '\0') return false;
	
	if (dns_name[0] == '*') {
		if (dns_name[1] != '.') return false;
		
		while (hostname[0] != '\0' && hostname[0] != '.') {
			++hostname;
		}
		
		if (hostname[0] == '.') ++hostname;
		
		return strcmp(hostname, dns_name+2) == 0;
	}
	else {
		return strcmp(hostname, dns_name) == 0;
	}
}

int main() {
	const char *dns_name = "*.google.com";
	std::cout << MatchDnsName("mail.google.com", dns_name) << std::endl;
	std::cout << MatchDnsName("www.google.com", dns_name) << std::endl;
}
//=
#include <string>
#include "iostream.h"
bool MatchDnsName(const std::string& hostname, const char* dns_name) {
	if (dns_name == nullptr || *dns_name == '\0')
		return false;
	std::string::size_type hostname_pos = 0;
	if (dns_name[0] == '*') {
		if (dns_name[1] != '.')
			return false;
		while (hostname[hostname_pos] != '\0' && hostname[hostname_pos] != '.') {
			++hostname_pos;
		}
		if (hostname[hostname_pos] == '.')
			++hostname_pos;
		return hostname.compare(hostname_pos, std::string::npos, dns_name + 2)
				== 0;
	} else {
		return hostname.compare(hostname_pos, std::string::npos, dns_name) == 0;
	}
}

bool MatchDnsName(const char* hostname, const char* dns_name) {
	if (hostname == nullptr || *hostname == '\0') return false;
	return MatchDnsName(std::string(hostname), dns_name);
}

int main() {
	const char *dns_name = "*.google.com";
	std::cout << MatchDnsName("mail.google.com", dns_name) << std::endl;
	std::cout << MatchDnsName("www.google.com", dns_name) << std::endl;
}


//!WebkitFindMonthExample1
//@main.cpp
static int findMonth(const char* monthStr) {
	assert(monthStr);
    char needle[4];
    for (int i = 0; i < 3; ++i) {
        if (!*monthStr)
            return -1;
        needle[i] = static_cast<char>(tolower(*monthStr++));
    }
    needle[3] = '\0';
	const char* haystack = "janfebmaraprmayjunjulaugsepoctnovdec";
	const char* str = strstr(haystack, needle);
	if (str) {
		int position = static_cast<int>(str - haystack);
		if (position % 3 == 0)
			return position / 3;
	}
	return -1;
}

int main() {
	std::cout << findMonth("feb") << std::endl;
}
//=
#include <string>
static int findMonth(const std::string& monthStr) {
	char needle[4];
	std::string::size_type monthStr_pos = 0;
	for (int i = 0; i < 3; ++i) {
		if (!monthStr[monthStr_pos])
			return -1;
		needle[i] = static_cast<char>(tolower(monthStr[monthStr_pos++]));
	}
	needle[3] = '\0';
	const char* haystack = "janfebmaraprmayjunjulaugsepoctnovdec";
	const char* str = strstr(haystack, needle);
	if (str) {
		int position = static_cast<int>(str - haystack);
		if (position % 3 == 0)
			return position / 3;
	}
	return -1;
}

static int findMonth(const char* monthStr) {

	assert(monthStr);
	return findMonth(std::string(monthStr));
}

int main() {
	std::cout << findMonth("feb") << std::endl;
}

//!BodyWithoutNullCheck1
//@main.cpp
#include "iostream.h"
#include "string.h"

void f(const char* str);

int main() {
	f("hello");
}

void f(const char* str) {
	std::cout << str << std::endl;
}
//=
#include <string>
#include "iostream.h"
#include "string.h"

void f(const std::string& str);

int main() {
	f("hello");
}

void f(const std::string& str) {
	std::cout << str << std::endl;
}

//!BodyWithoutNullCheck2
//@main.cpp
#include <iostream>
#include <cstring>

void f(const char* name) {
	if(strlen(name) > 0) {
		std::cout << "hello " << name << "!\n";
	} else {
		std::cout << "hello!\n";
	}
}

int main() {
	f("toni");
	f("");
}
//=
#include <iostream>
#include <cstring>
#include <string>

void f(const std::string& name) {
	if (name.size() > 0) {
		std::cout << "hello " << name << "!\n";
	} else {
		std::cout << "hello!\n";
	}
}

int main() {
	f("toni");
	f("");
}

//!MultiFileTest1
//@utils.h
#ifndef C_H_
#define C_H_

#include <string>

void f(const char *str);

#endif
//=
#ifndef C_H_
#define C_H_

#include <string>

void f(const std::string& str);

#endif
//@utils.cpp
#include "utils.h"
#include <iostream>

void f(const char *str) {
	std::cout << str;
}
//=
#include "utils.h"
#include <iostream>
#include <string>

void f(const std::string& str) {
	std::cout << str;
}

//!MemberFunctionTest1
//@C.h
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	void f(const char *name);
};

#endif
//=
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	void f(const std::string& name);
};

#endif
//@C.cpp
#include "C.h"
#include <iostream>

void C::f(const char *name) {
	if(strlen(name) > 0) {
		std::cout << "hello " << name << "!\n";
	} else {
		std::cout << "hello!\n";
	}
}
//=
#include "C.h"
#include <iostream>
#include <string>

void C::f(const std::string& name) {
	if (name.size() > 0) {
		std::cout << "hello " << name << "!\n";
	} else {
		std::cout << "hello!\n";
	}
}

//!MemberFunctionTest2
//@C.h
#ifndef C_H_
#define C_H_

#include <iostream>

class C {
public:
	void f(const char *name) {
		if(strlen(name) > 0) {
			std::cout << "hello " << name << "!\n";
		} else {
			std::cout << "hello!\n";
		}
	}
};

#endif
//=
#ifndef C_H_
#define C_H_

#include <iostream>
#include <string>

class C {
public:
	void f(const std::string& name) {
		if (name.size() > 0) {
			std::cout << "hello " << name << "!\n";
		} else {
			std::cout << "hello!\n";
		}
	}
};

#endif

//!MemberFunctionTest2b
//@C.h
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	void f(const char *str);
};

#endif
//=
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	void f(const std::string& str);
	void f(const char *str);
};

#endif
//@C.cpp
#include "C.h"
#include <iostream>

void C::f(const char* str) {
	if(str) {
		std::cout << str;
	}
}
//=
#include "C.h"
#include <iostream>
#include <string>

void C::f(const std::string& str) {
	std::cout << str;
}

void C::f(const char* str) {
	if (str) {
		C::f(std::string(str));
	}
}

//!MemberFunctionTest3
//@C.h
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	static void f(const char *str);
};

#endif
//=
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	static void f(const std::string& str);
	static void f(const char *str);
};

#endif
//@C.cpp
#include "C.h"
#include <iostream>

void C::f(const char* str) {
	if(str) {
		std::cout << str;
	}
}
//=
#include "C.h"
#include <iostream>
#include <string>

void C::f(const std::string& str) {
	std::cout << str;
}

void C::f(const char* str) {
	if (str) {
		C::f(std::string(str));
	}
}

//!ParameterWithDefaultValue1
//@main.cpp
#include <iostream>

void f(const char* name = "world") {
	std::cout << "Hello, " << name << "!\n";
}

int main() {
	f("toni");
	f();
}
//=
#include <iostream>
#include <string>

void f(const std::string& name = "world") {
	std::cout << "Hello, " << name << "!\n";
}

int main() {
	f("toni");
	f();
}

//!ParameterWithDefaultValue2
//@main.cpp
#include <iostream>

void f(const char* name = "world") {
    if(name) {
    	std::cout << "Hello, " << name << "!\n";
	}
}

int main() {
	f("toni");
	f();
}
//=
#include <iostream>
#include <string>

void f(const std::string& name) {
	std::cout << "Hello, " << name << "!\n";
}
void f(const char* name = "world") {
	if (name) {
		f(std::string(name));
	}
}

int main() {
	f("toni");
	f();
}

//!ParameterWithDefaultValue3
//@main.cpp
#include <iostream>

void f(const char* name = "world");

int main() {
	f("toni");
	f();
}

void f(const char* name) {
	std::cout << "Hello, " << name << "!\n";
}
//=
#include <iostream>
#include <string>

void f(const std::string& name = "world");

int main() {
	f("toni");
	f();
}

void f(const std::string& name) {
	std::cout << "Hello, " << name << "!\n";
}

//!ParameterWithDefaultValue4
//@main.cpp
#include <iostream>

void f(const char* name = "world");

int main() {
	f("toni");
	f();
}

void f(const char* name) {
    if(name) {
    	std::cout << "Hello, " << name << "!\n";
	}
}
//=
#include <iostream>
#include <string>

void f(const std::string& name);
void f(const char* name = "world");

int main() {
	f("toni");
	f();
}

void f(const std::string& name) {
	std::cout << "Hello, " << name << "!\n";
}

void f(const char* name) {
	if (name) {
		f(std::string(name));
	}
}

//!ConstructorTest1
//@C.h
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	explicit C(const char* const str);
};

#endif
//=
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	explicit C(const std::string& str);
};

#endif
//@C.cpp
#include "C.h"
#include <iostream>

C::C(const char* const str) {
	std::cout << strlen(str);
}
//=
#include "C.h"
#include <iostream>
#include <string>

C::C(const std::string& str) {
	std::cout << str.size();
}

//!ConstructorTest2
//@C.h
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	explicit C(const char* const str = "test");
};

#endif
//=
#ifndef C_H_
#define C_H_

#include <string>

class C {
public:
	explicit C(const std::string& str = "test");
};

#endif
//@C.cpp
#include "C.h"
#include <iostream>

C::C(const char* const str) {
	std::cout << strlen(str);
}
//=
#include "C.h"
#include <iostream>
#include <string>

C::C(const std::string& str) {
	std::cout << str.size();
}
