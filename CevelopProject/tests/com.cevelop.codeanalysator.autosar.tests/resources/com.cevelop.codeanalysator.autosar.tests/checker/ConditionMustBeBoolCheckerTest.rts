//! Condition expression is a bool variable
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F() {
	bool condition = false;
	if(condition){}
}

//! Condition expression is primitive bool
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F() {
	if(false){}
}

//! Condition expression is equals statement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F() {
	if(1 == 1){}
}

//! Condition expression is larger statement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F() {
	if(1 >= 1){}
}

//! Condition expression is smaller statement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F() {
	if(1 <= 1){}
}

//! Condition expression is not-equal statement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F() {
	if(1 != 1){}
}

//! Condition is bool declaration with primitive
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F() {
	if(bool i = true){}
}

//! Condition is pointer declaration
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F() {
	if(std::int32_t* ptr = Fn()){}
}

//! Condition is int declaration with literal
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F() {
	if(int i = 1){}
}

//! Condition is bool declaration with method call
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
bool b(){ return true; }
void F(){
	if(bool i = b()){}
}

//! Condition is int declaration with method call
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
int b(){ return 1; }
void F(){
	if(int i = b()){}
}

//! Condition is bool function call
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
bool b(){ return true; }
void F(){
	if(b()){}
}

//! Condition is int function call
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=3
//@main.h
int b(){ return 1; }
void F(){
	if(b()){}
}

//! Condition is comparison with assignement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
int* Fn(){return nullptr;}
void F(){
	int* ptr = nullptr;
	if((ptr = Fn()) != nullptr){}
}

//! Condition is pointer
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=3
//@main.h
int* Fn(){return nullptr;}
void F(){
	if(Fn()){}
}

//! Condition explicitly converts user-defined class to bool
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct bla {
	explicit operator bool() const { return false; }
};
bool F(){
    bla b{};
    if(b){}
    return false;
}

//! Condition explicitly converts user-defined class to bool with other explicit member
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct bla {
	explicit operator int() const { return 0; }
	explicit operator bool() const { return false; }
};
bool F(){
    bla b{};
    if(b){}
    return false;
}

//! Condition explicitly converts user-defined class to bool with template specialization
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
template <typename T>
struct bla {
	explicit operator bool() const { return false; }
};
using void_bla = bla<void>;
bool F(){
    void_bla b{};
    if(b){}
    return false;
}

//! Condition implicitly converts user-defined class to bool
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=6
//@main.h
struct bla {
	operator bool() const { return false; }
};
void F(){
    bla b{};
    if(b){}
}

//! Condition explicitly converts unique_ptr to bool
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <memory>
#include <cstdint>
void F(){
	std::unique_ptr<std::int32_t> uptr;
	if(!uptr){}
}

//! Condition implicitly converts to bool
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=4
//@main.h
#include <cstdint>
void F(){
	std::uint8_t u = 8;
	if (u){}
}

//! Condition is invalid assignement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=4
//@main.h
#include <cstdint>
void F(){
	std::uint8_t u = 8;
	if (u = 20){}
}

//! Condition implicitly converts to bool, indirectly
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=6
//@main.h
#include <cstdint>
void F(){
	std::uint8_t u = 8;
	bool boolean1 = false;
	bool boolean2 = true;
	if (u && (boolean1 <= boolean2)){}
}

//! Condition implicitly converts to bool, more complex example
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=5
//@main.h
#include <cstdint>
void F() {
	std::uint8_t u = 8;
	bool b1 = false, b2 = true, b3 = false, b4 = true, b5 = true;
	if (b1 && ((b2 || (b3 && (b5 || u))) && b4)) {
	}
}

//! Condition implicitly converts to bool in nested parentheses
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=4
//@main.h
#include <cstdint>
void F() {
	std::uint8_t u { 8 };
	if (((u))) { }
}

//! Condition explicitly converts to bool, indirectly
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F(){
	bool boolean1 = false;
	bool boolean2 = true;
	if (boolean1 && (boolean1 <= boolean2)){}
}

//! Compliant in while
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
bool b(){ return true; }
void F(){
	while(b()){}
}

//! Compliant in do while
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
bool b(){ return true; }
void F(){
	do{}
	while(b());
}

//! Compliant in for
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
bool b(){ return true; }
void F(){
	for(;b(););
}

//! Non-compliant in while
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=3
//@main.h
int b(){ return 1; }
void F(){
	while(b()){}
}

//! Non-compliant in do while
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=4
//@main.h
int b(){ return 1; }
void F(){
	do{}
	while(b());
}

//! Non-compliant in for
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=3
//@main.h
int b(){ return 1; }
void F(){
	for(;b(););
}

//! For condition is int
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=3
//@main.h
#include <cstdint>
void F(){
	for (std::int32_t x = 10; x; --x)
	{}
}

//! Condition expression is typedefed bool variable
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
using boollike = bool;
void F() {
	boollike condition = false;
	if (condition) {}
}

//! Condition violated rule but is suppressed
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
int b(){ return 1; }
void F(){
	[[autosar::suppress("A5-0-2")]]
	if(b()){}
}
