//! Overriding function misses keyword, overriding pure virtual
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=9
//@main.h
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		void F() noexcept {}
};

//! Overriding function has only virtual keyword, overriding pure virtual
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=9
//@main.h
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		virutal void F() noexcept {}
};


//! Overriding pure virtual with virtual & override keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		virtual void F() noexcept override{}
};

//! Overriding pure virtual with virtual & final keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		virtual void F() noexcept final{}
};

//! Overriding pure virtual with override keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		void F() noexcept override{}
};

//! Overriding pure virtual with final keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		void F() noexcept final{}
};

//! Overriding function misses keyword, overriding virtual
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=9
//@main.h
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		void F() noexcept {}
};

//! Overriding function has only virtual keyword, overriding virtual
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=9
//@main.h
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		virutal void F() noexcept {}
};

//! Overriding function has virtual & override keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		virutal void F() override noexcept {}
};

//! Overriding function has virtual final keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		virutal void F() final noexcept {}
};

//! Overriding function has override keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		void F() override noexcept {}
};

//! Overriding function has final keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		void F() final noexcept {}
};

//! Overriding pure virtual function with pure virtual function no keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=9
//@main.h
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		~B() = 0;
};

//! Overriding pure virtual function with pure virtual function,only virtual
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=9
//@main.h
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		virtual ~B() = 0;
};

//! Overriding pure virtual destructor with pure virtual destructor with override and virtual keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		virtual ~B() override = 0;
};

//! Overriding pure virtual destructor with pure virtual destructor with final and virtual keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		virtual ~B() final = 0;
};

//! Overriding pure virtual destructor with pure virtual destructor with override keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		~B() override = 0;
};

//! Overriding pure virtual destructor with pure virtual destructor with final keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		~B() final = 0;
};

//! Overriding virtual destructor misses keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=9
//@main.h
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		~B() {}
};

//! Overriding virtual destructor has only virtual keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=9
//@main.h
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		virtual ~B() {}
};

//! Overriding virtual destructor with override and virtual keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		virtual ~B() override {}
};

//! Overriding virtual destructor with final and virtual keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		virtual ~B() final {}
};

//! Overriding virtual destructor with override keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		~B() override {}
};

//! Overriding virtual destructor with final keyword, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		~B() final {}
};

//! Destructor not overriding base destructor, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		~A() {}
};
class B : public A
{
	public:
		~B() {}
};
