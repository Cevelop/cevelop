//! Return parameter passed by reference to const
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct A {
};
A Fn(A const &parameter) noexcept
{
	return parameter;
}

//! Return reference to parameter passed by reference
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct A {
};
A const & Fn(A &parameter_by_ref, A const &parameter_by_constref) noexcept
{
	return parameter_by_ref;
}

//! Return reference to parameter passed by reference to const
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=5
//@main.h
struct A {
};
A const & Fn(A &parameter_by_ref, A const &parameter_by_constref) noexcept
{
	return parameter_by_constref;
}

//! Return reference to variable initialized with parameter passed by reference to const
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct A {
};
A const & Fn(A const &parameter) noexcept
{
	A variable { parameter };
	return variable;
}

//! Return reference to parameter passed by reference to const through variable reference
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=6
//@main.h
struct A {
};
A const & Fn(A const &parameter) noexcept
{
	A const &variable { parameter };
	return variable;
}

//! Return pointer to parameter passed by reference
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct A {
};
A const * Fn(A &parameter_by_ref, A const &parameter_by_constref) noexcept
{
	return &parameter_by_ref;
}

//! Return pointer to parameter passed by reference to const
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=5
//@main.h
struct A {
};
A const * Fn(A &parameter_by_ref, A const &parameter_by_constref) noexcept
{
	return &parameter_by_constref;
}

//! Return pointer parameter passed by reference to const through parantheses
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct A {
	operator A const *() { return this; }
};
A const * Fn(A const &parameter) noexcept
{
	return (parameter);
}

//! Return pointer to variable initialized with parameter passed by reference to const
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct A {
	explicit A(A const *value) { }
	operator A const *() { return this; }
};
A const * Fn(A const &parameter) noexcept
{
	A variable { &parameter };
	return variable;
}

//! Return pointer to parameter passed by reference to const through variable pointer
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=6
//@main.h
struct A {
};
A * Fn(A const &parameter) noexcept
{
	A *variable { &parameter };
	return variable;
}


//! Return type alias reference to parameter passed by reference to const
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=6
//@main.h
struct A {
};
using const_reference = A const &;
const_reference Fn(A const &parameter) noexcept
{
	return parameter;
}

//! Return reference to type alias parameter passed by reference to const
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=6
//@main.h
struct A {
};
using const_reference = A const &;
A const & Fn(const_reference parameter) noexcept
{
	return parameter;
}

//! Return reference to parameter passed by reference to const through type alias variable reference
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=7
//@main.h
struct A {
};
using const_reference = A const &;
A const & Fn(A const &parameter) noexcept
{
	const_reference variable { parameter };
	return variable;
}

//! Return pointer to parameter passed by reference to const through type alias variable pointer
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=7
//@main.h
struct A {
};
using const_pointer = A const *;
A const * Fn(A const &parameter) noexcept
{
	const_pointer variable { &parameter };
	return variable;
}

//! Return pointer to parameter passed by reference to const through circular variable pointers
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=8
//@main.h
struct A {
};
A const * Fn(A const &parameter) noexcept
{
	A const *first_variable { &parameter };
	A const *second_variable { first_variable };
	first_variable = second_variable;
	return first_variable;
}

//! Suppressed return reference to parameter passed by reference to const
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct A {
};
A const & Fn(A const &parameter) noexcept
{
	[[autosar::suppress("A7-5-1")]]
	return parameter;
}
