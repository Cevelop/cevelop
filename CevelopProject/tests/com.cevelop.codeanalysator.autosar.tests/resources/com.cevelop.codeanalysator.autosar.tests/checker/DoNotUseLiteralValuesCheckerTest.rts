//! No use of literal value
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <array>
#include <cstdint>
#include <iostream>
const std::int32_t maxIterations = 10;
const char* const loopIterStr = "iter "; 
const char separator = ':';
for (std::int32_t i = 0; i < maxIterations; ++i) 
{
	std::cout << loopIterStr << i << separator; 
}

//! Use of literal value in const assignement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
const std::int32_t maxIterations = 10;

//! Use of literal value in assignement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
std::int32_t maxIterations = 10;

//! Use of literal value in exception initialization
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F(){
	throw std::logic_error("Logic Error");
}

//! Use of literal value in type initialization
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class C {
	public:
		C() : x(0), y(nullptr)
		{}
		C(std::int8_t num, std::int32_t* ptr) : x(num), y(ptr) {}

	private:
		std::int8_t x;
		std::int32_t* y;
};

//! Use of literal value in Object initialization
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class C
{
	public:
		C() : x(0), y(nullptr)
		{
		}
}
void F(){
	C c2(0, globalPointer);
}

//! Use of literal keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void F(){
	static std::int32_t* globalPointer = nullptr;
}

//! Use of literal value in template
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <array>
#include <cstdint>
void F(){
	std::array<std::int8_t, 5> arr{{1, 2, 3, 4, 5}};
}

//! Use of no literal value in method call
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
std::int32_t F(std::int32_t x, std::int32_t y) noexcept
{
	return x + y;
}
void G(){
	std::int32_t x = 2;
	std::int32_t y = 5;
	ret = F(x, y);
}

//! Use of literal value in return statement initialization
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
std::int32_t F(){
	return std::int32_t{2};
}

//! Use of literal value in return statement with round paranthesis primitive type
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
int F(){
	return int(10);
}

//! Use of literal value in return statement with round paranthesis
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=3
//@main.h
#include <cstdint>
std::int32_t F(){
	return std::int32_t(10);
}

//! Use of literal value in method call
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=7,7
//@main.h
std::int32_t F(std::int32_t x, std::int32_t y) noexcept
{
	return x + y;
}
void G() noexcept
{
	std::int32_t ret = F4(2, 5);
}

//! Use of literal value
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=4,6,6,6
//@main.h
#include <iostream>
#include <cstdint>
void F(){
	for (std::int32_t i = 0; i < 10; ++i) 
	{
		std::cout << "iter " << i << ':' << '\n';
	}
}

//! Use of literal value in return statement method call
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=7,7
//@main.h
#include <cstdint>
std::int32_t F(std::int32_t x, std::int32_t y) noexcept
{
	return x + y;
}
std::int32_t G(){
	return F4(4,2);
}

//! Use of literal value in equals initialization
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
int main(){
	int i = 1;
}

//! Use of literal value in static equals initialization
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
static int i = -1;

//! Use of literal value in braced initialization
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
int main(){
	int i { 1 };
}

//! Use of literal value in static braced initialization
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
int i { 1 };

//! Do not mark this
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
struct A{
	int i;

	void test(int value){
		this->i = value;
	}
};

//! Exception for nullptr
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
int main(){
	int i = 1;
	i = nullptr;
}
//! Exception for true
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
bool method(){
	return true;
}

//! Exception for false
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
bool method(){
	return false;
}

//! Exception for 0
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void f(int i){}
int main(){
	f(0);
}

//! Exception for 1
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void f(int i){}
int main(){
	f(1);
}