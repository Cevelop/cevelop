//! Class derives from one base class, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
class A //not an interface
{
	public:
		void F1() noexcept(false) {}
	private:
		std::int32_t x{0};
};
class B: public A {};

//! Class derives from one interface, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
class A //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~A() = 0;
		void F1() noexcept = 0;
};
class B: public A {};

//! Class derives from four interfaces, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
class A //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~A() = 0;
		virtual void F1() noexcept = 0;
};
class B //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~B() = 0;
		virtual void F1() noexcept = 0;
};
class C //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~C() = 0;
		virtual void F1() noexcept = 0;
};
class D //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~D() = 0;
		virtual void F1() noexcept = 0;
};
class E: public A,
		public B,
		public C,
		public D
{};

//! Class derives from one interface and one base class, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
class A //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~A() = 0;
		virtual void F1() noexcept = 0;
};
class B //non interface
{
	public:
		void F1() noexcept(false) {}
	private:
		std::int32_t x { 0 };
};
class E: public A,
		public B {
};

//! Class derives from four interfaces and one base class, ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
class A //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~A() = 0;
		virtual void F1() noexcept = 0;
};
class B //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~B() = 0;
		virtual void F1() noexcept = 0;
};
class C //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~C() = 0;
		virtual void F1() noexcept = 0;
};
class D //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~D() = 0;
		virtual void F1() noexcept = 0;
};

class E  //non-interface
{
	public:
		void F1() noexcept(false) {}
	private:
		std::int32_t x { 0 };
};

class F: public A,
		 public B,
		 public C,
		 public D,
		 public E
{};

//! Class derives from two base classes, not ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=16
//@main.h
#include <cstdint>
class A // non-interface
{
	public:
		void F1() noexcept(false) {}
	private:
		std::int32_t x { 0 };
};
class B //non-interface
{
	public:
		void F1() noexcept(false) {}
	private:
		std::int32_t x { 0 };
};
class C: public A,
		 public B
{};

//! Class derives from one interface and two base classes, not ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=24
//@main.h
#include <cstdint>
class A // non-interface
{
	public:
		void F1() noexcept(false) {}
	private:
		std::int32_t x { 0 };
};
class B //non-interface
{
	public:
		void F1() noexcept(false) {}
	private:
		std::int32_t x { 0 };
};
class C //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~C() = 0;
		virtual void F1() noexcept = 0;
};
class D: public A,
		 public B,
		 public C
{};

//! Class derives from two interfaces and two base classes, not ok
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
markerLines=32
//@main.h
#include <cstdint>
class A // non-interface
{
	public:
		void F1() noexcept(false) {}
	private:
		std::int32_t x { 0 };
};
class B //non-interface
{
	public:
		void F1() noexcept(false) {}
	private:
		std::int32_t x { 0 };
};
class C //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~C() = 0;
		virtual void F1() noexcept = 0;
};
class D //interface
{
	public:
		static constexpr std::int32_t value{10};

		virtual ~D() = 0;
		virtual void F1() noexcept = 0;
};
class E: public A,
		 public B,
		 public C,
		 public D
{};