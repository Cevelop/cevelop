//! Replace empty switch
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (choice)	{
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
}

//! Replace empty switch with non-id controller expression
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (choice++) {
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	choice++;
}

//! Replace empty switch with controller declaration
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (std::uint8_t real_choice = choice) {
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	std::uint8_t real_choice = choice;
}

//! Replace empty switch with init-statement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (std::uint8_t real_choice = choice; real_choice) {
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	std::uint8_t real_choice = choice;
}

//! Replace empty switch with init-statement and non-id controller expression
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (std::uint8_t real_choice = choice; real_choice++) {
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	std::uint8_t real_choice = choice;
	real_choice++;
}

//! Replace empty switch with init-statement and controller declaration
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (std::uint8_t real_choice = choice; std::uint8_t actual_real_choice = real_choice) {
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	std::uint8_t real_choice = choice;
	std::uint8_t actual_real_choice = real_choice;
}

//! Replace redundant switch
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	default:
		chosen = "default";
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	chosen = "default";
}

//! Replace redundant switch with non-id controller expression
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice++) {
	default:
		chosen = "default";
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	choice++;
	chosen = "default";
}

//! Replace switch with case-clause
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice == 0) {
		chosen = "case_0";
	}
}

//! Replace switch with case-clause and non-id controller expression
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice++) {
	case 0:
		chosen = "case_0";
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice++ == 0) {
		chosen = "case_0";
	}
}

//! Replace switch with case-clause and controller declaration
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (std::uint8_t real_choice = choice) {
	case 0:
		chosen = "case_0";
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	std::uint8_t real_choice = choice;
	if (real_choice == 0) {
		chosen = "case_0";
	}
}

//! Replace switch with case-clause and default-clause
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		break;
	default:
		chosen = "default";
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice == 0) {
		chosen = "case_0";
	} else {
		chosen = "default";
	}
}

//! Replace switch with fall through from case-clause to default-clause
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
	default:
		chosen = "default";
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice == 0) {
		chosen = "case_0";
	}
	chosen = "default";
}

//! Replace switch with default-clause and case-clause with fall through til end
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	default:
		chosen = "default";
		break;
	case 0:
		chosen = "case_0";
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice == 0) {
		chosen = "case_0";
	} else {
		chosen = "default";
	}
}

//! Replace switch with fall through from default-clause to case-clause
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	default:
		chosen = "default";
	case 0:
		chosen = "case_0";
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice != 0) {
		chosen = "default";
	}
	chosen = "case_0";
}

//! Replace switch with case-clause and fall through from default-clause til end
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		break;
	default:
		chosen = "default";
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice == 0) {
		chosen = "case_0";
	} else {
		chosen = "default";
	}
}

//! Replace switch with case-clause with return
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		return;
	}
	chosen = "non_return";
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice == 0) {
		chosen = "case_0";
		return;
	}
	chosen = "non_return";
}

//! Replace switch with direct default statement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (choice)
	default:
		choice++;
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	choice++;
}

//! Replace switch with direct case statement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (choice)
	case 0:
		choice++;
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	if (choice == 0) {
		choice++;
	}
}

//! Do not replace switch with direct non-case or -default statement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (choice)
		choice++;
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	switch (choice)
		choice++;
}

//! Do not replace switch with statements outside clauses
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		break;
		chosen = "outside_clause_0";
	default:
		chosen = "default";
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		break;
		chosen = "outside_clause_0";
	default:
		chosen = "default";
		break;
	}
}

//! Do not replace switch with nested break statements inside clauses
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		if (true) break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		if (true) break;
	}
}

//! Do replace switch with nested break statements inside loops inside clauses
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		while (true) break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice == 0) {
		chosen = "case_0";
		while (true) break;
	}
}

//! Do replace switch with nested break statements inside other switches inside clauses
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		[[autosar::suppress("A6-4-1")]]
		switch (0) break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice == 0) {
		chosen = "case_0";
		[[autosar::suppress("A6-4-1")]]
		switch (0) break;
	}
}

//! Do not replace switch with nested clauses
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		if (true) {
	default:
			chosen = "nested_default";
		}
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		if (true) {
	default:
			chosen = "nested_default";
		}
		break;
	}
}

//! Do replace switch with nested clauses inside other switches
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	switch (choice)	{
	case 0:
		chosen = "case_0";
		if (true) {
			[[autosar::suppress("A6-4-1")]]
			switch (choice) {
			case 0:
				chosen = "inner_case_0";
			}
		}
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice)
{
	const char *chosen;
	if (choice == 0) {
		chosen = "case_0";
		if (true) {
			[[autosar::suppress("A6-4-1")]]
			switch (choice) {
			case 0:
				chosen = "inner_case_0";
			}
		}
	}
}

//! Surround with compound statement in case of identifier conflict
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice) {
	std::uint8_t identifier;
	switch (std::uint8_t identifier; choice) {
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice) {
	std::uint8_t identifier;
	{
		std::uint8_t identifier;
	}
}

//! Surround with compound statement in case of identifier conflict with child statement
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice) {
	std::uint8_t identifier;
	switch (choice) {
	default:
		if (true)
			std::uint8_t identifier;
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice) {
	std::uint8_t identifier;
	{
		if (true)
			std::uint8_t identifier;
	}
}

//! Do not surround with compound statement in case of identifier declared in child block scope
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn(std::uint8_t choice) {
	std::uint8_t identifier;
	switch (choice) {
	default:
		if (true) {
			std::uint8_t identifier;
		}
		break;
	}
}
//=
#include <cstdint>
void Fn(std::uint8_t choice) {
	std::uint8_t identifier;
	if (true) {
		std::uint8_t identifier;
	}
}
