/*
 * @file   <vector>
 * @brief  Dummy implementation of std::vector
 * @author Felix Morgner
 */

#ifndef ILTIS_VECTOR
#define ILTIS_VECTOR

#include <allocator>
#include <initializer_list>

namespace std {

template<typename ValueType, typename Allocator = std::allocator<ValueType>>
class vector {
public:
    using value_type = ValueType;
    using allocator_type = Allocator;
    using size_type = unsigned long long;
    using difference_type = long long;
    using reference = value_type &;
    using const_reference = value_type const &;
    using pointer = value_type *; // TODO (fmorgner): replace with allocator_traits
    using const_pointer = value_type const *; // TODO (fmorgner): see above
    using iterator = pointer; // TODO (fmorgner): replace with sensible type
    using const_iterator = const_pointer; // TODO (fmorgner): see above
    using reverse_iterator = pointer; // TODO (fmorgner): replace with reverse_iterator
    using const_reverse_iterator = const_pointer; // TODO (fmorgner) see above

    /**
     * Construct an empty vector with a default constructed allocator
     */
    vector() noexcept(noexcept(Allocator()));

    /**
     * Construct an empty vector with the given allocator
     */
    explicit vector(Allocator const & alloc) noexcept;

    /**
     * Construct a vector containing @p count copies of @p value
     */
    vector(size_type count, ValueType const & value, Allocator const & allocator = Allocator());

    /**
     * Construct a vector containing @p count default-inserted elements. No copies are made
     */
    explicit vector(size_type count, Allocator const & allocator = Allocator());

    /**
     * Construct a vector with the elements in the range @p [first, last)
     */
    template<typename InputIterator>
    vector(InputIterator first, InputIterator last, Allocator const & allocator = Allocator());

    /**
     * Construct a vector by copying the elements from @p other
     */
    vector(vector const & other);

    /**
     * Construct a vector by copying the elements from @p other using the given allocator
     */
    vector(vector const & other, Allocator const & allocator);

    /**
     * Construct a vector by moving the element of @p other
     *
     * @note The allocator is also obtained by move construction
     * @note @p other is guaranteed to be empty afterwards
     */
    vector(vector && other) noexcept;

    /**
     * Construct a vector by moving the element of @p other
     *
     * @note @p other is guaranteed to be empty afterwards
     */
    vector(vector && other, Allocator const & allocator);

    /**
     * Construct the vector with the elements of the given initializer list
     */
    vector(std::initializer_list<ValueType> list, Allocator const & allocator = Allocator());

    /**
     * Destruct the vector
     */
    ~vector();

    /**
     * Replace the contents of the vector by copying the elements from @p other
     */
    vector & operator=(vector const & other);

    /**
     * Replace the contents of the vector by moving the elements from @p other
     */
    vector & operator=(vector && other); // TODO (fmorgner): implement correct noexcept specification

    /**
     * Replace the contents of the vector by the elements of the initializer list
     */
    vector & operator=(std::initializer_list<ValueType> list);

    /**
     * Replace the contents of the vector by @p count copies of @p value
     */
    void assign(size_type count, ValueType const & value);

    /**
     * Replace the contents of the vector by the elements in the range @p [first, last)
     */
    template<typename InputIterator>
    void assign(InputIterator first, InputIterator last);

    /**
     * Replace the contents of the vector by the elements of the initializer list
     */
    void assign(std::initializer_list<ValueType> list);

    /**
     * Get the allocator of the vector
     */
    allocator_type get_allocator() const;

    /**
     * Get a reference to the element of the vector at the given @p position
     *
     * @throws std::out_of_range if  @p position is not within the range of the vector
     */
    reference at(size_type position);

    /**
     * Get a reference to the element of the vector at the given @p position
     *
     * @throws std::out_of_range if  @p position is not within the range of the vector
     */
    const_reference at(size_type position) const;

    /**
     * Get a reference to the element of the vector at the given @p position
     *
     * @note No bounds checking is performed
     */
    reference operator[](size_type position);

    /**
     * Get a reference to the element of the vector at the given @p position
     *
     * @note No bounds checking is performed
     */
    const_reference operator[](size_type position) const;

    /**
     * Get a reference to the first element of the vector
     *
     * @note UB arises if the vector is empty
     */
    reference front();

    /**
     * Get a reference to the last element of the vector
     *
     * @note UB arises if the vector is empty
     */
    const_reference back() const;

    /**
     * Get a reference to the last element of the vector
     *
     * @note UB arises if the vector is empty
     */
    reference back();

    /**
     * Get a reference to the first element of the underlying array
     */
    ValueType * data() noexcept;

    /**
     * Get a reference to the first element of the underlying array
     */
    ValueType const * data() const noexcept;

    /**
     * Get an iterator to the first element of the vector
     */
    iterator begin() noexcept;

    /**
     * Get an iterator to the first element of the vector
     */
    const_iterator begin() const noexcept;

    /**
     * Get an iterator to the first element of the vector
     */
    const_iterator cbegin() const noexcept;

    /**
     * Get an iterator to the element beyond the last element of the vector
     */
    iterator end() noexcept;

    /**
     * Get an iterator to the element beyond the last element of the vector
     */
    const_iterator end() const noexcept;

    /**
     * Get an iterator to the element beyond the last element of the vector
     */
    const_iterator cend() const noexcept;

    /**
     * Get a reverse-iterator to the first element of the reversed vector
     */
    iterator rbegin() noexcept;

    /**
     * Get a reverse-iterator to the first element of the reversed vector
     */
    const_iterator rbegin() const noexcept;

    /**
     * Get a reverse-iterator to the first element of the reversed vector
     */
    const_iterator crbegin() const noexcept;

    /**
     * Get a reverse-iterator to the element beyond the last element of the reversed vector
     */
    iterator rend() noexcept;

    /**
     * Get a reverse-iterator to the element beyond the last element of the reversed vector
     */
    const_iterator rend() const noexcept;

    /**
     * Get a reverse-iterator to the element beyond the last element of the reversed vector
     */
    const_iterator rcend() const noexcept;

    /**
     * Check if the container is empty
     */
    bool empty() const noexcept;

    /**
     * Get the number of elements in the vector
     */
    size_type size() const noexcept;

    /**
     * Get the maximum number of elements that can be held by the vector
     */
    size_type max_size() const noexcept;

    /**
     * Increase the capacity of the vector
     */
    void reserve(size_type capacity);

    /**
     * Get the capacity of the vector
     */
    void capacity() const noexcept;

    /**
     * Request the vector to free its unused capacity
     */
    void shrink_to_fit();

    /**
     * Erase all elements of the vector
     */
    void clear() noexcept;

    /**
     * Insert the element @p value before @p position by copying
     */
    iterator insert(const_iterator position, ValueType const & value);

    /**
     * Insert the element @p value before @p position by moving
     */
    iterator insert(const_iterator position, ValueType && value);

    /**
     * Insert the @p count copies of the element @p value before @p position by copying
     */
    iterator insert(const_iterator position, size_type count, ValueType const & value);

    /**
     * Insert the elements in the range @p [first, last) before @p position
     */
    template<typename InputIterator>
    iterator insert(const_iterator position, InputIterator first, InputIterator last);

    /**
     * Insert the elements of the initializer list before @p position
     */
    iterator insert(const_iterator position, std::initializer_list<ValueType> list);

    /**
     * Construct a new element with the given arguments befor @p position
     */
    template<typename ... Args>
    iterator emplace(const_iterator position, Args && ... args);

    /**
     * Erase the element at @p position
     */
    iterator erase(const_iterator position);

    /**
     * Erase the elements in the range @p [first, last)
     */
    iterator erase(const_iterator first, const_iterator last);

    /**
     * Append the given element at the back of the vector by copying
     */
    void push_back(ValueType const & value);

    /**
     * Append the given element at the back of the vector by moving
     */
    void push_back(ValueType && value);

    /**
     * Append a new element at the end of the vector by direct construction from @p args
     */
    template<typename ... Args>
    reference emplace_back(Args && ... args);

    /**
     * Remove the last element of the vector
     */
    void pop_back();

    /**
     * Resize the vector to the given new size. If the size is increased, the new elements are default constructed.
     */
    void resize(size_type count);

    /**
     * Resize the vector to the given new size. If the size is increased, the new elements are constructed as copies of @p value
     */
    void resize(size_type count, value_type const & value);

    /**
     * Swap the contents of the vector with the contents of @p other
     */
    void swap(vector & other); // TODO (fmorgner): implement correct noexcept specifications
};

// TODO (fmorgner): implement deduction guides

}

#endif
