//!MemberFunctionCallsNonConstMemberFunction
//@.config
//@struct.h
struct s {

void memfun() {
	othermemfun();
}

void othermemfun() {
	data++;
}

int data{};

};

//!MemberFunctionCallsConstMemberFunction
//@.config
markerLines=3
//@struct.h
struct s {

void memfun() {
	othermemfun();
}

void othermemfun() const {
}

int data{};

};

//!MemberFunctionCallsNonConstUnaryOperatorOnInstance
//@struct.h
struct thing {
	thing & operator++() {
		++m_value;
		return *this;
	}

	thing & operator+=(thing const & other) {
		++(*this);
		return *this;
	}

	private:
		int m_value{};
};

//!MemberFunctionCallsNonConstBinaryOperatorOnInstance
//@struct.h
struct thing {
	thing & operator+=(thing const & other) {
		return *this;
	}

	thing & operator-=(thing const & other) {
		return (*this) += other;
	}
};

//!TemplateClassMemberFunctionCallsNonConstMemberFunction
//@struct.h
template<typename T>
struct thing {

	// Modify a member, so we don't get an unnecessary marker.
	void push(T & e) { ++mem; }

	void copy(thing const & other) {
		for(auto & elem : other) {
			push(elem);
		}
	}

private:
	int mem = 0;
};