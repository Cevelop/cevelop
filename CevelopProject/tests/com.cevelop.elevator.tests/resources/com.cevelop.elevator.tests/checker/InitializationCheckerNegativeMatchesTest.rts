//!ShouldIgnoreFunctions
//@main.cpp
int foo() { return 0; }

//!ShouldIgnoreFunctionDeclarations
//@main.cpp
int foo();

//!ShouldIgnoreFunctionCalls
//@main.cpp
int foo() {}
int main() {
    foo();
}
	
//!ShouldIgnoreEqualsInitializedWithNarrowingTypeConversion
//@main.cpp
int x = 1.1;

//!ShouldIgnoreEqualsInitializedWithNarrowingTypeConversionInConstructor
//@main.cpp
struct T{ T(int x){}};
T x = 1.1;

//!ShouldIgnoreEqualsInitializedWithoutImplicitCopyConstructor
//@main.cpp
struct S{ S(int x){}};
struct T{ };
T x = T(1);

//!ShouldIgnoreDirectInitializedWithoutConversionConstructor
//@main.cpp
struct T{ T(int x){}};
T x(1.1);

//!ShouldIgnoreDirectInitilaizedMultiWithoutConversionConstructor
//@main.cpp
struct T{ T(double x, int y){}};
T x(1.1, 1.2);

//!ShouldIgnoreAlreadyElevatedInitializerList
//@main.cpp
int x{1};

//!ShouldIgnoreMultipleAlreadyElevatedInitializerList
//@main.cpp
int x{1}, y{};

//!ShouldIgnoreUninitializedReference
//@main.cpp
int &x;

//!ShouldIgnoreDeclarationsWithinClasses
//@main.cpp
struct Person { int age; };

//!ShouldIgnoreTeplateArguments
//@main.cpp
namespace std { template<class T1, class T2> class pair {}; }
std::pair<int,int> p1 { 3, 4 };

//!ShouldIgnoreTeplateArgumentPointers
//@main.cpp
namespace std { template<class T1, class T2> class pair {}; }
std::pair<int*,int*> p1 { 3, 4 };

//!ShouldIgnoreInitializerListConstructor
//@main.cpp
namespace std { template<class _E> class initializer_list {}; }
struct A { A(std::initializer_list<int> l) {}
          void someFoo(std::initializer_list<int> l){}};
A a(0);

//!ShouldIgnoreBoostAssign
//@main.cpp
namespace boost {
  template <class K, class T>
  struct unordered_map{
    unordered_map<int, double> operator()(int, double) {
      return unordered_map<int, double>(); }
  };
  namespace assign {
    unordered_map<int, double> map_list_of(int, double){return unordered_map<int, double>();}
  }
}
boost::unordered_map<int, double> map = boost::assign::map_list_of
(1, 3.1)
(2, 3.2);

//!ShouldIgnoreRenamedBoostAssign
//@main.cpp
namespace boost {
  template <class K, class T>
  struct unordered_map{
  unordered_map<int, double> operator()(int, double) {
    return unordered_map<int, double>(); }
  };
  namespace assign {
    unordered_map<int, double> map_list_of(int, double){return unordered_map<int, double>();}
  }
}
namespace X = boost::assign;
boost::unordered_map<int, double> map = X::map_list_of
(1, 3.1)
(2, 3.2);

//!ShouldIgnoreUsingNamespaceBoostAssign
//@main.cpp
namespace boost {
   template <class K, class T>
   struct unordered_map{
       unordered_map<int, double> operator()(int, double) {
           return unordered_map<int, double>(); }
   };
   namespace assign {
       unordered_map<int, double> map_list_of(int, double){return unordered_map<int, double>();}
   }
}
using namespace boost::assign;
boost::unordered_map<int, double> map = map_list_of
(1, 3.1)
(2, 3.2);

//!ShouldIgnoreElevatedConstructorInitList
//@main.cpp
class C { int a; int b; };
C::C() :a{1}, b{2} {}

//!ShouldIgnoreCastExpressions
//@main.cpp
int function(int n) {
    return *(int*)(&n);
}

//!ShouldIgnoreDeclarationWithTypeAuto
//@main.cpp
int main() {
	auto a;
}

//!ShouldIgnoreDeclarationWithTypeAutoAndEqualsInitializer
//@main.cpp
int main() {
	auto a = 5;
}

//!ShouldIgnoreDeclarationWithTypeAutoAndCopyConstructor
//@main.cpp
int main() {
	auto a(5);
}

//!ShouldIgnoreConstexprDeclarationWithTypeAuto
//@main.cpp
constexpr auto a = 5;
int main() {
	return 0;
}

//!ShouldIgnoreElevatedClasses
//@main.cpp
class C {};

int main() {
	new C { };
}

//!ShouldIgnoreReferenceInitializationInConstructorInitList
//@main.cpp

struct S {};

struct T
{
    T(S& s) : s(s) {}

    S& s;
};

//!ShouldignoreTypedefs
//@main.cpp

typedef int km_per_hour;
int main() { }

//!ShouldIgnoreTypedefsWithTypeCasts
//@main.cpp

typedef int (*funcptr)(double); 
int main() { }

//!ShouldIgnoreInitializationWithFunctionCallInInitializer
//@main.cpp
struct S {};

S create() {
	return {};
}

S s1 = create();

//!ShouldIgnoreInitializationiIfTypeCompatibleInitializerListConstructorExists
//@main.cpp
#include <initializer_list>

struct MeanCase {
    MeanCase(std::initializer_list<int> initializerList) {}
    MeanCase(int i, int b) {}
    MeanCase(int i = 0) {}
};

MeanCase mean_case (1, 2);

//!ShouldIgnoreInitializationiIfTypeINCompatibleInitializerListConstructorExists
//@main.cpp
#include <initializer_list>

struct MeanCase {
    MeanCase(int i, bool b) {}
    MeanCase(int i = 0) {}
    MeanCase(std::initializer_list<int> initializerList) {}
};

MeanCase mean_case(1, true);

//!ShouldIgnoreDefaultInitializationiIfInitializerListConstructorExists
//@main.cpp
#include <initializer_list>

struct MeanCase {
    MeanCase(int i, bool b) {}
    MeanCase(int i = 0) {}
    MeanCase(std::initializer_list<int> initializerList) {}
};

MeanCase mean_case;

//!ShouldIgnoreRunVariableInitializationsInForLoops
//@main.cpp
int main(int argc, char **argv) {
	for (int i = 0; i < 10; ++i) { }
}

//!ShouldIgnoreTemplateDefaultArguments
//@main.cpp
template <typename T = char>
class C {
private:
	T field;
};

//!ShouldIgnoreTypeIds
//@main.cpp
int main(int argc, char **argv) {
	sizeof(int);
}

//!ShouldIgnorePackExpansionsUntilASTWriterSupportsThem
//@main.cpp
template<class T, class ARGS>
void function(T, ARGS && args...) {
	new T (args...);
}

//!ShouldIgnoreConstructorChainInitializersWithNarrowingTypeConversion
//@main.cpp
class C {
private:
	int i;

public:
	C(float x) :
			i ( x ) {
	};

};

//!ShouldIgnoreDefaultInitializationsInConstructorChainsIfInitializedTypeHasInitializerListConstructor
//@main.cpp
#include <initializer_list>

struct MeanCase {
    MeanCase(int i, bool b) {}
    MeanCase(int i = 0) {}
    MeanCase(std::initializer_list<int> initializerList) {}
};

class C {
private:
	MeanCase mc;

public:
	C(int x) :
		mc (x) {
	};
};

//!ShouldIgnoreRangeDeclarationsWithExplicitTypeInRangeBasedFor
//@main.cpp
int main(int argc, char **argv) {
	int array[] { 1, 2, 3, 4, 5 };
	for (int element : array) {
		// do stuff
	}
}
//!Ignore Extern Declaration
//@main.cpp
extern int i;

//!Ignore Declaration in Catch
//@main.cpp
void foo() {
	try {
	} catch(int) {
	}
}

//!Ignore const Declaration in Catch
//@main.cpp
void foo() {
	try {
	} catch(int const) {
	}
}

//!Should Not Mark Equals Initialized Var If Preference Is Disabled
//@.config
preferences.markEqualsInitializers=false
//@main.cpp
int i = 1;

