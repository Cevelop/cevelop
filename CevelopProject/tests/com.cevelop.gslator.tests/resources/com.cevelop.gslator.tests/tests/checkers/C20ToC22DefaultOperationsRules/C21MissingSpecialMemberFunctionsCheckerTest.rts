//!NoSpecialFunctionsDefined
//@main.h
struct Named_map {
public:
	// No special functions
	
private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> owy;
};
//!OnlyConstructorDefined
//@.config
markerLines=1
//@main.h
struct Named_map {
public:
	Named_map();
	
private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> owy;
};
//!MissingMoveOperations
//@.config
markerLines=1
//@main.h
struct Named_map {
public:
	Named_map() : name { }, rep { }, owy{ }{
		//std::cout << "I was created";
	}
	Named_map(const Named_map & rhs) :
			name { rhs.name }, rep { rhs.rep }, owy { rhs.owy }{
	}
	Named_map& operator =(const Named_map & rhs) {
		name = rhs.name;
		rep = rhs.rep;
		owy = rhs.owy;
		return *this;
	}
	~Named_map() {
		std::cout << "i died";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> owy;
};
//!MissingEverythingBecauseDelete
//@.config
markerLines=1
//@main.h
struct Named_map {
public:
	~Named_map() = delete;
	
private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> owy;
};
//!NoMissingSpecialFunctionsBecauseEverythingDefinedOrDeleted
//@main.h
struct Named_map {
public:
	Named_map() : name { }, rep { }{
		std::cout << "I was born";
	}
	Named_map(Named_map &&) = default;
	Named_map& operator=(Named_map &&) = default;
	Named_map(const Named_map & rhs) = default;
	Named_map& operator =(const Named_map & rhs) = default;
	~Named_map() = delete;

private:
	std::string name;
	std::map<int, int> rep;
};
//!IgnoreCheckerBecauseOfAttribute
//@B.h
struct [[gsl::suppress("Rc-five")]] B {
	B() = default;
};
//!IgnoreCheckerBecauseOfAttributeCPP
//@B.h
struct [[gsl::suppress("Rc-five")]] B {
	B();
};
//@B.cpp
#include "B.h"
B::B() = default;
//!IgnoreCheckerBecauseOfAttributeInline
//@B.h
struct [[gsl::suppress("Rc-five")]] B {
	inline B();
};

inline B::B() = default;