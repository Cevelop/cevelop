//!DestructorWithNoExcept
//@main.h
class Named_map {
public:

	Named_map() = default;

	Named_map& operator=(const Named_map& rhs) = default;

	Named_map(const Named_map& rhs) = default;

	Named_map& operator=(Named_map&& rhs) = default;

	Named_map(Named_map&& rhs) = default;
	
	~Named_map() noexcept {
		delete io;
		delete oeee;
	}

private:

	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!DestructorWithoutNoExcept
//@.config
markerLines=14
//@main.h
class Named_map {
public:

	Named_map() = default;

	Named_map& operator=(const Named_map& rhs) = default;

	Named_map(const Named_map& rhs) = default;

	Named_map& operator=(Named_map&& rhs) = default;

	Named_map(Named_map&& rhs) = default;
	
	~Named_map() {
		delete io;
		delete oeee;
	}

private:

	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!DefaultedDtorWithoutNoexceptButHasCppFile
//@.config
markerLines=2
//@A.h
struct A {
	~A();
};
//@A.cpp
#include "A.h"
A::~A() = default;
//!InlineInHeaderDtor
//@.config
markerLines=2
//@A.h
struct A {
	inline ~A();

private:
	int a;
	std::string s;
};

inline A::~A()
	: a { 42 }, s{ "42" } { }
//!InlineInHeaderDtorInitWithNormalBrackets
//@.config
markerLines=2
//@A.h
struct A {
	inline ~A();

private:
	int a;
	std::string s;
};

inline A::~A() :
		a(42), s ("42") {
}
//!DtorInitWithNormalBracketsInCPP
//@.config
markerLines=2
//@A.h
struct A {
	inline ~A();

private:
	int a;
	std::string s;
};
//@A.cpp
#include "A.h"
inline A::~A(){
}
//!IgnoreDestructorWithNoExceptBecauseOfAttribute
//@Named_map.h
class Named_map {
public:
	[[gsl::suppress("Rc-dtor-noexcept")]]
	~Named_map() {
		delete io;
		delete oeee;
	}

private:
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;
};
//!IgnoreDestructorWithNoExceptBecauseOfAttributeInline
//@Named_map.h
class Named_map {
public:
	[[gsl::suppress("Rc-dtor-noexcept")]]
	inline ~Named_map();

private:
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;
};

inline Named_map::~Named_map(){
	delete io;
	delete oeee;	
}
//!IgnoreDestructorWithNoExceptBecauseOfAttributeCPP
//@Named_map.h
class Named_map {
public:
	[[gsl::suppress("Rc-dtor-noexcept")]]
	~Named_map();

private:
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;
};
//@Named_map.cpp
#include "Named_map.h"
Named_map::~Named_map(){
	delete io;
	delete oeee;	
}