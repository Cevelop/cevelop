//!NotAllMemVarsInited
//@.config
markerLines=1
//@main.h
class X {
	int x;
	double y { 42.0 };
	std::string s { "42" };
public:
	X() noexcept = default;
	~X();
};
//!NotAllMemVarsInited2
//@main.h
class [[gsl::suppress("Rc-default")]] X {
	int x;
	double y { 42.0 };
	std::string s { "42" };
public:
	X() noexcept = default;
	~X();
};
//!StructNoMemVarInited
//@.config
markerLines=1
//@main.h
struct X {
	int x;
	double y;
	std::string s;
public:
	X() {  }
	~X();
};
//!AllInited
//@main.h
struct X {
	int x { 42 };
	double y { 42.0 };
	std::string s = "hello";
public:
	X() = default;
	~X();
};
//!InClassDefaultInitializeVars
//@.config
markerLines=1
//@main.h
class example {
	int x;
	double y { 42.0 };
	std::string s { };

	void doStuff();

public:
	example() = default;
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x, double y, std::string s);
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!IgnoreCheckerBecauseInClassInitiedAndNoDefValInCtor
//@main.h
class example {
	int x { };
	double y { 42.0 };
	std::string s { "test" };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x, double y, std::string s);
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!IgnoreCheckerBecauseDefValInCtor
//@main.h
class example {
	int x;
	double y { 42.0 };
	std::string s ;

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x, double y, std::string s = "hello");
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!NoDefValAndNotAllMemsInited
//@.config
markerLines=1
//@main.h
class example {
	int x { };
	double y { 42.0 };
	std::string s;

	void doStuff();

public:
	example() = default;
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x, double y, std::string s);
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!NoDefValAndInlineCtorWithoutInitMemVars
//@.config
markerLines=1
//@A.h
struct A {
	inline A() noexcept;

private:
	int a;
	std::string s;
};

inline A::A() noexcept {

}
//!NoDefValAndInlineCtorWithoutInitMemVarsInMainCPP
//@.config
markerLines=1
//@A.h
struct A {
	inline A() noexcept;

private:
	int a;
	std::string s;
};
//@main.cpp
#include "A.h"

inline A::A() noexcept {

}

int main() {
	A a{};
}
//!NoDefValAndInlineCtorWithoutInitAllMemVarsInMainCPP
//@.config
markerLines=2
//@A.h
struct A {
	inline A() noexcept;

private:
	int a;
	std::string s;
};
//@main.cpp
#include "A.h"

inline A::A() noexcept :
	a { 42 } {

}

int main() {
	A a{};
}
//!NotAllMemVarsDefAndInlineCtorWithoutInitMemVarsInMainCPP
//@.config
markerLines=1
//@A.h
struct A {
	inline A() noexcept;

private:
	int a { 42 };
	std::string s;
};
//@main.cpp
#include "A.h"

inline A::A() noexcept { }

int main() {
	A a{};
}
//!AllMemVarsDefaulted
//@A.h
struct A {
	inline A() noexcept;

private:
	int a { 42 };
	std::string s { "hello" };
};
//@main.cpp
#include "A.h"

inline A::A() noexcept { }

int main() {
	A a{};
}
//!AllMemVarsDefInCtor
//@.config
markerLines=2
//@A.h
struct A {
	inline A() noexcept;

private:
	int a;
	std::string s;
};
//@main.cpp
#include "A.h"

inline A::A() noexcept 
	: a { 42 }, s{ "42" } { }

int main() {
	A a{};
}
//!AllMemVarsDefInCtorSameFile
//@.config
markerLines=2
//@A.h
struct A {
	inline A() noexcept;

private:
	int a;
	std::string s;
};

inline A::A() noexcept 
	: a { 42 }, s{ "42" } { }
//!AllMemVarsDefaulted2
//@A.h
struct A {
	inline A() noexcept;

private:
	int a { 42 };
	std::string s { "42" };
};

inline A::A() noexcept { }
//!IgnoreBecAttrNotAllMemVarsDefAndInlineCtorWithoutInitMemVarsInMainCPP
//@A.h
struct A {
	[[gsl::suppress("Rc-default")]]
	inline A() noexcept;

private:
	int a { 42 };
	std::string s;
};
//@main.cpp
#include "A.h"

inline A::A() noexcept { }

int main() {
	A a{};
}
//!IgnoreBecAttrNotAllMemVarsDefAndInlineCtorWithoutInitMemVarsInMainInline
//@A.h
struct A {
	[[gsl::suppress("Rc-default")]]
	inline A() noexcept;

private:
	int a { 42 };
	std::string s;
};

inline A::A() noexcept { }

int main() {
	A a{};
}
//!IgnoreBecAttrNotAllMemVarsDefAndInlineCtorWithoutInitMemVarsInMain
//@A.h
struct A {
	[[gsl::suppress("Rc-default")]]
	inline A() noexcept{
	}

private:
	int a { 42 };
	std::string s;
};
//!AllInitedMultipleDeclarations
//@main.h
struct X {
	int x { 42 }, z { 42 };
	double y { 42.0 };
	std::string s = "hello";
public:
	X() = default;
	~X();
};
//!NotAllInitedMultipleDeclarations
//@.config
markerLines=1
//@main.h
struct X {
	int x { 42 }, z;
	double y { 42.0 };
	std::string s = "hello";
public:
	X() = default;
	~X();
};
//!TemplateClassNotAllMemVarsInited
//@.config
markerLines=2
//@C.h
template<typename T>
class C {
	std::vector<T> v;
public:
	C() = default;
};
//!Do not report static fields
//@S.h
struct S {
	S() {}
	static int class_field;
};