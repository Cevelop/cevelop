//!ClassWithDifferentInitializerLists
//@.config
markerLines=6
//@main.h
class X {
	int x;
	double y { 42.0 };
	std::string s { "42" };
public:
	X() noexcept : x { 42 }, y {}, s {"hello"} {
	}
	~X();
};
//!ClassWithSideEffectInCtor
//@.config
markerLines=1
//@main.h
class X {
	int x;
	double y { 42.0 };
	std::string s { "42" };
public:
	X() noexcept : x { }, y {}, s {"hello"} {
		std::cout << "init";
	}
	~X();
};
//!StructWithCtorOnlyDefInitialize
//@.config
markerLines=6
//@main.h
struct X {
	int x;
	double y;
	std::string s;
public:
	X() noexcept : x { 42 }, y { 42.0 }, s {"hello"} { }
	~X();
};
//!StructWithRedundantCtor
//@.config
markerLines=6
//@main.h
struct X {
	int x { 42 };
	double y { 42.0 };
	std::string s {"hello"};
public:
	X() noexcept : x { 42 }, y { 42.0 }, s {"hello"} { }
	~X();
};
//!ClassWrongDefaultCtorButSideEffect
//@.config
markerLines=1
//@main.h
class X {
	int x;
	double y;
	std::string s;
public:
	X() noexcept : x { 42 }, y { 42.0 }, s { "hello" } {
		std::cout << "init";
	}
	~X();
};
//!ClassWrongDefaultCtorButSideEffect2
//@.config
markerLines=6
//@main.h
class X {
	int x;
	double y;
	std::string s;
public:
	X() noexcept : x { 42 }, y { 42.0 }, s { "hello" } {
	}
	~X();
};
//!InitializeMemVarsInStruct
//@.config
markerLines=3
//@main.h
struct X {
	explicit X(double d);
	X() noexcept : y {}, x {}, s {"hello"} {}
	X(int x, double y = 0.0 );
	~X();
	X(std::string s);
	X(int x, y, std::string s) : x { 42 }, y { 42.0 }, s { "hello" } {}
private:
	int x;
	double y {42.0};
	std::string s {"test"};
	X(std::istream &ios);
};
//!NoDefValAndInlineCtorWithoutInitAllMemVarsInMainCPP
//@.config
markerLines=2
//@A.h
struct A {
	inline A() noexcept;

private:
	int a;
	std::string s;
};
//@main.cpp
#include "A.h"

inline A::A() noexcept :
	a { 42 } {
}

int main() {
	A a{};
}
//!AllMemVarsAreConstInitedInCtorInCpp
//@.config
markerLines=2
//@A.h
struct A {
	A() noexcept;

private:
	int a;
	std::string s;
};
//@A.cpp
#include "A.h"

A::A() noexcept 
	: a { 42 }, s { "42" } { 
}
//!NotAllMemVarsAreConstInitedInCtorInCpp
//@.config
markerLines=2
//@A.h
struct A {
	A() noexcept;

private:
	int a;
	std::string s;
};
//@A.cpp
#include "A.h"

A::A() noexcept 
	: a { 42 } { 
}
//!CtorInitWithNormalBrackets
//@.config
markerLines=2
//@A.h
struct A {
	inline A() noexcept;

private:
	int a;
	std::string s { "test" };
};

inline A::A() noexcept : a ( 42 ), s ( "42" ) { }
//!CtorInitInCpp
//@.config
markerLines=2
//@A.h
struct A {
	A() noexcept;

private:
	int a;
	std::string s { "test" };
};
//@A.cpp
#include "A.h"
A::A() noexcept : a { 42 }, s { "42" } { }
//!CtorInitWithNormalBracktesInCpp
//@.config
markerLines=2
//@A.h
struct A {
	A() noexcept;

private:
	int a;
	std::string s { "test" };
};
//@A.cpp
#include "A.h"
A::A() noexcept : a ( 42 ), s ( "42" ) { }
//!IgnoreBecAttrCtorInitWithNormalBracktesInCpp
//@A.h
struct A {
	[[gsl::suppress("Rc-default")]]
	A() noexcept;

private:
	int a;
	std::string s { "test" };
};
//@A.cpp
#include "A.h"
A::A() noexcept : a ( 42 ), s ( "42" ) { }
//!IgnoreBecAttrCtorInitWithNormalBracktesInInline
//@A.h
struct A {
	[[gsl::suppress("Rc-default")]]
	inline A() noexcept;

private:
	int a;
	std::string s { "test" };
};

inline A::A() noexcept : a ( 42 ), s ( "42" ) { }
//!IgnoreBecAttrCtorInitWithNormalBracktesIn
//@A.h
struct A {
	[[gsl::suppress("Rc-default")]]
	A::A() noexcept : a ( 42 ), s ( "42" ) { }

private:
	int a;
	std::string s { "test" };
};
//!ClassWithDifferentInitializerListsMultipleDeclarations
//@.config
markerLines=6
//@main.h
class X {
	int x { 42 }, z;
	double y { 42.0 };
	std::string s { "42" };
public:
	X() noexcept : x { 42 }, z { }, y { }, s {"hello"} {
	}
	~X();
};
//!TemplateClassNotAllMemVarsInited
//@.config
markerLines=5
//@C.h
template<typename T>
class C {
	std::vector<T> v;
public:
	C() : v { } { }
};
//!InitalizedWithoutLiteralExpression
//@.config
markerLines=4
//@FileContainer.h
#include "gsl.h"

struct FileContainer {
	FileContainer() noexcept : file {new int} {}

private:
	gsl::owner<int *> file;
};
//!InitalizedWithoutLiteralExpressionAsArray
//@.config
markerLines=4
//@FileContainer.h
#include "gsl.h"

struct FileContainer {
	FileContainer() noexcept : files {new int[100]} {}

private:
	gsl::owner<int *> files;
};