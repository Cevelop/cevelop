//!InitializeMemVarsNotInRightOrder
//@.config
markerLines=3
//@main.h
struct X {
	explicit X(double d);
	X() noexcept : y {}, x {}, s {"hello"} {}
	X(int x, double y = 0.0 );
	~X();
	X(std::string s);
private:
	int x;
	double y {42.0};
	std::string s {"test"};
	X(std::istream &ios);
};
//!InitializeMultipleMemVarsNotInRightOrder
//@.config
markerLines=3,4
//@main.h
struct X {
	explicit X(double d);
	X() noexcept : y {}, x {}, s {"hello"} {}
	X(int x, double y = 0.0 ) : s {} , x {42}, y {42.0} {}
	~X();
	X(std::string s);
private:
	int x;
	double y {42.0};
	std::string s {"test"};
	X(std::istream &ios);
};
//!IgnoreChecker
//@main.h
struct A {
	bool is_valid() {
		return true;
	}
	void drive() {

	}
	int x;
	A(int x = 1) :
			x(x) {
	} // user-defined default constructor
};
//!WrongMemberVarInitInCtor
//@.config
markerLines=2
//@A.h
struct A {
	inline A() noexcept : 
		s { "42" }, a { 42 } {
	}

private:
	int a;
	std::string s;
};
//!InlineWrongMemberVarInitInCtor
//@.config
markerLines=4,16
//@X.h
struct X {
	X(double d);
	inline X() noexcept;
	X(int x, double y = 0.0) :
			s { }, x { 42 }, y { 42.0 } {
	}
	~X() = default;
	X(std::string s);
private:
	int x;
	double y { 42.0 };
	std::string s { "test" };
	X(std::istream &ios);
};

inline X::X() noexcept : y {}, x {}, s {"hello"} {}
//!WrongMemberVarInitInCtorInCPP
//@.config
markerLines=4,2
//@X.h
struct X {
	X(double d);
	X() noexcept;
	X(int x, double y = 0.0) :
		s { }, x { 42 }, y { 42.0 } {
	}
	~X() = default;
	X(std::string s);
private:
	int x;
	double y { 42.0 };
	std::string s { "test" };
};
//@X.cpp
#include "X.h"
X::X() noexcept : y {}, x {}, s {"hello"} {}
//!IgnoreBecAttrWrongMemberVarInitInCtorInCheckerCPP
//@X.h
struct X {
	X(double d);
	X() noexcept;
private:
	int x;
	double y { 42.0 };
	std::string s { "test" };
};
//@X.cpp
#include "X.h"
[[gsl::suppress("Rc-order")]]
X::X() noexcept : y {}, x {}, s {"hello"} {}
//!IgnoreBecAttrWrongMemberVarInitInCtorInCheckerInline
//@X.h
struct X {
	X(double d);
	inline X() noexcept;
private:
	int x;
	double y { 42.0 };
	std::string s { "test" };
};

[[gsl::suppress("Rc-order")]]
inline X::X() noexcept : y {}, x {}, s {"hello"} {}
//!IgnoreBecAttrWrongMemberVarInitInCtorInChecker
//@X.h
struct X {
	X(double d);
	[[gsl::suppress("Rc-order")]]
	X() noexcept : y {}, x {}, s {"hello"} {}
private:
	int x;
	double y { 42.0 };
	std::string s { "test" };
};
//!InitializeMemVarsNotInRightOrderMultipleDeclarations
//@.config
markerLines=3
//@main.h
struct X {
	explicit X(double d);
	X() noexcept : y {}, z {}, x {}, s {"hello"} {}
	X(int x, double y = 0.0 );
	~X();
	X(std::string s);
private:
	int x;
	double y {42.0}, z;
	std::string s {"test"};
	X(std::istream &ios);
};
//!TemplateClassInitializeMemVarsNotInRightOrder
//@.config
markerLines=7
//@C.h
template<typename T>
class C {
	std::vector<T> v;
	std::string name;
public:
	C() = default;
	C(std::vector<T> v, std::string name) : name { }, v { v } { }
};
//!Only1MemberInitialized
//@A.h
struct A {
	A() : b { } {
	}
private:
	int a { };
	double b;
};
//!NotAllMemVarsInited
//@.config
markerLines=2
//@A.h
struct A {
	A() : b{ }, a { } {
	}
private:
	int a;
	double b;
	std::string s {};
};

//!Correct direct and initializer list mixed init
//@A.h
#include <string>

struct Order {
	Order(std::string const & whisky, int i)
    :what{whisky},howmany{i},done{}{}
private:
    void setFilled() {
        filled=true;
    }

    std::string const what;
	int const howmany;
    bool filled{};
	bool done;
};

//!Wrong direct and initializer list mixed init
//@.config
markerLines=4
//@A.h
#include <string>

struct Order {
	Order(std::string const & whisky, int i)
    :what{whisky},howmany{i}{}
private:
    void setFilled() {
        filled=true;
    }

	int const howmany;
    std::string const what;
	bool filled{};
};

//!Wrong class initialization order
//@.config
markerLines=4
//@A.h
struct A {};
struct B {};
struct C : A, B {
	C() : B {}, A {} {}
};

//!Base class ctor and members mixed, wrong base class
//@.config
markerLines=4
//@A.h
struct A {};
struct B {};
struct C : A, B {
	C() : B {}, A {}, i { 20 }, j { 10 } {}

private:
	int i;
	int j;
};

//!Base class ctor and members mixed, wrong members
//@.config
markerLines=4
//@A.h
struct A {};
struct B {};
struct C : A, B {
	C() : A {}, B {}, j { 10 }, i { 20 } {}

private:
	int i;
	int j;
};

//!Base class ctor and members mixed, ignore if delegation (compile error)
//@A.h
struct A {};
struct B {};
struct C : A, B {
	C() : C { 10 }, A {}, B {}, j { 10 }, i { 20 } {}
	C(int i) : A {}, B{}, i { i }, j { 20 } {}

private:
	int i;
	int j;
};

//!Base class ctor and members mixed, ignore if duplicates deteced (constructors)
//@A.h
struct A {};
struct B {};
struct C : A, B {
	C(int i) : A {}, B{}, A{}, i { i }, j { 20 } {}

private:
	int i;
	int j;
};

//!Base class ctor and members mixed, ignore if duplicates deteced (members)
//@A.h
struct A {};
struct B {};
struct C : A, B {
	C(int i) : A {}, B{}, i { i }, j { 20 }, i { j } {}

private:
	int i;
	int j;
};

//!No nullpointerexception when using lambdas in code
//@.config
markerLines=10
//@A.h
void main() {
	auto l = [](auto c){
			if (c=='\n') {
				return ' ';
			}
			return c; };
}

struct A {
	A() : b { 1 }, a { 2 } { }

	int a;
	int b;
};