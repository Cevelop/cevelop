//!EqualsInitializerStatementInCtorBody
//@.config
markerLines=3
//@B.h
struct B {
	B(int a) {
		this->a = a;
	}

private:
	int a;
	std::string s { "test" };
};
//!MultipleEqualsInitializerStatementInCtorBody
//@B.h
struct B {
	B(int a, double b, std::string c) {
		this->a = a;
		this->b = b;
		this->c = c;
	}

private:
	int a { };
	double b { };
	std::string c { "test" };
};
//!MultipleEqualsInitializerStatementInCtorBodyOnly
//@.config
markerLines=4,5
//@B.h
struct B {
	B(int a, double b, std::string c) {
		this->a = a;
		this->b = b;
		this->c = c;
	}

private:
	int a { };
	double b;
	std::string c;
};
//!EqualsInitializerStatementInCtorBodyInline
//@.config
markerLines=10
//@B.h
struct B {
	inline B(int a);

private:
	int a;
	std::string s { "test" };
};

inline B::B(int a) {
	this->a = a;
}
//!EqualsInitializerStatementInCtorBodyCPP
//@.config
markerLines=3
//@B.h
struct B {
	B(int a);

private:
	int a;
	std::string s { "test" };
};
//@B.cpp
#include "B.h"
B::B(int a) {
	this->a = a;
}
//!IgnoreBecAttrEqualsInitializerStatementInCtorBody
//@B.h
struct B {
	B(int a) {
		[[gsl::suppress("Rc-initialize")]] {
			this->a = a;
		}
	}

private:
	int a;
	std::string s { "test" };
};
//!IgnoreBecAttrEqualsInitializerStatementInCtorBodyInline
//@B.h
struct B {
	inline B(int a);

private:
	int a;
	std::string s { "test" };
};

inline B::B(int a) {
	[[gsl::suppress("Rc-initialize")]] {
		this->a = a;
	}
}
//!IgnoreBecAttrEqualsInitializerStatementInCtorBodyCPP
//@B.h
struct B {
	inline B(int a);

private:
	int a;
	std::string s { "test" };
};
//@B.cpp
#include "B.h"
B::B(int a) {
	[[gsl::suppress("Rc-initialize")]] {
		this->a = a;
	}
}
//!EqualsInitializerStatementInCtorBodyWithSideEffect
//@.config
markerLines=3
//@B.h
struct B {
	B(int a, std::string s) {
		this->a = a;
		std::cout << "42";
		this->s = "test";		
	}

private:
	int a;
	std::string s { "test" };
};
//!EqualsInitializerStatementInCtorBodyMultipleDeclarations
//@.config
markerLines=3
//@B.h
struct B {
	B(int a) {
		this->b = a;
	}

private:
	int a, b;
	std::string s { "test" };
};
//!TemplateClassEqualsInitializerStatementInCtorBody
//@.config
markerLines=7,8
//@C.h
template<typename T>
class C {
	std::vector<T> v;
	std::string name;
public:
	C(std::vector<T> v, std::string name) {
		this->v = v;
		this->name = name;
	}
};

//!No nullpointerexception when using lambdas in code
//@.config
markerLines=11
//@A.h
void main() {
	auto l = [](auto c){
			if (c=='\n') {
				return ' ';
			}
			return c; };
}

struct A {
	A() {
		this->a = 10;
	}

	int a;
};