//!PublicDestructorInVisibilityLabelShouldBeVirtual
//@main.h
struct Named_map {

public:
	~Named_map() {
		delete io;
		delete oeee;
	}
	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	virtual ~Named_map() {
		delete io;
		delete oeee;
	}
	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!PublicDestructorShouldBeVirtual
//@main.h
struct Named_map {

	~Named_map() {
		delete io;
		delete oeee;
	}

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

	virtual ~Named_map() {
		delete io;
		delete oeee;
	}

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!ProtectedVirtualDestructorShouldBeNonVirtual
//@main.h
struct Named_map {

public:	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;
	
protected:
	virtual ~Named_map() {
		delete io;
		delete oeee;
	}

};
//=
struct Named_map {

public:	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;
	
protected:
	~Named_map() {
		delete io;
		delete oeee;
	}

};
//!PrivateDestructorShouldBeProtected
//@main.h
class Named_map {

	~Named_map() {
		delete io;
		delete oeee;
	}

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;
	
protected:

};
//=
class Named_map {

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;
	
protected:
	~Named_map() {
		delete io;
		delete oeee;
	}

};
//!PrivateDestructorShouldBeProtectedWithNoProtectedScope
//@main.h
class Named_map {

	~Named_map() {
		delete io;
		delete oeee;
	}

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
class Named_map {

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

protected:
	~Named_map() {
		delete io;
		delete oeee;
	}

};
//!PrivateDestructorInsidePrivateScopeShouldBeProtected
//@main.h
class Named_map {

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;
	
	~Named_map() {
		delete io;
		delete oeee;
	}

protected:

};
//=
class Named_map {

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

protected:
	~Named_map() {
		delete io;
		delete oeee;
	}

};
//!PrivateDestructorInsidePrivateScopeShouldBeProtectedWithoutProtectedScope
//@main.h
class Named_map {

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	~Named_map() {
		delete io;
		delete oeee;
	}

	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;
};
//=
class Named_map {

public:
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

protected:
	~Named_map() {
		delete io;
		delete oeee;
	}

};
//!SetAttributePublicDestructorInVisibilityLabelShouldBeVirtual
//@.config
setIgnoreAttribute=true
//@Named_map.h
struct Named_map {

public:
	~Named_map() {
		delete io;
		delete oeee;
	}
	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	[[gsl::suppress("Rc-dtor-virtual")]]
	~Named_map() {
		delete io;
		delete oeee;
	}
	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};