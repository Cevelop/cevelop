//!DestructorHasToBeNoExcept
//@main.h
struct Named_map {

public:
	virtual ~Named_map() {
		delete io;
		delete oeee;
	}
	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	virtual ~Named_map() noexcept {
		delete io;
		delete oeee;
	}
	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!SetAttributeDestructorHasToBeNoExcept
//@.config
setIgnoreAttribute=true
//@Named_map.h
struct Named_map {

public:
	virtual ~Named_map() {
		delete io;
		delete oeee;
	}
	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	[[gsl::suppress("Rc-dtor-noexcept")]]
	virtual ~Named_map() {
		delete io;
		delete oeee;
	}
	
	virtual void foo() {
		std::cout << "foo() was called on base class";
	}

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};