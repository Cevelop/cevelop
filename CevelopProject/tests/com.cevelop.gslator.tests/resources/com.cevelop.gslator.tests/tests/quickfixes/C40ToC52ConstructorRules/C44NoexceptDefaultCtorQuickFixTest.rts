//!DefaultedCtorWithoutNoexcept
//@main.h
struct A {
	A()=default;
};
//=
struct A {
	A() noexcept=default;
};
//!OwnDefaultCtorWithoutNoexcept
//@main.h
struct A {
	A() {
		doStuff();
	}
};
//=
struct A {
	A() noexcept {
		doStuff();
	}
};
//!DefaultedCtorWithoutNoexceptButHasCppFile
//@A.h
struct A {
	A();
};
//=
struct A {
	A() noexcept;
};
//@A.cpp
#include "A.h"
A::A() = default; 
//=
#include "A.h"
A::A() noexcept =default;
//!OwnDefaultCtorDeclaration
//@main.h
struct A {
	A();
};
//=
struct A {
	A() noexcept;
};
//!InlineInHeaderCtor
//@A.h
struct A {
	inline A();

private:
	int a;
	std::string s;
};

inline A::A() 
	: a { 42 }, s{ "42" } { }
//=
struct A {
	inline A() noexcept;

private:
	int a;
	std::string s;
};

inline A::A() noexcept 
	: a { 42 }, s{ "42" } { }
//!InlineInHeaderCtorInitWithNormalBrackets
//@A.h
struct A {
	inline A();

private:
	int a;
	std::string s;
};

inline A::A() :
		a(42), s ("42") {
}
//=
struct A {
	inline A() noexcept;

private:
	int a;
	std::string s;
};

inline A::A() noexcept :
		a(42), s ("42") {
}
//!SetAttributeInlineInHeaderCtorInitWithNormalBrackets
//@.config
setIgnoreAttribute=true
//@A.h
struct A {
	inline A();

private:
	int a;
	std::string s;
};

inline A::A() :
		a(42), s ("42") {
}
//=
struct A {
	[[gsl::suppress("Rc-default00")]]
	inline A();

private:
	int a;
	std::string s;
};

inline A::A() :
		a(42), s ("42") {
}
//!DefaultedCtorWithoutNoexceptMultipleMemVarDefinition
//@main.h
struct A {
	A() : a { }, b{ } { }
private:
	int a, b;
};
//=
struct A {
	A() noexcept :a {}, b {} {}
private:
	int a, b;
};