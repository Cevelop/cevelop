//!DeclareSingleArgCtorExplicit
//@main.h
struct X {
	X(double d);
	X() noexcept : y {}, s {"hello"} {}
	~X();
private:
	int x;
	double y {42.0};
	std::string s {"test"};
};
//=
struct X {
	explicit X(double d);
	X() noexcept : y {}, s {"hello"} {}
	~X();
private:
	int x;
	double y {42.0};
	std::string s {"test"};
};
//!DeclareMultipleSingleArgCtorExplicit
//@main.h
struct X {
	explicit X(double d);
	X() noexcept : y {}, s {"hello"} {}
	X(int x);
	~X();
private:
	int x;
	double y {42.0};
	std::string s {"test"};
};
//=
struct X {
	explicit X(double d);
	X() noexcept : y {}, s {"hello"} {}
	explicit X(int x);
	~X();
private:
	int x;
	double y {42.0};
	std::string s {"test"};
};
//!SetAttributeDeclareSingleArgCtorExplicit
//@.config
setIgnoreAttribute=true
//@main.h
struct X {
	X(double d);
	X() noexcept : y {}, s {"hello"} {}
	~X();
private:
	int x;
	double y {42.0};
	std::string s {"test"};
};
//=
struct X {
	[[gsl::suppress("Rc-explicit")]]
	X(double d);
	X() noexcept : y {}, s {"hello"} {}
	~X();
private:
	int x;
	double y {42.0};
	std::string s {"test"};
};
//!TemplateClassOneSingleArgCtor
//@C.h
template<typename T>
class C {
	std::vector<T> v;
public:
	C() = default;
	C(std::vector<T> v) : v { v } { }
};
//=
template<typename T>
class C {
	std::vector<T> v;
public:
	C() = default;
	explicit C(std::vector<T> v) :
			v { v } {
	}
};