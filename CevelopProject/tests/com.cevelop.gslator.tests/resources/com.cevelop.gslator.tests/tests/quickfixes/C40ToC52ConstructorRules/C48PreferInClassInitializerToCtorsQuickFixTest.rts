//!InClassInitializeVarsFromMostComplexCtorWithDefVals
//@main.h
class example {
	int x;
	double y { 42.0 };
	std::string s { };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x = 42, double y = 42.0, std::string s = "hello") :
		x { x }, y { y }, s { s } {}
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//=
class example {
	int x { 42 };
	double y { 42.0 };
	std::string s { "hello" };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x, double y, std::string s) :
		x { x }, y { y }, s { s } {}
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!InclassInitFromSingleArgCtor
//@main.h
struct A {
	bool is_valid() {
		return true;
	}
	void drive() {

	}
	int x;
	A(int x = 1) :
			x(x) {
	} // user-defined default constructor
};
//=
struct A {
	bool is_valid() {
		return true;
	}
	void drive() {

	}
	int x { 1 };
	A(int x) :
			x(x) {
	} // user-defined default constructor
};
//!SetAttributeInClassInitializeVarsFromMostComplexCtorWithDefVals
//@.config
setIgnoreAttribute=true
//@main.h
class example {
	int x;
	double y { 42.0 };
	std::string s { };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x = 42, double y = 42.0, std::string s = "hello") :
		x { x }, y { y }, s { s } {}
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//=
class example {
	int x;
	double y { 42.0 };
	std::string s { };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	[[gsl::suppress("Rc-in-class-initializer")]]
	example(int x = 42, double y = 42.0, std::string s = "hello") :
			x { x }, y { y }, s { s } {
	}
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!InitializeMemVarsInClassMultipleDeclarations
//@example.h
class example {
	int x;
	double y { 42.0 }, z;
	std::string s { };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x = 42, double y = 42.0, double z = 42.0, std::string s = "hello") :
		x { x }, y { y }, z { z }, s { s } {}
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//=
class example {
	int x { 42 };
	double y { 42.0 }, z { 42.0 };
	std::string s { "hello" };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x, double y, double z, std::string s) :
		x { x }, y { y }, z { z }, s { s } {}
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!TemplateClassInitializeMemVarsInClass
//@.config
markerLines=7
//@C.h
template<typename T>
class C {
	std::vector<T> v;
	std::string name;
public:
	C(std::vector<T> v = { 1,2,3 }, std::string name = "hello") : name { name }, v { v } { }
};
//=
template<typename T>
class C {
	std::vector<T> v { 1, 2, 3 };
	std::string name { "hello" };
public:
	C(std::vector<T> v, std::string name) :
			name { name }, v { v } {
	}
};