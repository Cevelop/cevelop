//!CopyAssignmentDeclarationWithMissingReferenceInReturnType
//@main.h
struct Named_map {

public:
	Named_map operator =(const Named_map& rhs) const;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	Named_map& operator =(const Named_map& rhs) const;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!CopyAssignmentDefinitionWithMissingReferenceInReturnType
//@main.h
struct Named_map {

public:
	Named_map operator =(const Named_map& rhs) = default;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	Named_map& operator =(const Named_map& rhs) = default;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!CopyAssignmentDeclarationWithConstInReturnType
//@main.h
struct Named_map {

public:
	const Named_map& operator =(const Named_map& rhs) const;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	Named_map& operator =(const Named_map& rhs) const;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!CopyAssignmentDefinitionWithConstInReturnType
//@main.h
struct Named_map {

public:
	const Named_map& operator =(const Named_map& rhs) = default;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	Named_map& operator =(const Named_map& rhs) = default;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!CopyAssignmentDeclarationWithConstAndMissingReferenceInReturnType
//@main.h
struct Named_map {

public:
	const Named_map operator =(const Named_map& rhs) const;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	Named_map& operator =(const Named_map& rhs) const;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!CopyAssignmentDefinitionWithConstAndMissingReferenceInReturnType
//@main.h
struct Named_map {

public:
	const Named_map operator =(const Named_map& rhs) = default;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	Named_map& operator =(const Named_map& rhs) = default;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!SetAttributeCopyAssignmentDeclarationWithMissingReferenceInReturnType
//@.config
setIgnoreAttribute=true
//@Named_map.h
struct Named_map {

public:
	Named_map operator =(const Named_map& rhs) const;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//=
struct Named_map {

public:
	[[gsl::suppress("Rc-copy-assignment")]]
	Named_map operator =(const Named_map& rhs) const;

private:
	std::string name;
	std::map<int, int> rep;
	gsl::owner<int *> io;
	gsl::owner<int *> oeee;

};
//!VoidRetType
//@A.h
struct A {
	void operator= (const A &a);
};
//=
struct A {
	A& operator =(const A& a);
};