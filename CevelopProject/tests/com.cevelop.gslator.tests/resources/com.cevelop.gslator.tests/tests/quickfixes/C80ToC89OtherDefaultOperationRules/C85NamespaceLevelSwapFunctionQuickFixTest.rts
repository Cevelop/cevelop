//!ClassInNamespaceWithoutSwapFunction
//@main.cpp
namespace swap {
struct SwappableMember {
	void swap(SwappableMember &other) {}
};
}
//=
namespace swap {
struct SwappableMember {
	void swap(SwappableMember &other) {}
};

void swap(SwappableMember& a, SwappableMember& b) noexcept
{
	a.swap(b);
}
}
//!ClassWithoutSwapFunction
//@main.cpp
struct SwappableMember {
	void swap(SwappableMember &other) {}
};
//=
struct SwappableMember {
	void swap(SwappableMember &other) {}
};

void swap(SwappableMember& a, SwappableMember& b) noexcept
{
	a.swap(b);
}
//!SetAttributeNamespaceLevelSwap
//@.config
setIgnoreAttribute=true
//@main.cpp
struct SwappableMember {
	void swap(SwappableMember& other) {}
};
//=
struct [[gsl::suppress("Rc-swap-noexcept")]] SwappableMember {
	void swap(SwappableMember& other) {
	}
};
//!Create swap for template as template
//@main.cpp
template <typename T>
struct A {
	T mValue { };

	void swap(A& other) noexcept
	{}
};
//=
template <typename T>
struct A {
	T mValue { };

	void swap(A& other) noexcept
	{}
};

template<typename T>
void swap(A<T>& a, A<T>& b) noexcept
{
	a.swap(b);
}
//!Create swap for template with parameter pack
//@main.cpp
template<typename...T>
struct A {
	void swap(A& other) noexcept
	{}
};
//=
template<typename...T>
struct A {
	void swap(A& other) noexcept
	{}
};

template<typename...T>
void swap(A<T...>& a, A<T...>& b) noexcept {
	a.swap(b);
}
//!Create swap for template with multiple parameters
//@main.cpp
template <typename T, int I, template<typename, int, typename...> class Tpl, typename, typename...>
struct A {
	T mValue { };

	void swap(A& other) noexcept
	{}
};
//=
template <typename T, int I, template<typename, int, typename...> class Tpl, typename, typename...>
struct A {
	T mValue { };

	void swap(A& other) noexcept
	{}
};

template<typename T, int I, template <typename , int, typename...> class Tpl, typename __anonymous0, typename... __anonymous1>
void swap(A<T, I, Tpl, __anonymous0, __anonymous1...>& a, A<T, I, Tpl, __anonymous0, __anonymous1...>& b) noexcept
{
	a.swap(b);
}