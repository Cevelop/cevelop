//!ConstCastUnneded
//@.config
isApplicable=true
//@main.h
void foo() {
	int i = 20;
	int * ic = &i;
	int * inew = const_cast<int *>(ic);
	*inew = 10;
}
//=
void foo() {
	int i = 20;
	int * ic = &i;
	int * inew = ic;
	*inew = 10;
}
//!ConstCastFunctionIsConst
//@.config
isApplicable=true
//@main.h
class CacheClass {
public:
	void set(int x) {};
};
class constFuncExample {
public:
	int getVal() const {
		const_cast<CacheClass&>(cache).set(val);
		return val;
	}
private:
	int val = 0;
	CacheClass cache;
};
//=
class CacheClass {
public:
	void set(int x) {};
};
class constFuncExample {
public:
	int getVal() {
		cache.set(val);
		return val;
	}
private:
	int val = 0;
	CacheClass cache;
};
//!ConstCastFunctionIsConstMultipleFiles
//@.config
isApplicable=true
//@main.h
class CacheClass {
public:
	void set(int x) {};
};
class constFuncExample {
public:
	int getVal() const;
private:
	int val = 0;
	CacheClass cache;
};
//=
class CacheClass {
public:
	void set(int x) {};
};
class constFuncExample {
public:
	int getVal();
private:
	int val = 0;
	CacheClass cache;
};
//@main.cpp
#include "main.h"

int constFuncExample::getVal() const {
	const_cast<CacheClass&>(cache).set(val);
	return val;
}
//=
#include "main.h"

int constFuncExample::getVal() {
	cache.set(val);
	return val;
}
//!ConstCastVarIsConst
//@.config
isApplicable=true
//@main.h
void foo() {
	int i = 20;
	int const * ic = &i;
	int * inew = const_cast<int *>(ic);
	*inew = 10;
}
//=
void foo() {
	int i = 20;
	int * ic = &i;
	int * inew = ic;
	*inew = 10;
}
//!ConstCastVarIsConstMultipleFiles
//@.config
isApplicable=true
//@main.h
class constVarExample {
private:
	int theVar = 10;
	void someFunc();
public:
	const int * theConstVar = &theVar;
};
//=
class constVarExample {
private:
	int theVar = 10;
	void someFunc();
public:
	int * theConstVar = &theVar;
};
//@main.cpp
#include "main.h"

void constVarExample::someFunc() {
	*(const_cast<int *>(theConstVar))+=10;
}
//=
#include "main.h"

void constVarExample::someFunc() {
	*(theConstVar) += 10;
}
//!ConstCastVarIsConstSetIgnore
//@.config
setIgnoreAttribute=true
//@main.h
void foo() {
	int i = 20;
	int const * ic = &i;
	int * inew = const_cast<int *>(ic);
	*inew = 10;
}
//=
void foo() {
	int i = 20;
	int const * ic = &i;
	[[gsl::suppress("Res-casts-const")]] int* inew = const_cast<int*>(ic);
	*inew = 10;
}