//!normalIfLabelOnlyUsedOnce
//@.config
isApplicable=true
//@main.h
void doSomething() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) goto end1;
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (!someCondition) {
		doSomething();
	}
	doSomething();
}
//!normalIfLabelWithMultipleCondsOnlyUsedOnce
//@.config
isApplicable=true
//@main.h
void doSomething() {}
bool someCondition1 = true;
bool someCondition2 = false;

void case1() {
	doSomething();
	if (someCondition1 && someCondition2) goto end1;
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
bool someCondition1 = true;
bool someCondition2 = false;

void case1() {
	doSomething();
	if (!(someCondition1 && someCondition2)) {
		doSomething();
	}
	doSomething();
}
//!normalIfLabelUsedMultipleTimes
//@.config
isApplicable=true
//@main.h
void doSomething() {}
bool someCondition = false;

void case2() {
	doSomething();
	if (someCondition) [[gsl::suppress("Res-goto")]] goto end1;
	if (someCondition) goto end1;
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
bool someCondition = false;

void case2() {
	doSomething();
	if (someCondition) [[gsl::suppress("Res-goto")]] goto end1;
	if (!someCondition) {
		doSomething();
	}
	end1:
	doSomething();
}
//!normalIfWithElse
//@.config
isApplicable=true
//@main.h
void doSomething() {}
void doSomethingElse() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) goto end1;
    else doSomethingElse();
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
void doSomethingElse() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (!someCondition) {
		doSomethingElse();
		doSomething();
	}
	doSomething();
}
//!normalIfWithMultilineElse
//@.config
isApplicable=true
//@main.h
void doSomething() {}
void doSomethingElse() {}
void doSomethingElseAgain() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) goto end1;
    else {
		doSomethingElse();
		doSomethingElseAgain();
	}
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
void doSomethingElse() {}
void doSomethingElseAgain() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (!someCondition) {
		doSomethingElse();
		doSomethingElseAgain();
		doSomething();
	}
	doSomething();
}
//!ifNotAloneInThenStatement
//@.config
isApplicable=true
//@main.h
void doSomething() {}
void doSomethingCond() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) {
		doSomethingCond();
		goto end1;
	}
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
void doSomethingCond() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) {
		doSomethingCond();
	} else {
		doSomething();
	}
	doSomething();
}
//!ifWithGotoInElseAlone
//@.config
isApplicable=true
//@main.h
void doSomething() {}
void doSomethingCond() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) {
		doSomethingCond();
	}
	else goto end1;
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
void doSomethingCond() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) {
		doSomethingCond();
		doSomething();
	}
	doSomething();
}
//!ifWithGotoInElseAloneBracketed
//@.config
isApplicable=true
//@main.h
void doSomething() {}
void doSomethingCond() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) {
		doSomethingCond();
	} else {
		goto end1;
	}
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
void doSomethingCond() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) {
		doSomethingCond();
		doSomething();
	}
	doSomething();
}
//!ifWithGotoInElseNotAlone
//@.config
isApplicable=true
//@main.h
void doSomething() {}
void doSomethingElse() {}
void doSomethingCond() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) {
		doSomethingCond();
	} else {
		doSomethingElse();
		goto end1;
	}
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
void doSomethingElse() {}
void doSomethingCond() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) {
		doSomethingCond();
		doSomething();
	} else {
		doSomethingElse();
	}
	doSomething();
}
//!NotApplicableWhileLabelOnlyUsedOnce
//@.config
isApplicable=false
//@main.h
void doSomething() {}
bool someCondition = false;

void case3() {
	doSomething();
	loop1:
	doSomething();
	if(someCondition) goto loop1;
	doSomething();
}
//!NotApplicableWhileLabelUsedMultipleTimes
//@.config
isApplicable=false
//@main.h
void doSomething() {}
bool someCondition = false;

void case4() {
	doSomething();
	loop2:
	doSomething();
	if(someCondition) goto loop2;
	if(someCondition) [[gsl::suppress("Res-goto")]] goto loop2;
	doSomething();
}
//!NotApplicableWhileWithElse
//@.config
isApplicable=false
//@main.h
void doSomething() {}
void doSomethingElse() {}
bool someCondition = false;

void case3() {
	doSomething();
	loop1:
	doSomething();
	if(someCondition) goto loop1;
	else doSomethingElse();
	doSomething();
}
//!NotApplicableWhileWithBiggerElse
//@.config
isApplicable=false
//@main.h
void doSomething() {}
void doSomethingElse() {}
void doSomethingElseAgain() {}
bool someCondition = false;

void case3() {
	doSomething();
	loop1:
	doSomething();
	if(someCondition) goto loop1;
	else {
		doSomethingElse();
		doSomethingElseAgain();
	}
	doSomething();
}
//!NotApplicableWhileWithMultiStatementElse
//@.config
isApplicable=false
//@main.h
void doSomething() {}
void doSomethingElse() {}
bool someCondition = false;

void case3() {
	doSomething();
	loop1:
	doSomething();
	if(someCondition) goto loop1;
	else {
		doSomething();
		doSomethingElse();
	}
	doSomething();
}
//!NotApplicableBreakLabelOnlyUsedOnce
//@.config
isApplicable=false
//@main.h
void doSomething() {}
bool someCondition = false;

void case5() {
	doSomething();
	while(someCondition) {
		doSomething();
		if (someCondition) goto exit1;
		doSomething();
	}
	exit1:
	doSomething();
}
//!NotApplicableBreakLabelUsedMultipleTimes
//@.config
isApplicable=false
//@main.h
void doSomething() {}
bool someCondition = false;

void case6() {
	doSomething();
	while(someCondition) {
		doSomething();
		if (someCondition) goto exit2;
		if (someCondition) [[gsl::suppress("Res-goto")]] goto exit2;
		doSomething();
	}
	// doSomething(69); <- with this the quickfix would not be valid
	exit2:
	doSomething();
}
//!NotApplicableMultibreak1
//@.config
isApplicable=false
//@main.h
void doSomething() {}
bool someCondition = false;

void case7() {
	doSomething();
	while (someCondition) {
		while (someCondition) {
			doSomething();
			if(someCondition) goto exit3;
			doSomething();
		}
	}
	// doSomething(69); <- with this the quickfix would not be valid
	exit3:
	doSomething();
}
//!NotApplicableMultibreak2
//@.config
isApplicable=false
//@main.h
void doSomething() {}
bool someCondition = false;

void case8() {
	doSomething();
	while (someCondition) {
		while (someCondition) {
			while (someCondition) {
				doSomething();
				if (someCondition) goto exit2;
				doSomething();
			}
		}
	}
	exit2:
	doSomething();
}
//!NotApplicableMultibreak3
//@.config
isApplicable=false
//@main.h
void doSomething() {}
bool someCondition = false;

void case7() {
	doSomething();
	while (someCondition) {
		while (someCondition) {
			doSomething();
			if (someCondition) goto exit3;
			if (someCondition) [[gsl::suppress("Res-goto")]] goto exit3;
			doSomething();
		}
	}
	exit3:
	doSomething();
}
//!setIgnoreAttribute
//@.config
setIgnoreAttribute=true
//@main.h
void doSomething() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition) goto end1;
	doSomething();
	end1:
	doSomething();
}
//=
void doSomething() {}
bool someCondition = false;

void case1() {
	doSomething();
	if (someCondition)
		[[gsl::suppress("Res-goto")]]
		goto end1;
	doSomething();
	end1:
	doSomething();
}