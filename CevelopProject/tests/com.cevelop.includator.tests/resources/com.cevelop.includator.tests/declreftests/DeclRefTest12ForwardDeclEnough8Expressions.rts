//!DeclRefTest12ForwardDeclEnough8Expressions1 field ref test
//@.config
isFwdDeclEnough=false
expectedRefCount=4
bClassIndex=1
expectedExpressionText=type B of expression 'getB()'
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	getB()->foo();
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions2 Assignment to base type definition
//@.config
isFwdDeclEnough=false
expectedRefCount=5
bClassIndex=3
expectedExpressionText=type B of expression 'getB()'
checkOtherType=true
otherTypeName=A
otherTypeIndex=1
otherTypeFwdDeclEnouth=true
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	A *a = getB();
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions3 assignment to base type
//@.config
isFwdDeclEnough=false
expectedRefCount=5
bClassIndex=3
expectedExpressionText=type B of expression 'getB()'
checkOtherType=true
otherTypeName=A
otherTypeIndex=1
otherTypeFwdDeclEnouth=true
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	A *a;
	a = getB();
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions4 assignment to same type1
//@.config
isFwdDeclEnough=true
expectedRefCount=4
bClassIndex=1
expectedExpressionText=B
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	B *b = getB();
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions5 assignment to same type2
//@.config
isFwdDeclEnough=true
expectedRefCount=4
bClassIndex=1
expectedExpressionText=B
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	B *b;
	b = getB();
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions6 only getter
//@.config
isFwdDeclEnough=true
expectedRefCount=3
bClassIndex=1
expectedExpressionText=type B of expression 'getB()'
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	getB();
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions7 only getter [non-pointer]
//@.config
isFwdDeclEnough=false
expectedRefCount=3
bClassIndex=1
expectedExpressionText=type B of expression 'getFullB()'
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	getFullB();
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions8 setter [non-pointer]
//@.config
isFwdDeclEnough=false
expectedRefCount=4
bClassIndex=2
expectedExpressionText=type B of expression '*getB()'
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	setFullB(*getB());
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions9 setter
//@.config
isFwdDeclEnough=true
expectedRefCount=4
bClassIndex=2
expectedExpressionText=type B of expression 'getB()'
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	setB(getB());
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions10 getter, de-referencing
//@.config
isFwdDeclEnough=true
expectedRefCount=3
bClassIndex=1
expectedExpressionText=type B of expression '*getB()'
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	*getB();
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions11 A-Pointer-array-initialization
//@.config
isFwdDeclEnough=false
expectedRefCount=6
bClassIndex=4
expectedExpressionText=type B of expression 'getB()'
checkOtherType=true
otherTypeName=A
otherTypeIndex=1
otherTypeFwdDeclEnouth=true
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	A *a;
	A *aA[] = { getB(), a };
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();


//!DeclRefTest12ForwardDeclEnough8Expressions12 B-Pointer-array-initialization
//@.config
isFwdDeclEnough=true
expectedRefCount=4
bClassIndex=1
expectedExpressionText=B
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	B *b;
	B *aB[] = { b };
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setFullB(B b);
B getFullB();

//!DeclRefTest12ForwardDeclEnough8Expressions13 setter [ref]
//@.config
isFwdDeclEnough=true
expectedRefCount=4
bClassIndex=2
expectedExpressionText=type B of expression '*getB()'
//@main.cpp
#include "A.h"
#include "B.h"
#include "BHelper.h"

int main() {
	setRefB(*getB());
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
public:
	void foo() { }
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A { 
};

#endif /* B_H_ */
//@BHelper.h
class B;
B* getB();
void setB(B* b);
void setRefB(B &b);
B getFullB();

//!DeclRefTest12ForwardDeclEnough8Expressions14 varArg param
//@.config
isFwdDeclEnough=false
expectedRefCount=5
bClassIndex=3
expectedExpressionText=type B of expression 'b'
//@main.cpp
#include "B.h"

int foo(int n_args, ...){
    return 1;
}

int main(){
	foo(2, b);
    return 0;
}


//@B.h
class B{
} b;

//!DeclRefTest12ForwardDeclEnough8Expressions15 same-type-ref initialized from pointer
//@.config
isFwdDeclEnough=true
expectedRefCount=4
bClassIndex=0
expectedExpressionText=B
//@main.cpp
class B;

int main() {
	B* pB;
	B& rB = *pB;
	return 0;
}
//@B.h
class B {
};

//!DeclRefTest12ForwardDeclEnough8Expressions16 other-type-ref initialized from pointer
//@.config
isFwdDeclEnough=false
expectedRefCount=5
bClassIndex=1
expectedExpressionText=B
//@main.cpp
class A;
class B;

int main() {
	B* pB;
	A& rA = *pB;
	return 0;
}
//@A.h
#ifndef A_H_
#define A_H_

class A {
};

#endif /* A_H_ */
//@B.h
#ifndef B_H_
#define B_H_
#include "A.h"

class B : public A {
};

#endif /* B_H_ */