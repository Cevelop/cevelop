
//!MainShouldNotMatch
//@main.cpp
int main(int argc, char** argv){
}

//!FunctionReturnType_std::function
//@main.cpp
std::function<int()> foo = [] () {
    return 42;
};





//!CStyleCast
//@main.cpp
int main(){
    char castee { 42 };
    char casted1 = (char) scastee;
}

//!StaticCast
//@main.cpp
int main(){
    char castee { 42 };
    char casted = static_cast<char>(castee);
}

//!ReinterpretCast
//@main.cpp
int main(){
    char castee { 42 };
    char *casted = reinterpret_cast<char*>(&castee);
}

//!ConstCast
//@main.cpp
int main(){
    const char castee { 42 };
    int *casted = const_cast<int*>(&castee);
}





//!NestedTemplate
//@main.cpp
int main(){ 
    std::vector<std::vector<std::vector<int>>> foo { };
}

//!ParameterIn_std::function
//@main.cpp
std::function<int()> foo = [] {
    return 42;
};

//!TemplatedFunction
//@main.cpp
template<int I>
void foo() {
}

//!VariadicTemplate
//@.config
markerLines=2,7
//@main.cpp
template<typename H>
int adder(H head){
    return head;
}

template<typename H, typename ... Tail>
int adder(H head, Tail... tail) {
  return head + adder(tail...);
}

int blaz = adder<char,short,int,long,long long>(42,42,42,42,42);

//!Calling
//@main.cpp
template<typename T>
void foo(T t) {
}

int main() {
    foo<int>(42);
}

//!OnHeap
//@main.cpp
std::vector<int>* vectorPointer = new std::vector<int> {42,42,42};

//!ClassTemplate
//@.config
markerLines=7
//@main.cpp
template<int I>
class Foo {
    int bar;
    
public:

    Foo(int i){
        bar = i*I;
    }
};

int main(){
    Foo foo30 = Foo<42>(7);
}

//!AllTypes
//@main.cpp
std::vector<char> v_char { };
std::vector<short> v_short { };
std::vector<int> v_int32t { };
std::vector<long> v_long { };
std::vector<long long> v_longlong { };





//!TypedefAllElidedTypes
//@main.cpp
int main(){
    typedef char nchar;
    typedef short nshort;
    typedef short int nshortint;
    typedef int nint;
    typedef long nlong;
    typedef long int nlongint;
    typedef long long nlonglong;
    typedef long long int nlonglongint;
}

//!UsingAllElidedTypes
//@main.cpp
int main(){
    using nchar = char;
    using nshort = short;
    using nshortint = short int;
    using nint = int;
    using nlong = long;
    using nlongint = long int;
    using nlonglong = long long;
    using nlonglongint = long long int;
}






//!UniformInitalizedDefinition
//@main.cpp
auto foo = int{ 42 };

//!Definition
//@main.cpp
auto foo = int(42);

//!MultipleDeclarationsOnOneLine
//@main.cpp
int foo, bar, baz;

//!MultipleDefinitonsOnOneLine
//@main.cpp
int foo = 42, bar = 42, baz = 42;

//!MultipleDefinitionsOnOneLineAuto
//@main.cpp
auto foo = int { 42 }, bar = int { 42 }, baz = int { 42 };

//!UniformInitializationDefinitionOnHeap
//@main.cpp
int* foo = new int { 42 };

//!DefinitionOnHeap
//@main.cpp
int* foo = new int ( 42 );

//!MultipleDefinitionOnHeap
//@main.cpp
int* foo = new int ( 42 ), bar = new int ( 42 ), baz = new int ( 42 );

//!MemberVariable
//@classes.cpp
class Foo {
    int foo = 42;
};

//!TemporaryVariablesInFunctions
//@.config
markerLines=1
//@main.cpp
void foo(int bar){
    int baz = bar * 42;
}