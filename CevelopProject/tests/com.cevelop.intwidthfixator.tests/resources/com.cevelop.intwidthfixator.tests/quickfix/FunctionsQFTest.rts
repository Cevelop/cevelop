
//!Return Type
//@main.cpp
char foo() {
}
//=
#include <cstdint>
std::int8_t foo() {
} 

//!Parameter Types
//@main.cpp
void foo(char, char) {
}
//=
#include <cstdint>
void foo(std::int8_t, std::int8_t) {
}

//!VarArg Parameter Type
//@main.cpp
void foo(int ... bar) {
}
//=
#include <cstdint>
void foo(std::int32_t ... bar) {
}

//!Trailing Return Type
//@main.cpp
auto foo() -> char {
}
//=
#include <cstdint>
auto foo () -> std::int8_t{
}

//!Declaration Definition
//@main.cpp
int foo();

int foo() {
    return 42;
}
//=
#include <cstdint>
std::int32_t foo();

std::int32_t foo() {
    return 42;
}

//!Lambda Return Value
//@main.cpp
auto lambda = []() -> short {
    return 42;
};
//=
#include <cstdint>
auto lambda = []() -> std::int16_t {
    return 42;
};

//!Lambda Parameter Types
//@main.cpp
auto lambda = [](int a, long b) {
    return a + b;
};
//=
#include <cstdint>
auto lambda = [](std::int32_t a, std::int32_t b) {
    return a + b;
};

//!Function ArgumentTypes _std::function
//@main.cpp
std::function<void(int, int)> foo = [] (int a, int b) {
};
//=
#include <cstdint>
std::function<void(std::int32_t, std::int32_t)> foo = 
    [] (std::int32_t a, std::int32_t b) {
    };

//!Function Return Type_std::function
//@main.cpp
std::function<int()> foo = [] () -> int {
    return 42;
};
//=
#include <cstdint>
std::function<int()> foo = [] () -> std::int32_t {
    return 42;
};

//!Function Pointer
//@main.cpp
std::function<int(int, int)>* fooPointer = 
    new std::function<int(int, int)>(
        [=](int a, int b) -> int {
            return a + b;
        }
    );
//=
#include <cstdint>
std::function<int(std::int32_t, std::int32_t)>* fooPointer =
        new std::function<
        int(std::int32_t, std::int32_t)>(
        [=](std::int32_t a, std::int32_t b) -> std::int32_t {
            return a + b;
        }
    );

//! Member Functions Return Types 
//@class.h
class Foo {
    int foo();
};
//=
#include <cstdint>
class Foo {
    std::int32_t foo();
};
//@class.cpp
class Foo {
    int foo() {
        return 42;
    }
};
//=
#include <cstdint>
class Foo {
    std::int32_t foo() {
        return 42;
    }
};

//!Member Functions Parameter Types
//@class.h
class Foo {
    void foo(char, char);
};
//=
#include <cstdint>
class Foo {
    void foo(std::int8_t, std::int8_t);
};
//@class.cpp
class Foo {
    void foo(char, char) {
    }
};
//=
#include <cstdint>
class Foo {
    void foo(std::int8_t, std::int8_t) {
    }
};


//!Class Operator Int
//@main.cpp
class Foo {
    int foo = 42;
    operator int()
    {
        return foo;
    }
}; 
//=
#include <cstdint>
class Foo {
    int foo = 42;
    operator std::int32_t()
    {
        return foo;
    }
}; 

//!Member Functions VarArg Parameter Types
//@class.h
class Foo {
    void foo(char... );
};
//=
#include <cstdint>
class Foo {
    void foo(std::int8_t... );
};
//@class.cpp
class Foo {
    void foo(char... ) {
    }
};
//=
#include <cstdint>
class Foo {
    void foo(std::int8_t... ) {
    }
};

//!Member Functions Friend Handling
//@class.h
class Foo {
    friend int foo(char in);
};
//=
#include <cstdint>
class Foo {
    friend std::int32_t foo(std::int8_t in);
};
//@class.cpp
class Foo {
    friend int foo(char in) {
        return in * 42;
    }
};
//=
#include <cstdint>
class Foo {
    friend std::int32_t foo(std::int8_t in) {
        return in * 42;
    }
};

//!All Types Return Values
//@main.cpp
char cfoo() {
    return 42;
}
short sfoo() {
    return 42;
}
int ifoo() {
    return 42;
}
long lfoo() {
    return 42;
}
long long llfoo() {
    reutnr 42;
}
//=
#include <cstdint>
std::int8_t cfoo() {
    return 42;
}
std::int16_t sfoo() {
    return 42;
}
std::int32_t ifoo() {
    return 42;
}
std::int32_t lfoo() {
    return 42;
}
std::int64_t llfoo() {
    reutnr 42;
}

//!All Parameter Types
//@main.cpp
void cfoo(char) {
}
void sfoo(short) {
}
void ifoo(int) {
}
void lfoo(long) {
}
void llfoo(long long) {
}
//=
#include <cstdint>
void cfoo(std::int8_t) {
}
void sfoo(std::int16_t) {
}
void ifoo(std::int32_t) {
}
void lfoo(std::int32_t) {
}
void llfoo(std::int64_t) {
}


