//!NestedTemplate
//@main.cpp
int main(){ 
    std::vector<std::vector<std::vector<int>>> foo { };
}
//=
#include <cstdint>
int main(){
    std::vector<std::vector<std::vector<std::int32_t>>> foo{ };
}

//!ParameterIn_std::function
//@main.cpp
std::function<int()> foo = [] {
    return 42;
};
//=
#include <cstdint>
std::function<std::int32_t()> foo = [] {
    return 42;
};

//!TemplatedFunction
//@main.cpp
template<int I>
void foo() {
}
//=
#include <cstdint>
template<std::int32_t I>
void foo() {
}

//!VariadicTemplate
//@main.cpp
template<typename H>
int adder(H head){
    return head;
}

template<typename H, typename ... Tail>
int adder(H head, Tail... tail) {
  return head + adder(tail...);
}

int blaz = adder<char,short,int,long,long long>(42,42,42,42,42);

//=
#include <cstdint>
template<typename H>
int adder(H head){
    return head;
}

template<typename H, typename ... Tail>
int adder(H head, Tail... tail) {
    return head+ adder(tail...);
}

int blaz = adder<std::int8_t, std::int16_t, std::int32_t, std::int32_t, std::int64_t>(42,42,42,42,42);

//!Calling
//@main.cpp
template<typename T>
void foo(T t) {
}

int main() {
    foo<int>(42);
}
//=
#include <cstdint>
template<typename T>
void foo(T t) {
}

int main() {
    foo<std::int32_t>(42);
}

//!OnHeap
//@main.cpp
std::vector<int>* vectorPointer = new std::vector<int> {42,42,42};
//=
#include <cstdint>
std::vector<std::int32_t>* vectorPointer = new std::vector<std::int32_t> {42,42,42};

//!ClassTemplate
//@main.cpp
template<int I>
class Foo {
    int bar;
    
public:

    Foo(int i){
        bar = i*I;
    }
};

int main(){
    Foo foo30 = Foo<42>(7);
}
//=
#include <cstdint>
template<std::int32_t I>
class Foo {
    int bar;
    
public:

    Foo(int i){
        bar = i*I;
    }
};

int main(){
    Foo foo30 = Foo<42>(7);
}

//!AllTypes
//@main.cpp
std::vector<char> v_char { };
std::vector<short> v_short { };
std::vector<int> v_int32t { };
std::vector<long> v_long { };
std::vector<long long> v_longlong { };
//=
#include <cstdint>
std::vector<std::int8_t> v_char { };
std::vector<std::int16_t> v_short { };
std::vector<std::int32_t> v_int32t { };
std::vector<std::int32_t> v_long { };
std::vector<std::int64_t> v_longlong { };


