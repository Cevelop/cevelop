//!Typedef and Usings
//@main.cpp
#include <cstdint>

using u_uint16t = std::uint16_t;
using u_int16t = std::int16_t;

typedef std::uint16_t td_uint16t;
typedef std::int16_t td_int16t;
//=
#include <cstdint>

using u_uint16t = unsigned short;
using u_int16t = short;

typedef unsigned short td_uint16t;
typedef short td_int16t;

//!Typedef and Usings unqualified
//@main.cpp
#include <cstdint>

using u_uint16t = uint16_t;
using u_int16t = int16_t;

typedef uint16_t td_uint16t;
typedef int16_t td_int16t;
//=
#include <cstdint>

using u_uint16t = unsigned short;
using u_int16t = short;

typedef unsigned short td_uint16t;
typedef short td_int16t;

//! Variables
//@main.cpp
#include <cstdint>

int castee{ 42 };

std::int16_t casted = (std::int16_t) castee;

std::int16_t casted1 = std::int16_t(castee);

std::int16_t casted2 = static_cast<std::int16_t>(castee);

std::int16_t *casted3 = reinterpret_cast<std::int16_t*>(&castee);

std::int16_t int16t { 12 };
std::uint16_t uint16t { 12 };
const std::int16_t cint16t { 12 };
const std::uint16_t cuint16t { 12 };
constexpr std::int16_t ceint16t { 12 };
constexpr std::uint16_t ceuint16t { 12 };
//=
#include <cstdint>

int castee { 42 };

short casted = (short) castee;

short casted1 = short(castee);

short casted2 = static_cast<short>(castee);

short *casted3 = reinterpret_cast<short*>(&castee);

short int16t { 12 };
unsigned short uint16t { 12 };
const short cint16t { 12 };
const unsigned short cuint16t { 12 };
constexpr short ceint16t { 12 };
constexpr unsigned short ceuint16t { 12 };

//! Variables unqualified
//@main.cpp
#include <cstdint>

int castee { 42 };

int16_t casted = (int16_t) castee;

int16_t casted1 = int16_t(castee);

int16_t casted2 = static_cast<int16_t>(castee);

int16_t *casted3 = reinterpret_cast<int16_t*>(&castee);

int16_t int16t { 12 };
uint16_t uint16t { 12 };
const int16_t cint16t { 12 };
const uint16_t cuint16t { 12 };
constexpr int16_t ceint16t { 12 };
constexpr uint16_t ceuint16t { 12 };
//=
#include <cstdint>

int castee { 42 };

short casted = (short) castee;

short casted1 = short(castee);

short casted2 = static_cast<short>(castee);

short *casted3 = reinterpret_cast<short*>(&castee);

short int16t { 12 };
unsigned short uint16t { 12 };
const short cint16t { 12 };
const unsigned short cuint16t { 12 };
constexpr short ceint16t { 12 };
constexpr unsigned short ceuint16t { 12 };

//!Variables Special Cases
//@main.cpp
#include <cstdint>

std::int16_t newshort_int = std::int16_t(42);

auto foo1 = std::int16_t { 42 }, foo2 = std::int16_t { 43 }, foo3 = std::int16_t { 44 };
std::int16_t bar1, bar2, bar3;
std::int16_t baz1 = 42, baz2 = 43, baz3 = 43;
std::int16_t* blaz1 = new std::int16_t { 42 }, *blaz2 = new std::int16_t { 43 };
std::int16_t* bloz1 = new std::int16_t { 42 };
//=
#include <cstdint>

short newshort_int = short(42);

auto foo1 = short { 42 }, foo2 = short { 43 }, foo3 = short { 44 };
short bar1, bar2, bar3;
short baz1 = 42, baz2 = 43, baz3 = 43;
short* blaz1 = new short {42}, *blaz2 = new short {43};
short* bloz1 = new short {42};

//!Variables Special Cases unqualified
//@main.cpp
#include <cstdint>

int16_t newshort_int = int16_t(42);

auto foo1 = int16_t { 42 }, foo2 = int16_t { 43 }, foo3 = int16_t { 44 };
int16_t bar1, bar2, bar3;
int16_t baz1 = 42, baz2 = 43, baz3 = 43;
int16_t* blaz1 = new int16_t { 42 }, *blaz2 = new int16_t { 43 };
int16_t* bloz1 = new int16_t { 42 };
//=
#include <cstdint>

short newshort_int = short(42);

auto foo1 = short {42}, foo2 = short {43}, foo3 = short {44};
short bar1, bar2, bar3;
short baz1 = 42, baz2 = 43, baz3 = 43;
short* blaz1 = new short {42}, *blaz2 = new short {43};
short* bloz1 = new short {42};

//!Templates
//@main.cpp
#include <cstdint>
#include <vector>

std::vector<std::int16_t> v_short_int { };
std::vector<std::uint16_t> v_ushort_int { };
//=
#include <cstdint>
#include <vector>

std::vector<short> v_short_int { };
std::vector<unsigned short> v_ushort_int { };

//!Templates unqualified
//@main.cpp
#include <cstdint>
#include <vector>

std::vector<int16_t> v_short_int { };
std::vector<uint16_t> v_ushort_int { };
//=
#include <cstdint>
#include <vector>

std::vector<short> v_short_int { };
std::vector<unsigned short> v_ushort_int { };

//!Template Special Cases
//@main.cpp
#include <cstdint>
#include <vector>
#include <functional>

std::vector<std::vector<std::vector<std::int16_t> > > v_vvshort_int { };

template<std::int16_t I>
void foo(std::int16_t s) {
    std::cout << s*I << '\n';
}

std::function<std::int16_t(std::int16_t, std::int16_t)> func =
        [](std::int16_t a, std::int16_t b) {
    return a+b;
};

std::function<std::int16_t()> func2 = [] () -> std::int16_t {
    return 42;
};

std::function<std::int16_t()> foo8 = [] {
    return 42;
};

std::function<void(std::int16_t, std::int16_t)> func3 =
        [] (std::int16_t a, std::int16_t b) {
};

template<typename T>
void bar(T t){
    std::cout << t << "\n";
}

std::function<std::int16_t(std::int16_t, std::int16_t)>* fooPointer =
    new std::function<
        
        std::int16_t(std::int16_t, std::int16_t)>(
                                        [=](std::int16_t a, std::int16_t b) -> std::int16_t {
            return a + b;
        }
    );
//=
#include <cstdint>
#include <vector>
#include <functional>

std::vector<std::vector<std::vector<short> > > v_vvshort_int { };

template<short I>
void foo(short s) {
    std::cout << s*I << '\n';
}

std::function<short(short, short)> func =
        [](short a, short b) {
    return a+b;
};

std::function<short()> func2 = [] () -> short {
    return 42;
};

std::function<short()> foo8 = [] {
    return 42;
};

std::function<void(short, short)> func3 =
        [] (short a, short b) {
};

template<typename T>
void bar(T t){
    std::cout << t << "\n";
}

std::function<short(short, short)>* fooPointer =
    new std::function<
        
        short(short, short)>(
                [=](short a, short b) -> short {
            return a + b;
        }
    );

//!Classes
//@main.cpp
#include <cstdint>

template<std::int16_t I>
class testClass {
    std::int16_t bar;


    friend std::int16_t foo(std::int16_t in) {
        return in * 42;
    }
    friend std::int16_t bar(std::int16_t in) {
        return in * in / (in + in);
    }
    std::int16_t strangename = 42;

public:
    testClass(std::int16_t i) {
        bar = i*I;
    }

};
//=
#include <cstdint>

template<short I>
class testClass {
    short bar;


    friend short foo(short in) {
        return in * 42;
    }
    friend short bar(short in) {
        return in * in / (in + in);
    }
    short strangename = 42;

public:
    testClass(short i) {
        bar = i*I;
    }

};

//!Functions
//@main.cpp
#include <cstdint>

std::int16_t f_short_int_short_int(std::int16_t) {
    auto retval = std::int16_t { 42 };
    return retval;
}
std::uint16_t f_ushort_int_ushort_int(std::uint16_t) {
    std::uint16_t retval { 42 };
    return retval;
}
std::int16_t f_sshort_int_sshort_int(std::int16_t) {
    std::int16_t retval { 42 };
    return retval;
}

//=
#include <cstdint>

short f_short_int_short_int(short) {
    auto retval = short {42};
    return retval;
}
unsigned short f_ushort_int_ushort_int(unsigned short) {
    unsigned short retval {42};
    return retval;
}
short f_sshort_int_sshort_int(short) {
    short retval {42};
    return retval;
}

//!Functions Special Cases
//@main.cpp
#include <cstdint>

void foovararg(std::int16_t...) {
}

auto f_auto_ushort_int(std::int16_t) -> std::uint16_t {
    std::uint16_t retval { 42 };
    return retval;
}

auto f_auto_noTrailing(std::int16_t c) {
    return c * c;
}

std::int16_t rudolf { 42 };

std::int16_t f_declaration_definition(std::int16_t arg);

std::int16_t f_declaration_definition(std::int16_t arg) {
    return arg * arg;
}

auto f_declaration_definition_trailing(std::int16_t arg, std::int16_t arg2) -> std::int16_t;

auto f_declaration_definition_trailing(std::int16_t arg, std::int16_t arg2) -> std::int16_t {
    std::int16_t res = arg + arg2;
    return arg * arg2 / res;
}

auto lambda = [](std::int16_t a, std::int16_t&& b) -> std::int16_t {
    std::int16_t retval = a + b;
    return retval;
};
//=
#include <cstdint>

void foovararg(short, ...) {
}

auto f_auto_ushort_int(short) -> unsigned short {
    unsigned short retval { 42 };
    return retval;
}

auto f_auto_noTrailing(short c) {
    return c * c;
}

short rudolf { 42 };

short f_declaration_definition(short arg);

short f_declaration_definition(short arg) {
    return arg * arg;
}

auto f_declaration_definition_trailing(short arg,
        short arg2) -> short;

auto f_declaration_definition_trailing(short arg,
        short arg2) -> short {
    short res = arg + arg2;
    return arg * arg2 / res;
}

auto lambda = [](short a, short&& b) -> short {
    short retval = a + b;
    return retval;
};

//!Function Main
//@main.cpp
#include <cstdint>

template<typename T>
int bar(T t){
    return 2*t;
}

int main(int argc, char** argv) {

    foo<12>(43);
    
    std::int16_t foo2 {42};

    bar<std::int16_t>(43);

}

//=
#include <cstdint>

template<typename T>
int bar(T t){
    return 2*t;
}

int main(int argc, char** argv) {

    foo<12>(43);
    
    short foo2 {42};

    bar<short>(43);

}


