//!Typedef and Usings
//@main.cpp
#include <cstdint>

using u_uint8t = std::uint8_t;
using u_int8t = std::int8_t;

typedef std::uint8_t td_uint8t;
typedef std::int8_t td_int8t;
//=
#include <cstdint>

using u_uint8t = unsigned char;
using u_int8t = char;

typedef unsigned char td_uint8t;
typedef char td_int8t;

//!Typedef and Usings unqualified
//@main.cpp
#include <cstdint>

using u_uint8t = uint8_t;
using u_int8t = int8_t;

typedef uint8_t td_uint8t;
typedef int8_t td_int8t;
//=
#include <cstdint>

using u_uint8t = unsigned char;
using u_int8t = char;

typedef unsigned char td_uint8t;
typedef char td_int8t;

//! Variables
//@main.cpp
#include <cstdint>

int castee{ 42 };

std::int8_t casted = (std::int8_t) castee;

std::int8_t casted1 = std::int8_t(castee);

std::int8_t casted2 = static_cast<std::int8_t>(castee);

std::int8_t *casted3 = reinterpret_cast<std::int8_t*>(&castee);

std::int8_t int8t { 12 };
std::uint8_t uint8t { 12 };
const std::int8_t cint8t { 12 };
const std::uint8_t cuint8t { 12 };
constexpr std::int8_t ceint8t { 12 };
constexpr std::uint8_t ceuint8t { 12 };
//=
#include <cstdint>

int castee { 42 };

char casted = (char) castee;

char casted1 = char(castee);

char casted2 = static_cast<char>(castee);

char *casted3 = reinterpret_cast<char*>(&castee);

char int8t { 12 };
unsigned char uint8t { 12 };
const char cint8t { 12 };
const unsigned char cuint8t { 12 };
constexpr char ceint8t { 12 };
constexpr unsigned char ceuint8t { 12 };

//! Variables unqualified
//@main.cpp
#include <cstdint>

int castee { 42 };

int8_t casted = (int8_t) castee;

int8_t casted1 = int8_t(castee);

int8_t casted2 = static_cast<int8_t>(castee);

int8_t *casted3 = reinterpret_cast<int8_t*>(&castee);

int8_t int8t { 12 };
uint8_t uint8t { 12 };
const int8_t cint8t { 12 };
const uint8_t cuint8t { 12 };
constexpr int8_t ceint8t { 12 };
constexpr uint8_t ceuint8t { 12 };
//=
#include <cstdint>

int castee { 42 };

char casted = (char) castee;

char casted1 = char(castee);

char casted2 = static_cast<char>(castee);

char *casted3 = reinterpret_cast<char*>(&castee);

char int8t { 12 };
unsigned char uint8t { 12 };
const char cint8t { 12 };
const unsigned char cuint8t { 12 };
constexpr char ceint8t { 12 };
constexpr unsigned char ceuint8t { 12 };

//!Variables Special Cases
//@main.cpp
#include <cstdint>

std::int8_t newChar = std::int8_t(42);

auto foo1 = std::int8_t { 42 }, foo2 = std::int8_t { 43 }, foo3 = std::int8_t { 44 };
std::int8_t bar1, bar2, bar3;
std::int8_t baz1 = 42, baz2 = 43, baz3 = 43;
std::int8_t* blaz1 = new std::int8_t { 42 }, *blaz2 = new std::int8_t { 43 };
std::int8_t* bloz1 = new std::int8_t { 42 };
//=
#include <cstdint>

char newChar = char(42);

auto foo1 = char { 42 }, foo2 = char { 43 }, foo3 = char { 44 };
char bar1, bar2, bar3;
char baz1 = 42, baz2 = 43, baz3 = 43;
char* blaz1 = new char { 42 }, *blaz2 = new char { 43 };
char* bloz1 = new char { 42 };

//!Variables Special Cases unqualified
//@main.cpp
#include <cstdint>

int8_t newChar = int8_t(42);

auto foo1 = int8_t { 42 }, foo2 = int8_t { 43 }, foo3 = int8_t { 44 };
int8_t bar1, bar2, bar3;
int8_t baz1 = 42, baz2 = 43, baz3 = 43;
int8_t* blaz1 = new int8_t { 42 }, *blaz2 = new int8_t { 43 };
int8_t* bloz1 = new int8_t { 42 };
//=
#include <cstdint>

char newChar = char(42);

auto foo1 = char { 42 }, foo2 = char { 43 }, foo3 = char { 44 };
char bar1, bar2, bar3;
char baz1 = 42, baz2 = 43, baz3 = 43;
char* blaz1 = new char { 42 }, *blaz2 = new char { 43 };
char* bloz1 = new char { 42 };

//!Templates
//@main.cpp
#include <cstdint>
#include <vector>

std::vector<std::int8_t> v_char { };
std::vector<std::uint8_t> v_uchar { };
//=
#include <cstdint>
#include <vector>

std::vector<char> v_char { };
std::vector<unsigned char> v_uchar { };

//!Templates unqualified
//@main.cpp
#include <cstdint>
#include <vector>

std::vector<int8_t> v_char { };
std::vector<uint8_t> v_uchar { };
//=
#include <cstdint>
#include <vector>

std::vector<char> v_char { };
std::vector<unsigned char> v_uchar { };

//!Template Special Cases
//@main.cpp
#include <cstdint>
#include <vector>
#include <functional>

std::vector<std::vector<std::vector<std::int8_t> > > v_vvchar { };

template<std::int8_t I>
void foo(std::int8_t s) {
    std::cout << s*I << '\n';
}

std::function<std::int8_t(std::int8_t, std::int8_t)> func =
        [](std::int8_t a, std::int8_t b) {
    return a+b;
};

std::function<std::int8_t()> func2 = [] () -> std::int8_t {
    return 42;
};

std::function<std::int8_t()> foo8 = [] {
    return 42;
};

std::function<void(std::int8_t, std::int8_t)> func3 =
        [] (std::int8_t a, std::int8_t b) {
};

template<typename T>
void bar(T t){
    std::cout << t << "\n";
}

std::function<std::int8_t(std::int8_t, std::int8_t)>* fooPointer =
    new std::function<
        
        std::int8_t(std::int8_t, std::int8_t)>(
                                        [=](std::int8_t a, std::int8_t b) -> std::int8_t {
            return a + b;
        }
    );
//=
#include <cstdint>
#include <vector>
#include <functional>

std::vector<std::vector<std::vector<char> > > v_vvchar { };

template<char I>
void foo(char s) {
    std::cout << s*I << '\n';
}

std::function<char(char, char)> func =
        [](char a, char b) {
    return a+b;
};

std::function<char()> func2 = [] () -> char {
    return 42;
};

std::function<char()> foo8 = [] {
    return 42;
};

std::function<void(char, char)> func3 =
        [] (char a, char b) {
};

template<typename T>
void bar(T t){
    std::cout << t << "\n";
}

std::function<char(char, char)>* fooPointer =
    new std::function<
        
        char(char, char)>(
                [=](char a, char b) -> char {
            return a + b;
        }
    );

//!Classes
//@main.cpp
#include <cstdint>

template<std::int8_t I>
class testClass {
    std::int8_t bar;


    friend std::int8_t foo(std::int8_t in) {
        return in * 42;
    }
    friend std::int8_t bar(std::int8_t in) {
        return in * in / (in + in);
    }
    std::int8_t strangename = 42;

public:
    testClass(std::int8_t i) {
        bar = i*I;
    }

};
//=
#include <cstdint>

template<char I>
class testClass {
    char bar;


    friend char foo(char in) {
        return in * 42;
    }
    friend char bar(char in) {
        return in * in / (in + in);
    }
    char strangename = 42;

public:
    testClass(char i) {
        bar = i*I;
    }

};

//!Functions
//@main.cpp
#include <cstdint>

std::int8_t f_char_char(std::int8_t) {
    auto retval = std::int8_t { 42 };
    return retval;
}
std::uint8_t f_uchar_uchar(std::uint8_t) {
    std::uint8_t retval { 42 };
    return retval;
}
std::int8_t f_schar_schar(std::int8_t) {
    std::int8_t retval { 42 };
    return retval;
}

//=
#include <cstdint>

char f_char_char(char) {
    auto retval = char { 42 };
    return retval;
}
unsigned char f_uchar_uchar(unsigned char) {
    unsigned char retval { 42 };
    return retval;
}
char f_schar_schar(char) {
    char retval { 42 };
    return retval;
}

//!Functions Special Cases
//@main.cpp
#include <cstdint>

void foovararg(std::int8_t...) {
}

auto f_auto_uchar(std::int8_t) -> std::uint8_t {
    std::uint8_t retval { 42 };
    return retval;
}

auto f_auto_noTrailing(std::int8_t c) {
    return c * c;
}

std::int8_t rudolf { 42 };

std::int8_t f_declaration_definition(std::int8_t arg);

std::int8_t f_declaration_definition(std::int8_t arg) {
    return arg * arg;
}

auto f_declaration_definition_trailing(std::int8_t arg, std::int8_t arg2) -> std::int8_t;

auto f_declaration_definition_trailing(std::int8_t arg, std::int8_t arg2) -> std::int8_t {
    std::int8_t res = arg + arg2;
    return arg * arg2 / res;
}

auto lambda = [](std::int8_t a, std::int8_t&& b) -> std::int8_t {
    std::int8_t retval = a + b;
    return retval;
};
//=
#include <cstdint>

void foovararg(char, ...) {
}

auto f_auto_uchar(char) -> unsigned char {
    unsigned char retval { 42 };
    return retval;
}

auto f_auto_noTrailing(char c) {
    return c * c;
}

char rudolf { 42 };

char f_declaration_definition(char arg);

char f_declaration_definition(char arg) {
    return arg * arg;
}

auto f_declaration_definition_trailing(char arg,
        char arg2) -> char;

auto f_declaration_definition_trailing(char arg,
        char arg2) -> char {
    char res = arg + arg2;
    return arg * arg2 / res;
}

auto lambda = [](char a, char&& b) -> char {
    char retval = a + b;
    return retval;
};

//!Function Main
//@main.cpp
#include <cstdint>

template<typename T>
int bar(T t){
    return 2*t;
}

int main(int argc, char** argv) {

    foo<12>(43);
    
    std::int8_t foo2 {42};

    bar<std::int8_t>(43);

}

//=
#include <cstdint>

template<typename T>
int bar(T t){
    return 2*t;
}

int main(int argc, char** argv) {

    foo<12>(43);
    
    char foo2 {42};

    bar<char>(43);

}


