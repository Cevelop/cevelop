//!ShouldRemoveDefinitionAndReplaceAllReferencesWithExpansion
//@main.cpp
#define /*$*/PI/*$*/ 3.1415

int main(int argc, const char* argv[] ) {
	return PI*PI;
}

//=


int main(int argc, const char* argv[] ) {
	return 3.1415*3.1415;
}

//!ShouldReplaceReferencesInAccrossAllFiles
//@main.cpp
#define /*$*/PI/*$*/ 3.1415

int main(int argc, const char* argv[] ) {
	return PI*PI;
}
//=


int main(int argc, const char* argv[] ) {
	return 3.1415*3.1415;
}
//@include.cpp
void function(void) {
	PI;
}
//=
//@include.cpp
void function(void) {
	3.1415;
}

//!ShouldApplyArgumentsWhenRefactoringFunctionLikeMacros
//@main.cpp
#define /*$*/SQUARE/*$*/(X) (X) * (X)

int main(int argc, const char* argv[] ) {
	SQUARE(3);
	SQUARE(6);
}

//=


int main(int argc, const char* argv[] ) {
	(3) * (3);
	(6) * (6);
}

//!ShouldExpandNestedMacros
//@main.cpp
#define PI 3.1415
#define /*$*/SQUARE/*$*/(X) (X) * (X)

int main(int argc, const char* argv[] ) {
	SQUARE(PI);
}

//=
#define PI 3.1415


int main(int argc, const char* argv[] ) {
	(3.1415) * (3.1415);
}

//!ShouldApplyRefactoringIfSelectionIsOverMacroDefinitionButAfterMacroName
//@main.cpp
#define PI 3.1415/*$*//*$*/

int main(int argc, const char* argv[] ) {
	return PI * PI;
}

//=


int main(int argc, const char* argv[] ) {
	return 3.1415 * 3.1415;
}

//!ShouldApplyRefactoringIfSelectionIsOverMacroDefinitionButBeforeMacroName
//@main.cpp
#de/*$*//*$*/fine PI 3.1415

int main(int argc, const char* argv[] ) {
	return PI * PI;
}

//=


int main(int argc, const char* argv[] ) {
	return 3.1415 * 3.1415;
}

