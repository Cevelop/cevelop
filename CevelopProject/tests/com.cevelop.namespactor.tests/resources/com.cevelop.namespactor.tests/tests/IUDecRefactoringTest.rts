//!IUDEC_NoSelection
//@.config
expectedNrOfFatalErrors=1
//@A1.cpp
int f(){}
//!IUDEC_InvalidSelection
//@.config
expectedNrOfFatalErrors=1
//@A1.cpp
/*$*/namespace/*$*/ A{}
using namespace A;
//!IUDEC_FnSingleFile
//@A1.cpp
namespace A{
	void a(){}
}
namespace B{
	void a(){}
}
using /*$*/A::a/*$*/;
int main() {
	A::a();
	a();
	B::a();
	return 0;
}
//=
namespace A{
	void a(){}
}
namespace B{
	void a(){}
}

int main() {
	A::a();
	A::a();
	B::a();
	return 0;
}
//!IUDEC_MultipleInheritance
//@A1.cpp
struct U {
	int f(int i);
	char f(char c);
};
struct A : public U {
  int f(int i){} 
  char f(char c); // shadow U::f(char)
};
struct B {
  double f(double d) {}
};
struct AB : public A, public B {
  using A::/*$*/f/*$*/; // make A::f(int) and A::f(char) accessible from outside, references are ab.f(1), ab.f('a');
  using B::f; // make B::f(double) accessible from outside
  char f(char c){} // hide A::f(char) (only if 'using A::f' in place)
};
int main(){
	AB ab;
	ab.f(1);// A::f(int) exact match, without 'using A::f' => ambiguous because multiple implicit conversions exist (B::f(double), AB::f(char)). Declarations are: A::f(int)
	ab.f('a'); // AB::f(char), declarations are: AB::f(char), A::f(char) => no change
	ab.f(3.14);// B::f(double) exact match, without 'using B::f' => ambiguous, because multiple implicit conversions exist (A::f(int), A::f(char), AB::f(char))
}
//=
struct U {
	int f(int i);
	char f(char c);
};
struct A : public U {
  int f(int i){} 
  char f(char c); // shadow U::f(char)
};
struct B {
  double f(double d) {}
};
struct AB : public A, public B {
  using B::f; // make B::f(double) accessible from outside
  char f(char c){} // hide A::f(char) (only if 'using A::f' in place)
};
int main(){
	AB ab;
	ab.A::f(1); // A::f(int) exact match, without 'using A::f' => ambiguous because multiple implicit conversions exist (B::f(double), AB::f(char)). Declarations are: A::f(int)
	ab.f('a'); // AB::f(char), declarations are: AB::f(char), A::f(char) => no change
	ab.f(3.14);// B::f(double) exact match, without 'using B::f' => ambiguous, because multiple implicit conversions exist (A::f(int), A::f(char), AB::f(char))
}
//!IUDEC_CompositesInNamespaces_NoQualificationRequired
//@A1.cpp
namespace B1{
	struct SB {
		void f(int i){}
	};
}
namespace B2{
	struct SB {
		void f(double d) {}
	};
}
int main(){
	using ::B2::/*$*/SB/*$*/;
	B2::SB b2;
	b2.f(3.14);

	B1::SB b1;
	b1.f(1);
}
//=
namespace B1{
	struct SB {
		void f(int i){}
	};
}
namespace B2{
	struct SB {
		void f(double d) {}
	};
}
int main(){
	B2::SB b2;
	b2.f(3.14);

	B1::SB b1;
	b1.f(1);
}
//!IUDEC_InlineIntoQualifiedName
//@A1.cpp
namespace A{
	struct S{
		struct S1{};
	};
}
using A::/*$*/S/*$*/;
S::S1 x;
//=
namespace A{
	struct S{
		struct S1{};
	};
}

A::S::S1 x;

//!IUDEC_Templates
//@A1.cpp
#include "templates.h"
using namespace A;
using namespace B;
using namespace B::C;
using C::/*$*/CC/*$*/;
int main() {
	CC<char> c1;
	A::B::C::CC<char> c2;
	CC<CC2> t1;
	A::B::C::CC<CC2> t2;
	CC<A::B::C::CC2> t3;
	CC<CC<char> > tt1;
	A::B::C::CC<CC<int> > tt2;
	CC<A::B::C::CC<float> > tt3;
	CC<CC<C2::SC2<CC<char> > > > ttt1;
	return 0;
}
void f(CC<char> p){}
//=
#include "templates.h"
using namespace A;
using namespace B;
using namespace B::C;

int main() {
	C::CC<char> c1;
	A::B::C::CC<char> c2;
	C::CC<CC2> t1;
	A::B::C::CC<CC2> t2;
	C::CC<A::B::C::CC2> t3;
	C::CC<C::CC<char> > tt1;
	A::B::C::CC<C::CC<int> > tt2;
	C::CC<A::B::C::CC<float> > tt3;
	C::CC<C::CC<C2::SC2<C::CC<char> > > > ttt1;
	return 0;
}
void f(C::CC<char> p) {
}

//@templates.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C2{
			template<class X>
			struct SC2{};
		}
		namespace C{
			template<class T>
			class CC{
			public:
				void set(T);
				T get();
				void doit(C2::SC2<T> &);
			};
			struct CC2{};
		}
	}
}

#endif /* A1_H_ */
//!IUDEC_FreeTemplateFunction_251
//@A1.cpp
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}

template <class T>
T getMax(T a, T b){return a;}

int main(){
	using namespace AA;
	using AA::/*$*/getMax/*$*/;
	getMax(1, 2); // does not work in test mode, works only in eclipse
	getMax<int>(1, 2);
	return 0;
}
//=
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}

template <class T>
T getMax(T a, T b){return a;}

int main(){
	using namespace AA;
	AA::getMax(1, 2); // does not work in test mode, works only in eclipse
	AA::getMax<int>(1, 2);
	return 0;
}
//!IUDEC_FreeTemplateFunction_PS1
//@A1.cpp
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}

int main(){
	using AA::/*$*/getMax/*$*/;
	getMax(1, 2);
	getMax<int>(1, 2);
	return 0;
}
//=
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}

int main(){
	AA::getMax(1, 2);
	AA::getMax<int>(1, 2);
	return 0;
}
//!IUDEC_UDECIdClassName_239
//@A1.cpp
namespace AA{
	template <typename T>
	struct S{
		void a(){}
		template<class F> void t(){}
	};
	struct U{
		void a(){}
		template<class F> void t(){}
	};
	template <typename C>
	struct T : public S<char>, public U{
		using S<char>::/*$*/a/*$*/;
		using U::t;
		void b(){
			a();
			t<int>();
		}
	};
}
//=
namespace AA{
	template <typename T>
	struct S{
		void a(){}
		template<class F> void t(){}
	};
	struct U{
		void a(){}
		template<class F> void t(){}
	};
	template <typename C>
	struct T : public S<char>, public U{
		using U::t;
		void b(){
		S<char>::a();
			t<int>();
		}
	};
}
//!IUDEC_OnlyDependentNodesShouldBeChanged
//@AA.cpp
#include "vector.hpp"
int main(){
using namespace std;
vector<vector<int> > v;
}
using std::/*$*/ve/*$*/ctor;
vector<double> vv;
//=
#include "vector.hpp"
int main(){
using namespace std;
vector<vector<int> > v;
}

std::vector<double> vv;

