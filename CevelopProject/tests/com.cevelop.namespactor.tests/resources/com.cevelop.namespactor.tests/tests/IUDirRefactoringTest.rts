//!IUDIR_DirSingleFile
//@A1.cpp
namespace A{
	void a(){}
	namespace AA{
		void aa(){}
	}
}
/*$*/using namespace A/*$*/;
int main() {
	A::a();
	a();
	AA::aa();
	return 0;
}
//=
namespace A{
	void a(){}
	namespace AA{
		void aa(){}
	}
}

int main() {
	A::a();
	A::a();
	A::AA::aa();
	return 0;
}
//!IUDIR_NamespaceDefSpanMultipleFiles
//@A2.cpp
#include "A1.h"
namespace A{
	void a2(){}
	namespace AA{
		void aa1(){}
	}
}
void A::a1(){}
int main(){
	using namespace /*$*/A/*$*/;
	a2();
	a1();
}
//=
#include "A1.h"
namespace A{
	void a2(){}
	namespace AA{
		void aa1(){}
	}
}
void A::a1(){}
int main(){
	A::a2();
	A::a1();
}
//@A1.h
namespace A{
	void a1();
}
//!IUDIR_RecursiveMultipleFiles_TODO
//@.config
skipTest=0
//@A.cpp
#include "B.cpp"
namespace A{
	struct SA{ // collected name
		struct SSA{}; // not collected
	};
	namespace AA{} // collected name
}

int main(){
	using namespace /*$*/A/*$*/;
	SA sa { }; // qualified with A
	SB sb { }; // qualified with A
	SB2 sb2 { };  // qualified with A
	return 0;
}
//=
#include "B.cpp"
namespace A{
	struct SA{ // collected name
		struct SSA{}; // not collected
	};
	namespace AA{} // collected name
}

int main(){
	A::SA sa { }; // qualified with A
	A::SB sb { }; // qualified with A
	A::SB2 sb2 { };  // qualified with A
	return 0;
}
//@B.cpp
namespace B{
	struct SB2{}; // collected name
}
namespace A{
	using namespace B; // udir B. starts recursive search of B
	struct SB{}; // collected name
}
//!IUDIR_AliasSingleFile
//@A1.cpp
namespace A{
	void a(){}
	namespace AA{
		void aa(){}
	}
}
using namespace /*$*/A/*$*/;
namespace Y = AA;
namespace Z = A::AA;
int main(){
	Z::aa();
	return 0;
}
//=
namespace A{
	void a(){}
	namespace AA{
		void aa(){}
	}
}

namespace Y = A::AA;
namespace Z = A::AA;
int main(){
	Z::aa();
	return 0;
}
//!IUDIR_NoSelection
//@.config
expectedNrOfFatalErrors=1
//@A1.cpp
/*empty text selextion in test is on 0,0 */
using namespace A;
//!IUDIR_InvalidSelection
//@.config
expectedNrOfFatalErrors=1
//@A1.cpp
using namespace A;
int /*$*/main()/*$*/{}
//!IUDIR_NestedNames
//@A1.cpp
namespace A{
	namespace B{
		namespace C{
			void f(){}
		}
	}
}
using namespace A;
using namespace /*$*/B/*$*/;
using A::B::C::f;
namespace X = C;
namespace Y = A::B::C;
int main(){
	C::f();
	B::C::f();
	return 0;
}
//=
namespace A{
	namespace B{
		namespace C{
			void f(){}
		}
	}
}
using namespace A;
using A::B::C::f;
namespace X = B::C;
namespace Y = A::B::C;
int main(){
	B::C::f();
	B::C::f();
	return 0;
}
//!IUDIR_HeaderFile
//@B.h
namespace A{
	void a(){}
}
using namespace /*$*/A/*$*/;
//=
namespace A{
	void a(){}
}

//@B.cpp
#include "B.h"
int main(){
	a();
}
//=
#include "B.h"
int main(){
	A::a();
}
//!IUDIR_HeaderFileExtended
//@B.h
namespace A{
	struct SA1{
		static void a();
	};
	void a();
}
using namespace /*$*/A/*$*/;
//=
namespace A{
	struct SA1{
		static void a();
	};
	void a();
}

//@B.cpp
#include "B.h"
void SA1::a() {
}
void A::a(){}
int main(){
	SA1 s;
	SA1::a();
	a();
	return 0;
}
//=
#include "B.h"
void A::SA1::a() {
}
void A::a(){}
int main(){
	A::SA1 s;
	A::SA1::a();
	A::a();
	return 0;
}
//!IUDIR_InlineQualifiedName
//@A.cpp
namespace AA{
	namespace BB{
		namespace CC{
			void c(){}
		}
	}
}
using namespace AA;
using namespace /*$*/BB::CC/*$*/;
using namespace BB;
using namespace BB::CC;
void inlinetest(){
	CC::c();
	BB::CC::c();
	c();
}
//=
namespace AA{
	namespace BB{
		namespace CC{
			void c(){}
		}
	}
}
using namespace AA;
using namespace BB;
using namespace BB::CC;
void inlinetest(){
	CC::c();
	BB::CC::c();
	BB::CC::c();
}
//!IUDIR_AnoNestedNS
//@A.cpp
namespace A{
	namespace {
		namespace C{
			void c(){}
		}
	}
}
using namespace /*$*/A::C/*$*/;
using namespace A;
using namespace C;
void anotest(){
	C::c();
	c();
}
//=
namespace A{
	namespace {
		namespace C{
			void c(){}
		}
	}
}

using namespace A;
using namespace C;
void anotest(){
	C::c();
	A::C::c();
}
//!IUDIR_WithComments
//@A.cpp
// single line comment
/* multi line comment on single line */
/* multi
line
comment */
namespace A{
    void a(){}
}
int main(){
    using namespace /*$*/A/*$*/;/* behind to remove */ // behind to remove
    a();
}
//=
// single line comment
/* multi line comment on single line */
/* multi
line
comment */
namespace A{
    void a(){}
}
int main(){
	// behind to remove
	A::a();
}
//!IUDIR_CompositeTypesAndParameters
//@A1.cpp
#include "A1.h"
using namespace A;
using namespace /*$*/B::C/*$*/;

void CC::c(SC i){}

void inlinetest(){
	CC i;
	SC s;
	i.c(s);
}
//=
#include "A1.h"
using namespace A;

void B::C::CC::c(B::C::SC i) {
}

void inlinetest(){
	B::C::CC i;
	B::C::SC s;
	i.c(s);
}
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C{
			struct SC{};
			class CC{
			public:
				void c(SC);
			};
		}
	}
}
#endif /* A1_H_ */
//!IUDIR_PreventReplacementOfReferencesInSourceNamespace_#233
//@A1.cpp
namespace C {
    struct SC{};
}
using namespace /*$*/C/*$*/;
namespace C {
    class CC{
        void c(SC);
    };
}
//=
namespace C {
    struct SC{};
}

namespace C {
    class CC{
        void c(SC);
    };
}
//!IUDIR_Templates
//@A1.cpp
#include "A1.h"
using namespace A;
using namespace B;
using namespace /*$*/B::C/*$*/;

int main() {
	CC<char> c1;
	A::B::C::CC<char> c2;
	CC<CC2> t1;
	A::B::C::CC<CC2> t2;
	CC<A::B::C::CC2> t3;
	CC<CC<char> > tt1;
	A::B::C::CC<CC<int> > tt2;
	CC<A::B::C::CC<float> > tt3;
	CC<CC<CC<CC<char> > > > ttt1;
	C2::SC2<char> s;
	C2::SC2<C2::SC2<char> > s1;
	return 0;
}
//=
#include "A1.h"
using namespace A;
using namespace B;

int main() {
	B::C::CC<char> c1;
	A::B::C::CC<char> c2;
	B::C::CC<B::C::CC2> t1;
	A::B::C::CC<B::C::CC2> t2;
	B::C::CC<A::B::C::CC2> t3;
	B::C::CC<B::C::CC<char> > tt1;
	A::B::C::CC<B::C::CC<int> > tt2;
	B::C::CC<A::B::C::CC<float> > tt3;
	B::C::CC<B::C::CC<B::C::CC<B::C::CC<char> > > > ttt1;
	C2::SC2<char> s;
	C2::SC2<C2::SC2<char> > s1;
	return 0;
}
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C2{
			template<class X>
			struct SC2{};
		}
		namespace C{
			template<class T>
			class CC{
			public:
				void set(T);
				T get();
				void doit(C2::SC2<T> &);
			};
			struct CC2{};
		}
	}
}

#endif /* A1_H_ */
//!IUDIR_Templates_1
//@A1.cpp
#include "A1.h"
using namespace A;
using namespace B;
using namespace /*$*/B::C/*$*/;

int main() {
	CC<A::B::C::CC<float> > tt3;
}
//=
#include "A1.h"
using namespace A;
using namespace B;

int main() {
	B::C::CC<A::B::C::CC<float> > tt3;
}
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C2{
			template<class X>
			struct SC2{};
		}
		namespace C{
			template<class T>
			class CC{
			public:
				void set(T);
				T get();
				void doit(C2::SC2<T> &);
			};
			struct CC2{};
		}
	}
}

#endif /* A1_H_ */
//!IUDIR_Templates_MemberFunction_Definitions_Extern
//@.config
skipTest=0
//@A1.cpp
#include "A1.h"
using namespace A;
using namespace B;
using namespace /*$*/B::C/*$*/;

template<class T> void CC<T>::set(T o) {
}
template<class T> T CC<T>::get() {
}
template<class T> void CC<T>::doit(C2::SC2<T> &o) {
}

int main(){
	return 0;
}
//=
#include "A1.h"
using namespace A;
using namespace B;

template<class T> void B::C::CC<T>::set(T o) {
}
template<class T> T B::C::CC<T>::get() {
}
template<class T> void B::C::CC<T>::doit(C2::SC2<T> &o) {
}

int main(){
	return 0;
}
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C2{
			template<class X>
			struct SC2{};
		}
		namespace C{
			template<class T>
			class CC{
			public:
				void set(T);
				T get();
				void doit(C2::SC2<T> &);
			};
			struct CC2{};
		}
	}
}

#endif /* A1_H_ */
//!IUDIR_ApplyToLocalScopeOnly
//@A1.cpp
namespace A{
	void a(){}
}
int main(){
	a();
	if(true){
		using namespace /*$*/A/*$*/;
		a();
		if(true){
			a();
		}
	}
}
int main2(){
	using namespace A;
	a();
	if(true){
		a();
	}
}
//=
namespace A{
	void a(){}
}
int main(){
	a();
	if(true){
		A::a();
		if(true){
			A::a();
		}
	}
}
int main2(){
	using namespace A;
	a();
	if(true){
		a();
	}
}
//!IUDIR_ClassTwoFilesDefinition
//@A1.cpp
#include "A1.h"
using namespace /*$*/A/*$*/;
IUDIRTest::IUDIRTest() {}
IUDIRTest::~IUDIRTest() {}
void IUDIRTest::f(){
	i = 0;
}
//=
#include "A1.h"

A::IUDIRTest::IUDIRTest() {
}
A::IUDIRTest::~IUDIRTest() {
}
void A::IUDIRTest::f() {
	i = 0;
}
//@A1.h
#ifndef A1_H_
#define A1_H_
namespace A{
class IUDIRTest {
public:
	IUDIRTest();
	virtual ~IUDIRTest();
	void f();
private:
	int i;
};
}
#endif /* A1_H_ */
//!IUDIR_TestInheritance
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	struct AA;
}
namespace C {
	using namespace /*$*/A/*$*/;
	class CC: AA {};
}

#endif /* A1_H_ */
//=
#ifndef A1_H_
#define A1_H_

namespace A{
	struct AA;
}
namespace C {

class CC: A::AA {
};
}

#endif /* A1_H_ */
//!IUDIR_TransitiveUDIR_TODO
//@.config
skipTest=0
//@A1.cpp
namespace B{}
namespace A{
	//using namespace B;
	void a(){}
}
namespace B{
	using namespace A;
    void b(){
    	a();
    }
}
int main(){
	using namespace /*$*/B/*$*/;
	a();
	A::a();
	b();
    return 0;
}
//=
namespace B{}
namespace A{
	//using namespace B;
	void a(){}
}
namespace B{
	using namespace A;
    void b(){
    	a();
    }
}
int main(){
	B::a();
	A::a();
	B::b();
    return 0;
}
//!IUDIR_Typedefs
//@A1.cpp
namespace A{
	typedef int integer;

	struct StructA1;
	struct StructA2{
		void f(){};
		struct StructA21{
			void f(){}
		};
	};

	typedef struct Struct1 S1;
	struct Struct1;
	struct Struct1{
		void f(){}
	};

	struct Struct2{
		void f(){}
	};
	typedef struct Struct2 S2;

	typedef struct Struct3{
		void f(){}
	} S3;

	typedef struct{
		void f(){}
	} S4;
}

int main(){
	using namespace /*$*/A/*$*/;
	typedef struct StructA1 SA1;
	typedef struct StructA2 SA2;
	typedef struct StructA2::StructA21 SA21;
	typedef struct Struct1 S1;
	typedef struct Struct2 S2;
	typedef struct Struct3 S3;
	typedef struct Struct4 S4;
	integer i = 0;
	return 0;
}
//=
namespace A{
	typedef int integer;

	struct StructA1;
	struct StructA2{
		void f(){};
		struct StructA21{
			void f(){}
		};
	};

	typedef struct Struct1 S1;
	struct Struct1;
	struct Struct1{
		void f(){}
	};

	struct Struct2{
		void f(){}
	};
	typedef struct Struct2 S2;

	typedef struct Struct3{
		void f(){}
	} S3;

	typedef struct{
		void f(){}
	} S4;
}

int main(){
	typedef struct A::StructA1 SA1;
	typedef struct A::StructA2 SA2;
	typedef struct A::StructA2::StructA21 SA21;
	typedef struct A::Struct1 S1;
	typedef struct A::Struct2 S2;
	typedef struct A::Struct3 S3;
	typedef struct Struct4 S4;
	A::integer i = 0;
	return 0;
}
//!IUDIR_OperatorOverloading
//@A1.cpp
namespace A{
	class string{
	public:
		string(char*){ }
	};
	class ostream{};
}

namespace OP{
	A::ostream& operator<<(A::ostream&, const A::string&){}
}

int main(){
	using namespace A;
	using namespace /*$*/OP/*$*/;
	string s("s...");
	ostream cout;
	operator <<(cout, s);
}
//=
namespace A{
	class string{
	public:
		string(char*){ }
	};
	class ostream{};
}

namespace OP{
	A::ostream& operator<<(A::ostream&, const A::string&){}
}

int main(){
	using namespace A;
	string s("s...");
	ostream cout;
	OP::operator <<(cout, s);
}
//!IUDIR_OperatorOverloadingImplicitCall_TODO
//@.config
skipTest=0
expectedNrOfWarnings=0
//@A1.cpp
namespace A{
	class string{
	public:
		string(char*){ }
	};
	class ostream{};
}

namespace OP{
	A::ostream& operator<<(A::ostream&, const A::string&){}
}

int main(){
	using namespace A;
	using namespace /*$*/OP/*$*/;
	string s("s...");
	ostream cout;
	operator <<(cout, s);
	cout << s;
}
//=
namespace A{
	class string{
	public:
		string(char*){ }
	};
	class ostream{};
}

namespace OP{
	A::ostream& operator<<(A::ostream&, const A::string&){}
}

int main(){
	using namespace A;
	string s("s...");
	ostream cout;
	OP::operator <<(cout, s);
	cout << s;
}
//!IUDIR_QualifyNestedStructName
//@A1.cpp
namespace Collections{
	class List {
	public:
		struct Element{
			int value;
			Element(int value) : value(value){}
		};
	};
}
void iudir(){
	using namespace /*$*/Collections/*$*/; // IUDIR
	List::Element e1(23);
}
//=
namespace Collections{
	class List {
	public:
		struct Element{
			int value;
			Element(int value) : value(value){}
		};
	};
}
void iudir(){
	Collections::List::Element e1(23);
}
//!IUDIR_IgnoreUnIncludedFiles_SelectionInParent
//@A1.cpp
#include "A1.h";
namespace A{
	void f(){}
}
using namespace /*$*/A/*$*/;
int main() {
	f();
	f1();
}
//=
#include "A1.h";
namespace A{
	void f(){}
}

int main() {
	A::f();
	A::f1();
}
//@A1.h
namespace A{
	 void f1(){}
}
using namespace A;
void fn1(){
	f1();
}
//=
namespace A{
	 void f1(){}
}
using namespace A;
void fn1(){
	A::f1();
}
//@NeverIncluded.h
namespace A{
	void f2{}
}
using namespace A;
void fn2(){
	f2();
}
//!IUDIR_IgnoreUnIncludedFiles_SelectionInChild
//@A1.h
namespace A{
	 void f1(){}
}
using namespace /*$*/A/*$*/;
void fn1() {
	f1();
}
//=
namespace A{
	 void f1(){}
}

void fn1() {
	A::f1();
}
//@A1.cpp
#include "A1.h";
namespace A{
	void f(){}
}
using namespace A;
int main() {
	f();
	f1();
}
//=
#include "A1.h";
namespace A{
	void f(){}
}
using namespace A;
int main() {
	A::f();
	A::f1();
}
//@NeverIncluded.h
namespace A{
	void f2{}
}
using namespace A;
void fn2(){
	f2();
}
//!IUDIR_FunctionTemplate
//@A1.cpp
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}
int main(){
	using namespace /*$*/AA/*$*/;
	getMax(1, 2); 
	getMax<int>(1, 2);
	return 0;
}
//=
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}
int main(){
	AA::getMax(1, 2); 
	AA::getMax<int>(1, 2);
	return 0;
}
//!IUDIR_ExternalInlineNamespace
//@A1.cpp
#include <vector.hpp>
using namespace /*$*/std/*$*/;
int main() {
   vector<int> v;
}
vector<vector<double>> vv;
//=
#include <vector.hpp>

int main() {
	std::vector<int> v;
}
std::vector<std::vector<double>> vv;

//!IUDIR_ExternalInlineNamespace_directiveInMiddle
//@A1.cpp
#include <vector.hpp>
int main() {
	using std::vector;
	vector<int> v;
}
using namespace /*$*/std/*$*/;
vector<vector<double>> vv;
//=
#include <vector.hpp>
int main() {
	using std::vector;
	vector<int> v;
}

std::vector<std::vector<double>> vv;

//!IUDIR_ArrayTemplate
//@A1.cpp
#include <array.hpp>
using namespace /*$*/std/*$*/;
int main() {
	array<int, 4> v;
}
array<array<double, 4>, 2> vv;
//=
#include <array.hpp>

int main() {
	std::array<int, 4> v;
}
std::array<std::array<double, 4>, 2> vv;

//!IUDIR_ExternalInlineNamespace_ArrayTemplate
//@A1.cpp
#include <array.hpp>
int main() {
	using std::array;
	array<int, 42> v;
}
using namespace /*$*/std/*$*/;
array<array<double, 4>, 2> vv;
//=
#include <array.hpp>
int main() {
	using std::array;
	array<int, 42> v;
}

std::array<std::array<double, 4>, 2> vv;

//!IUDIR_VectorOfString
//@A1.cpp
#include <vector.hpp>
using namespace /*$*/std/*$*/;
int main() {
   vector<string> v;
}
vector<vector<string>> vv;
//=
#include <vector.hpp>

int main() {
	std::vector<std::string> v;
}
std::vector<std::vector<std::string>> vv;

//!IUDIR Nested Name in Template ID
//@main.cpp
namespace NS {
  namespace Nested {
    struct S{};
    template<typename T>
    struct Tpl{};
  }
}
using namespace /*$*/NS/*$*/;

void foo() {
  Nested::Tpl<Nested::S> tpl{};
}
//=
namespace NS {
  namespace Nested {
    struct S{};
    template<typename T>
    struct Tpl{};
  }
}

void foo() {
	NS::Nested::Tpl<NS::Nested::S> tpl { };
}