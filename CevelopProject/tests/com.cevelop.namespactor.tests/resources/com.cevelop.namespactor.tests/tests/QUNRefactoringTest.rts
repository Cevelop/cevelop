//!QUN_NoSelection
//@.config
expectedNrOfFatalErrors=1
//@A1.cpp
int f(){}
//!QUN_InvalidSelection_Definition
//@.config
expectedNrOfFatalErrors=1
//@A1.cpp
namespace A{}
using namespace A;
int /*$*/main()/*$*/{}
//!QUN_InvalidSelection_QualifiedName
//@.config
expectedNrOfFatalErrors=1
//@A1.cpp
namespace A{ 
	namespace B{
		void f(){}
	}
}
using namespace A;
/*$*/B/*$*/::f();
//!QUN_NestedName
//@A1.cpp
namespace A{
	void a(){}
}
int main(){
	using namespace A;
	/*$*/a()/*$*/;
	return 0;
}
//=
namespace A{
	void a(){}
}
int main(){
	using namespace A;
	A::a();
	return 0;
}
//!QUN_UDECRefName
//@A1.cpp
namespace A{
	void a(){}
}
using A::a;
int main(){
	/*$*/a()/*$*/;
	return 0;
}
//=
namespace A{
	void a(){}
}
using A::a;
int main(){
	A::a();
	return 0;
}
//!QUN_Parameter
//@.config
skipTest=0
//@A1.cpp
namespace A{
	struct S{};
}
using namespace A;
void a(/*$*/S/*$*/ s1){
}
//=
namespace A{
	struct S{};
}
using namespace A;
void a(A::S s1) {
}
//!QUN_TemplateSimpleName
//@A1.cpp
#include "A1.h"
using namespace A::B::C;

int main(){
	/*$*/CC/*$*/<char> c1;
	return 0;
}
//=
#include "A1.h"
using namespace A::B::C;

int main(){
	A::B::C::CC<char> c1;
	return 0;
}
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C2{
			template<class X>
			struct SC2{};
		}
		namespace C{
			template<class T>
			class CC{
			public:
				void set(T);
				T get();
				void doit(C2::SC2<T> &);
			};
			struct CC2{};
		}
	}
}

#endif /* A1_H_ */
//!QUN_TemplateNestedName
//@.config
skipTest=1
//@A1.cpp
#include "A1.h"
using namespace A::B::C;

int main(){
	CC</*$*/CC2/*$*/> c1;
	return 0;
}
//=
#include "A1.h"
using namespace A::B::C;

int main(){
	CC<A::B::C::CC2> c1;
	return 0;
}
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C2{
			template<class X>
			struct SC2{};
		}
		namespace C{
			template<class T>
			class CC{
			public:
				void set(T);
				T get();
				void doit(C2::SC2<T> &);
			};
			struct CC2{};
		}
	}
}

#endif /* A1_H_ */
//!QUN_TemplateNestedAndOuterName
//@A1.cpp
#include "A1.h"
using namespace A::B::C;

int main(){
	/*$*/CC/*$*/<CC2> c1;
	return 0;
}
//=
#include "A1.h"
using namespace A::B::C;

int main(){
	A::B::C::CC<CC2> c1;
	return 0;
}
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C2{
			template<class X>
			struct SC2{};
		}
		namespace C{
			template<class T>
			class CC{
			public:
				void set(T);
				T get();
				void doit(C2::SC2<T> &);
			};
			struct CC2{};
		}
	}
}

#endif /* A1_H_ */
//!QUN_TemplateNestedAlreadyQualified
//@A1.cpp
#include "A1.h"
using namespace A::B::C;

int main(){
	/*$*/CC/*$*/<A::B::C::CC2> t3;
	return 0;
}
//=
#include "A1.h"
using namespace A::B::C;

int main(){
	A::B::C::CC<A::B::C::CC2> t3;
	return 0;
}
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C2{
			template<class X>
			struct SC2{};
		}
		namespace C{
			template<class T>
			class CC{
			public:
				void set(T);
				T get();
				void doit(C2::SC2<T> &);
			};
			struct CC2{};
		}
	}
}

#endif /* A1_H_ */
//!QUN_Template4LevelNesting_NotAllRequireQualification
//@A1.cpp
#include "A1.h"
using namespace A::B::C;
using namespace A::B;

int main(){
	/*$*/CC/*$*/<CC<C2::SC2<CC<char> > > > ttt1;
	return 0;
}
//=
#include "A1.h"
using namespace A::B::C;
using namespace A::B;

int main(){
	A::B::C::CC<CC<C2::SC2<CC<char> > > > ttt1;
	return 0;
}
//@A1.h
#ifndef A1_H_
#define A1_H_

namespace A{
	namespace B{
		namespace C2{
			template<class X>
			struct SC2{};
		}
		namespace C{
			template<class T>
			class CC{
			public:
				void set(T);
				T get();
				void doit(C2::SC2<T> &);
			};
			struct CC2{};
		}
	}
}

#endif /* A1_H_ */
//!QUN_Operators
//@A1.cpp
namespace A{
	class string{
	public:
		string(char*){ }
	};
	class ostream{};
}

namespace OP{
	A::ostream& operator<<(A::ostream&, const A::string&){}
}

int main(){
	using namespace A;
	using namespace OP;

	string s("s...");
	ostream cout;
	operator /*$*/<</*$*/(cout, s);
}
//=
namespace A{
	class string{
	public:
		string(char*){ }
	};
	class ostream{};
}

namespace OP{
	A::ostream& operator<<(A::ostream&, const A::string&){}
}

int main(){
	using namespace A;
	using namespace OP;

	string s("s...");
	ostream cout;
	OP::operator <<(cout, s);
}
//!QUN_QualifyNestedStructName
//@A1.cpp
namespace A{
	struct S{
		struct S1{
			void f(){
				/*$*/S1/*$*/ s;
			}
		};
	};
}
//=
namespace A{
	struct S{
		struct S1{
			void f(){
			A::S::S1 s;
			}
		};
	};
}
//!QUN_TemplateFunctionCallWithUDEC
//@A1.cpp
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}

template <class T>
T getMax(T a, T b){return a;}

int main(){
	using namespace AA;
	using AA::getMax;
	/*$*/getMax/*$*/(1, 2);
	return 0;
}
//=
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}

template <class T>
T getMax(T a, T b){return a;}

int main(){
	using namespace AA;
	using AA::getMax;
	AA::getMax(1, 2);
	return 0;
}
//!QUN_TemplateFunctionCallNoUDEC
//@A1.cpp
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}
int main(){
	using namespace AA;
	/*$*/getMax/*$*/(1, 2);
	return 0;
}
//=
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}
int main(){
	using namespace AA;
	AA::getMax(1, 2);
	return 0;
}
//!QUN_TemplateFunctionCallWithTemplateArgument
//@A1.cpp
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}
int main(){
	using namespace AA;
	/*$*/getMax/*$*/<int>(1, 2);
	return 0;
}
//=
namespace AA{
	template <class T>
	T getMax(T a, T b){return a;}
}
int main(){
	using namespace AA;
	AA::getMax<int>(1, 2);
	return 0;
}
//!QUN_VectorVectorTemplate
//@.config
skipTest=1
//@Vector.cpp
namespace std {
template <class T>
struct vector{};
} 
int main(){
	using namespace std;
	vector</*$*/vector/*$*/<vector<int> > > v;
}
//=
namespace std {
template <class T>
struct vector{};
} 
int main(){
	using namespace std;
	vector<std::vector<vector<int> > > v;
}
//!QUN_VectorExternal
//@.config
skipTest=0
//@VectorIncluded.cpp
#include <vector.hpp>
int main(){
using namespace std;
vector</*$*/vector/*$*/<int> > v;
}
//=
#include <vector.hpp>
int main(){
using namespace std;
	vector<std::vector<int> > v;
}
