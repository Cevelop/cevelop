//!Test Free Function Works
//@.config
markerLines=2
//@B.cpp
void func() {
	blah();
}
//=
void blah() {
}

void func() {
	blah();
}
//!Test Free Int
//@.config
markerLines=2
//@C.cpp
void func() {
	int x = foo();
}
//=
int foo() {
	return int();
}

void func() {
	int x = foo();
}
//!Test Free Own Class
//@.config
markerLines=6
//@D.cpp
struct A
{
};

void func() {
	A a = foo();
}
//=
struct A
{
};

A foo() {
	return A();
}

void func() {
	A a = foo();
}
//!Test Simple Macro
//@.config
markerLines=4
//@E.cpp
#define MACRO(f) f();

void func() {
	MACRO(foo());
}
//=
#define MACRO(f) f();

void foo() {
}

void func() {
	MACRO(foo());
}
//!Test Advanced Macro
//@.config
markerLines=7
//@F.cpp
void bar() {
}

#define MACRO(f) bar(f())

void func() {
	MACRO(foo());
}
//=
void bar() {
}

#define MACRO(f) bar(f())

void foo() {
}

void func() {
	MACRO(foo());
}
//!Test CUTE Macro Function Creation ASSERT
//@.config
markerLines=18
//@Test.cpp
#include <string>
namespace cute{
	struct test_failure {
		std::string reason;
		std::string filename;
		int lineno;

		test_failure(std::string const &r,char const *f, int line)
		:reason(r),filename(f),lineno(line)
		{   }
		char const * what() const { return reason.c_str(); }
	};
}
#define ASSERTM(msg,cond) if (!(cond)) throw cute::test_failure((msg),__FILE__,__LINE__)
#define ASSERT(cond) ASSERTM(#cond,cond)

void test(){
	ASSERT(function());
}
//=
#include <string>
namespace cute{
	struct test_failure {
		std::string reason;
		std::string filename;
		int lineno;

		test_failure(std::string const &r,char const *f, int line)
		:reason(r),filename(f),lineno(line)
		{   }
		char const * what() const { return reason.c_str(); }
	};
}
#define ASSERTM(msg,cond) if (!(cond)) throw cute::test_failure((msg),__FILE__,__LINE__)
#define ASSERT(cond) ASSERTM(#cond,cond)

bool function() {
	return bool();
}

void test(){
	ASSERT(function());
}
//!Test CUTE Macro Function Creation ASSERT_EQUALS
//@.config
markerLines=17
//@Test.cpp
namespace cute {
	template <typename ExpectedValue, typename ActualValue>
		void assert_equal(ExpectedValue const &expected
					,ActualValue const &actual
					,char const *msg
					,char const *file
					,int line) {
			// unfortunately there is no is_integral_but_not_bool_or_enum
			typedef typename impl_place_for_traits::is_integral<ExpectedValue> exp_integral;
			typedef typename impl_place_for_traits::is_integral<ActualValue> act_integral;
	}
}
#define ASSERT_EQUALM(msg,expected,actual) cute::assert_equal((expected),(actual),msg,__FILE__,__LINE__)
#define ASSERT_EQUAL(expected,actual) ASSERT_EQUALM(#expected " == " #actual, (expected),(actual))

void test(){
	ASSERT_EQUAL(42, function());
}
//=
namespace cute {
	template <typename ExpectedValue, typename ActualValue>
		void assert_equal(ExpectedValue const &expected
					,ActualValue const &actual
					,char const *msg
					,char const *file
					,int line) {
			// unfortunately there is no is_integral_but_not_bool_or_enum
			typedef typename impl_place_for_traits::is_integral<ExpectedValue> exp_integral;
			typedef typename impl_place_for_traits::is_integral<ActualValue> act_integral;
	}
}
#define ASSERT_EQUALM(msg,expected,actual) cute::assert_equal((expected),(actual),msg,__FILE__,__LINE__)
#define ASSERT_EQUAL(expected,actual) ASSERT_EQUALM(#expected " == " #actual, (expected),(actual))

int function() {
	return int();
}

void test(){
	ASSERT_EQUAL(42, function());
}
//!Test CUTE Macro Function Creation ASSERT_EQUALS_DELTA
//@.config
markerLines=15
//@Test.cpp
namespace cute {
	template <typename ExpectedValue, typename ActualValue, typename DeltaValue>
		void assert_equal_delta(ExpectedValue const &expected
					,ActualValue const &actual
					,DeltaValue const &delta
					,char const *msg
					,char const *file
					,int line) {
		}
}
#define ASSERT_EQUAL_DELTAM(msg,expected,actual,delta) cute::assert_equal_delta((expected),(actual),(delta),msg,__FILE__,__LINE__)
#define ASSERT_EQUAL_DELTA(expected,actual,delta) ASSERT_EQUAL_DELTAM(#expected " == " #actual " with error " #delta  ,(expected),(actual),(delta))

void test(){
	ASSERT_EQUAL_DELTA(42, function(), 0.0);
}
//=
namespace cute {
	template <typename ExpectedValue, typename ActualValue, typename DeltaValue>
		void assert_equal_delta(ExpectedValue const &expected
					,ActualValue const &actual
					,DeltaValue const &delta
					,char const *msg
					,char const *file
					,int line) {
		}
}
#define ASSERT_EQUAL_DELTAM(msg,expected,actual,delta) cute::assert_equal_delta((expected),(actual),(delta),msg,__FILE__,__LINE__)
#define ASSERT_EQUAL_DELTA(expected,actual,delta) ASSERT_EQUAL_DELTAM(#expected " == " #actual " with error " #delta  ,(expected),(actual),(delta))

int function() {
	return int();
}

void test(){
	ASSERT_EQUAL_DELTA(42, function(), 0.0);
}
//!Test CUTE Macro Function Creation ASSERT_EQUALS_DELTA_M
//@.config
markerLines=15
//@Test.cpp
namespace cute {
	template <typename ExpectedValue, typename ActualValue, typename DeltaValue>
		void assert_equal_delta(ExpectedValue const &expected
					,ActualValue const &actual
					,DeltaValue const &delta
					,char const *msg
					,char const *file
					,int line) {
		}
}
#define ASSERT_EQUAL_DELTAM(msg,expected,actual,delta) cute::assert_equal_delta((expected),(actual),(delta),msg,__FILE__,__LINE__)
#define ASSERT_EQUAL_DELTA(expected,actual,delta) ASSERT_EQUAL_DELTAM(#expected " == " #actual " with error " #delta  ,(expected),(actual),(delta))

void test(){
	ASSERT_EQUAL_DELTAM("foobar", 42, function(), 0.0);
}
//=
namespace cute {
	template <typename ExpectedValue, typename ActualValue, typename DeltaValue>
		void assert_equal_delta(ExpectedValue const &expected
					,ActualValue const &actual
					,DeltaValue const &delta
					,char const *msg
					,char const *file
					,int line) {
		}
}
#define ASSERT_EQUAL_DELTAM(msg,expected,actual,delta) cute::assert_equal_delta((expected),(actual),(delta),msg,__FILE__,__LINE__)
#define ASSERT_EQUAL_DELTA(expected,actual,delta) ASSERT_EQUAL_DELTAM(#expected " == " #actual " with error " #delta  ,(expected),(actual),(delta))

int function() {
	return int();
}

void test(){
	ASSERT_EQUAL_DELTAM("foobar", 42, function(), 0.0);
}
//!Test Return Type Detection In Macro
//@.config
markerLines=17
//@A.cpp
#include <string>
namespace cute{
	struct test_failure {
		std::string reason;
		std::string filename;
		int lineno;

		test_failure(std::string const &r,char const *f, int line)
		:reason(r),filename(f),lineno(line)
		{   }
		char const * what() const { return reason.c_str(); }
	};
}
#define ASSERTM(msg,cond) if (!(cond)) throw cute::test_failure((msg),__FILE__,__LINE__)
#define ASSERT(cond) ASSERTM(#cond,cond)
void test() {
	ASSERT(42.0 == function());
}
//=
#include <string>
namespace cute{
	struct test_failure {
		std::string reason;
		std::string filename;
		int lineno;

		test_failure(std::string const &r,char const *f, int line)
		:reason(r),filename(f),lineno(line)
		{   }
		char const * what() const { return reason.c_str(); }
	};
}
#define ASSERTM(msg,cond) if (!(cond)) throw cute::test_failure((msg),__FILE__,__LINE__)
#define ASSERT(cond) ASSERTM(#cond,cond)

double function() {
	return double();
}

void test() {
	ASSERT(42.0 == function());
}
//!Test Boolean Return Type Detection In Macro
//@.config
markerLines=17
//@A.cpp
#include <string>
namespace cute{
	struct test_failure {
		std::string reason;
		std::string filename;
		int lineno;

		test_failure(std::string const &r,char const *f, int line)
		:reason(r),filename(f),lineno(line)
		{   }
		char const * what() const { return reason.c_str(); }
	};
}
#define ASSERTM(msg,cond) if (!(cond)) throw cute::test_failure((msg),__FILE__,__LINE__)
#define ASSERT(cond) ASSERTM(#cond,cond)
void test() {
	ASSERT(function());
}
//=
#include <string>
namespace cute{
	struct test_failure {
		std::string reason;
		std::string filename;
		int lineno;

		test_failure(std::string const &r,char const *f, int line)
		:reason(r),filename(f),lineno(line)
		{   }
		char const * what() const { return reason.c_str(); }
	};
}
#define ASSERTM(msg,cond) if (!(cond)) throw cute::test_failure((msg),__FILE__,__LINE__)
#define ASSERT(cond) ASSERTM(#cond,cond)

bool function() {
	return bool();
}

void test() {
	ASSERT(function());
}
