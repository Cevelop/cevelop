//!Has return type
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

Tuple<int,int> foo() {
	return Tuple<int,int> { };
}

int main() {
	auto tuple = foo();
}

//!Has trailing return type
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

template <>
struct Tuple<double, double> {
	operator Tuple<int, int>() const { return Tuple<int, int> {}; }
};

auto foo() -> Tuple<int,int> {
	return Tuple<double,double> { };
}

int main() {
	auto tuple = foo();
}

//!CastExpression
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

template <>
struct Tuple<double, double> {
	operator Tuple<int, int>() const { return Tuple<int, int> {}; }
};

auto foo() {
	Tuple<double, double> tuple;
	return (Tuple<int,int>) tuple;
}

int main() {
	auto tuple = foo();
}

//!SimpleTypeConstructor
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

auto foo() {
	return Tuple<int,int> {};
}

int main() {
	auto tuple = foo();
}

//!BinaryExpression 1
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

template <>
struct Tuple<double, double> {
	Tuple<int,int> operator+(const Tuple& rhs) { return Tuple<int, int> {}; }
};

auto foo() {
	Tuple<double, double> tuple;
	return tuple + tuple;
}

int main() {
	auto tuple = foo();
}

//!BinaryExpression 2
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
	Tuple operator+(const Tuple& rhs) { return Tuple {}; }
};

auto foo() {
	Tuple<int,int> tuple;
	return tuple + tuple;
}

int main() {
	auto tuple = foo();
}

//!UnaryExpression 1
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

template <typename S>
Tuple<S,S> operator++(const Tuple<S,S>& rhs) {
	return Tuple<S,S> { };
}

auto foo() {
	Tuple<int,int> tuple;
	return ++tuple;
}

int main() {
	auto tuple = foo();
}

//!IdExpression 1
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

auto foo() {
	Tuple<int, int> tuple;
	return tuple;
}

int main() {
	auto tuple = foo();
}

//!IdExpression 2
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

Tuple<int, int> tuple;

auto foo() {	
	return tuple;
}

int main() {
	auto tuple = foo();
}

//!FieldReference
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

struct A {
	Tuple<int,int> tuple { };
};

auto foo() {
	A a{ };
	return a.tuple;
}

int main() {
	auto tuple = foo();
}

//!ConditionalExpression
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

struct A {
	Tuple<int,int> tuple1, tuple2;
};

auto foo() {
	A a{ };
	return true ? a.tuple1 : a.tuple2;
}

int main() {
	auto tuple = foo();
}

//!FunctionCallExpression
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

auto foo1() {
	return Tuple<int,int> { };
}

auto foo() {
	return foo1();
}

int main() {
	auto tuple = foo();
}