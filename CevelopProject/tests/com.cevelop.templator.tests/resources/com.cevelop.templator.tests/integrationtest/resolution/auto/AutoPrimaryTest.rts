//!SimpleTypeConstructor with EqualsInitializer
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

int main() {
	auto tuple = Tuple<int, int> { };
}

//!SimpleTypeConstructor with ConstructorInitializer
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

int main() {
	auto tuple (Tuple<int, int> { });
}

//!SimpleTypeConstructor with InitializerList
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

int main() {
	auto tuple { Tuple<int, int> { } };
}

//!CastExpression
//@.config
rectangleIndex=2
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

template <>
struct Tuple<double, double> {
	operator Tuple<int, int>() const { return Tuple<int, int> {}; }
};

int main() {
	Tuple<double, double> tupleDouble { };
	auto tuple = (Tuple<int, int>) tupleDouble;
}

//!BinaryExpression 1
//@.config
rectangleIndex=2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
};

template<>
struct Tuple<double, double> {
	Tuple<int, int> operator+(const Tuple& rhs) {
		return Tuple<int, int> { };
	}
};

int main() {
	Tuple<double, double> tupleDouble { };
	auto tuple = tupleDouble + tupleDouble;
}

//!BinaryExpression 2
//@.config
rectangleIndex=2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
	Tuple operator+(const Tuple& rhs) {
		return Tuple { };
	}
};

int main() {
	Tuple<int, int> tupleInt { };
	auto tuple = tupleInt + tupleInt;
}

//!BinaryExpression 3
//@.config
rectangleIndex=2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {

};

template<typename T, typename S>
Tuple<T, S> operator+(const Tuple<T, S>& lhs, const Tuple<T, S>& rhs) {
	return Tuple<T, S> { };
}

int main() {
	Tuple<int, int> tupleInt { };
	auto tuple = tupleInt + tupleInt;
}

//!UnaryExpression 1
//@.config
rectangleIndex=2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
	Tuple<T,S> operator++() {
		return Tuple<T,S> { };
	}
};

int main() {
	Tuple<int, int> tupleInt { };
	auto tuple = ++tupleInt;
}

//!UnaryExpression 2
//@.config
rectangleIndex=2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
};

template<typename T, typename S>
Tuple<T, S> operator++(const Tuple<T, S>& lhs) {
	return Tuple<T, S> { };
}

int main() {
	Tuple<int, int> tupleInt = Tuple<int, int> { };
	auto tuple = ++tupleInt;
}

//!IdExpression 1
//@.config
rectangleIndex=2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
};

int main() {
	Tuple<int, int> tupleInt { };
	auto tuple = tupleInt;
}

//!IdExpression 2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
};

Tuple<int, int> tupleInt { };

int main() {
	auto tuple = tupleInt;
}

//!FieldReference 1
//@.config
rectangleIndex=2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
};

struct A {
	Tuple<int,int> t;
};

int main() {
	A a{};
	auto tuple = a.t;
}

//!FieldReference 2
//@.config
rectangleIndex=2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
};

template<typename T>
struct A {
	Tuple<T,T> t;
};

int main() {
	A<int> a{};
	auto tuple = a.t;
}

//!ConditionalExpression
//@.config
rectangleIndex=4
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
};

int main() {
	Tuple<int,int> t1 { };
	Tuple<int,int> t2 { };
	auto tuple = true ? t1 : t2;
}

//!ArraySubscriptExpression
//@.config
rectangleIndex=2
//@MyFileName.cpp
template<typename T, typename S>
struct Tuple {
};

struct A {
	Tuple<int,int> tuples[];
	Tuple<int,int>& operator[] (const int index) {
		return tuples[index];
	}
};

int main() {
	A a;
	auto tuple = a[3];
}