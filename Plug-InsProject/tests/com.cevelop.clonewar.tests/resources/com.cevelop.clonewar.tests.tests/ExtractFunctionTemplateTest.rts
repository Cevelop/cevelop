//!ETTPFF: Different simple params, different return, simple body, replace all.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_DifferentSimpleParam_DifferentReturn_SimpleBody_ReplaceAll.h
//@ETTPFF_DifferentSimpleParam_DifferentReturn_SimpleBody_ReplaceAll.h
double /*$*/sum/*$*/(long first, int second) {
	int temp = first + second;
	return temp;
}
//=
template<typename T1, typename T2, typename T3>
T1 sum(T3 first, T2 second) {
	T2 temp = first + second;
	return temp;
}

//!ETTPFF: Existing Template, named param, void return, replace all, adjust call, call has template params.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
parameterBeforeReturn=true
primaryFile=ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_CallHasTemplateParams.h
//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_CallHasTemplateParams.h
template<typename T, typename U>
void /*$*/setValue/*$*/(T value1, U value2) {

}
//=
template<typename T, typename U, typename T1>
T1 setValue(T value1, U value2) {
}

//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_CallHasTemplateParams.cpp
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_CallHasTemplateParams.h"
struct foobar {
};

struct foobar2 {
};

int main() {
	foobar f;
	foobar2 ff;
	setValue<foobar,foobar2>(f, ff);
}
//=
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_CallHasTemplateParams.h"
struct foobar {
};

struct foobar2 {
};

int main() {
	foobar f;
	foobar2 ff;
	setValue<foobar, foobar2, void>(f, ff);
}
//!ETTPFF: Existing Template, named param, void return, replace all, adjust call, mixed resolving.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
parameterBeforeReturn=true
primaryFile=ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_MixedResolving.h
//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_MixedResolving.h
template<typename T, typename U>
void /*$*/setValue/*$*/(T value1, U value2) {

}
//=
template<typename T, typename U, typename T1>
T1 setValue(T value1, U value2) {
}

//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_MixedResolving.cpp
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_MixedResolving.h"
struct foobar {
};

struct foobar2 {
};

int main() {
	foobar f;
	foobar2 ff;
	setValue<>(f, ff);
}
//=
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_MixedResolving.h"
struct foobar {
};

struct foobar2 {
};

int main() {
	foobar f;
	foobar2 ff;
	setValue<foobar, foobar2, void>(f, ff);
}
//!ETTPFF: Existing Template, named param, void return, replace all, adjust call, param before return order.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
parameterBeforeReturn=true
primaryFile=ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall.h
//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall.h
template<typename T>
void /*$*/setValue/*$*/(T value) {
}
//=
template<typename T, typename T1>
T1 setValue(T value) {
}

//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall.cpp
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall.h"
struct foobar {
};

int main() {
	foobar f;
	setValue(f);
}
//=
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall.h"
struct foobar {
};

int main() {
	foobar f;
	setValue<foobar, void>(f);
}
//!ETTPFF: Existing Template, named param, void return, replace all, adjust call, resolve by second param.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_ResolveBySecondParam.h
//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_ResolveBySecondParam.h
template<typename T, typename U>
void /*$*/setValue/*$*/(T value1, U value2) {
}
//=
template<typename T1, typename T, typename U>
T1 setValue(T value1, U value2) {
}

//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_ResolveBySecondParam.cpp
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_ResolveBySecondParam.h"
struct foobar {
};

struct foobar2 {
};

int main() {
	foobar f;
	foobar2 ff;
	setValue(f,ff);
}
//=
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustCall_ResolveBySecondParam.h"
struct foobar {
};

struct foobar2 {
};

int main() {
	foobar f;
	foobar2 ff;
	setValue<void>(f, ff);
}
//!ETTPFF: Existing Template, named param, void return, replace all, adjust multiple call different types, param before return order.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
parameterBeforeReturn=true
primaryFile=ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustMultipleCallDifferentTypes.h
//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustMultipleCallDifferentTypes.h
struct A {
};

struct B : A {
};

template<typename T>
void /*$*/foobar/*$*/(T t) {
}
//=
struct A {
};

struct B : A {
};

template<typename T, typename T1>
T1 foobar(T t) {
}

//@ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustMultipleCallDifferentTypes.cpp
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustMultipleCallDifferentTypes.h"
int main() {
	A a;
	B b;
	foobar(a);
	foobar(b);
}
//=
#include "ETTPFF_ExistingTemplate_NamedParam_VoidReturn_ReplaceAll_AdjustMultipleCallDifferentTypes.h"
int main() {
	A a;
	B b;
	foobar<A, void>(a);
	foobar<B, void>(b);
}
//!ETTPFF: Existing Template, simple param, void return, replace all, adjust call, param before return order.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
parameterBeforeReturn=true
primaryFile=ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.h
//@ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.h
template<typename T>
void /*$*/setValue/*$*/(T value) {
}
//=
template<typename T, typename T1>
T1 setValue(T value) {
}

//@ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.cpp
#include "ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.h"

int main() {
	setValue(5);
}
//=
#include "ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.h"

int main() {
	setValue<int, void>(5);
}
//!ETTPFF: Existing Template, simple param, void return, replace all, adjust call.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.h
//@ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.h
template<typename T>
void /*$*/setValue/*$*/(T value) {
}
//=
template<typename T1, typename T>
T1 setValue(T value) {
}

//@ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.cpp
#include "ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.h"

int main() {
	setValue(5);
}
//=
#include "ETTPFF_ExistingTemplate_SimpleParam_VoidReturn_ReplaceAll_AdjustCall.h"

int main() {
	setValue<void>(5);
}
//!ETTPFF: Existing Template, two named param, named return, replace all, adjust call, param before return order.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
parameterBeforeReturn=true
primaryFile=ETTPFF_ExistingTemplate_TwoNamedParam_NamedReturn_ReplaceAll_AdjustCall.h
//@ETTPFF_ExistingTemplate_TwoNamedParam_NamedReturn_ReplaceAll_AdjustCall.h
struct foobar {
};

struct foobar2 {
};

template<typename T>
foobar2 /*$*/setValue/*$*/(T value, foobar f) {
}
//=
struct foobar {
};

struct foobar2 {
};

template<typename T, typename T2, typename T1>
T1 setValue(T value, T2 f) {
}

//@ETTPFF_ExistingTemplate_TwoNamedParam_NamedReturn_ReplaceAll_AdjustCall.cpp
#include "ETTPFF_ExistingTemplate_TwoNamedParam_NamedReturn_ReplaceAll_AdjustCall.h"
int main() {
	foobar f;
	foobar2 r;
	r = setValue(f, f);
}
//=
#include "ETTPFF_ExistingTemplate_TwoNamedParam_NamedReturn_ReplaceAll_AdjustCall.h"
int main() {
	foobar f;
	foobar2 r;
	r = setValue<foobar, foobar, foobar2>(f, f);
}
//!ETTPFF: Named param, named return, named body, replace all, adjust call.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_NamedParam_NamedReturn_NamedBody_ReplaceAll_AdjustCall.h
//@ETTPFF_NamedParam_NamedReturn_NamedBody_ReplaceAll_AdjustCall.h
#include "Foobar.h"
AnotherStruct /*$*/max/*$*/(foobar first, foobar second) {
	foobar f(first);
	AnotherStruct t;
	return t;
}
//=
#include "Foobar.h"
template<typename T1, typename T2>
T1 max(T2 first, T2 second) {
	T2 f(first);
	T1 t;
	return t;
}

//@Foobar.h
struct foobar
{
	void doSomething() {
	}
};

struct AnotherStruct {
};
//=
struct foobar
{
	void doSomething() {
	}
};

struct AnotherStruct {
};
//@ETTPFF_NamedParam_NamedReturn_NamedBody_ReplaceAll_AdjustCall.cpp
#include "ETTPFF_NamedParam_NamedReturn_NamedBody_ReplaceAll_AdjustCall.h"

int main() {
	foobar f1;
	foobar f2;
	max(f1, f2);
}
//=
#include "ETTPFF_NamedParam_NamedReturn_NamedBody_ReplaceAll_AdjustCall.h"

int main() {
	foobar f1;
	foobar f2;
	max < AnotherStruct > (f1, f2);
}
//!ETTPFF: Named param, Named return, replace all, adjust call.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_NamedParam_NamedReturn_ReplaceAll_AdjustCall.h
//@ETTPFF_NamedParam_NamedReturn_ReplaceAll_AdjustCall.h
#include "Foobar.h"
AnotherStruct /*$*/max/*$*/(foobar first, foobar second) {
}
//=
#include "Foobar.h"
template<typename T1, typename T2>
T1 max(T2 first, T2 second) {
}

//@Foobar.h
struct foobar {
	void doSomething() {
	}
};

struct AnotherStruct {
};
//=
struct foobar {
	void doSomething() {
	}
};

struct AnotherStruct {
};
//@ETTPFF_NamedParam_NamedReturn_ReplaceAll_AdjustCall.cpp
#include "ETTPFF_NamedParam_NamedReturn_ReplaceAll_AdjustCall.h"

int main() {
	foobar f1;
	foobar f2;
	max(f1, f2);
}
//=
#include "ETTPFF_NamedParam_NamedReturn_ReplaceAll_AdjustCall.h"

int main() {
	foobar f1;
	foobar f2;
	max < AnotherStruct > (f1, f2);
}
//!ETTPFF: Named param, void return, replace all, adjust call.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_NamedParam_VoidReturn_ReplaceAll_AdjustCall.h
//@ETTPFF_NamedParam_VoidReturn_ReplaceAll_AdjustCall.h
#include "Foobar.h"
void /*$*/max/*$*/(foobar first, foobar second) {
}
//=
#include "Foobar.h"
template<typename T2, typename T1>
T2 max(T1 first, T1 second) {
}

//@Foobar.h
struct foobar {
	void doSomething() {
	}
};
//=
struct foobar {
	void doSomething() {
	}
};
//@ETTPFF_NamedParam_VoidReturn_ReplaceAll_AdjustCall.cpp
#include "ETTPFF_NamedParam_VoidReturn_ReplaceAll_AdjustCall.h"

int main() {
	foobar f1;
	foobar f2;
	max(f1,f2);
}
//=
#include "ETTPFF_NamedParam_VoidReturn_ReplaceAll_AdjustCall.h"

int main() {
	foobar f1;
	foobar f2;
	max<void>(f1, f2);
}
//!ETTPFF: Template type in body, replace nested named type.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
nestedOnly=true
primaryFile=ETTPFF_TemplTypeBody_ReplaceNamedNested.h
//@ETTPFF_TemplTypeBody_ReplaceNamedNested.h
#include <vector>
struct foobar;
void /*$*/sort/*$*/(std::vector<foobar> vector) {
	std::vector<foobar> v = vector;
}
//=
#include <vector>
struct foobar;
template<typename T1>
void sort(std::vector<T1> vector) {
	std::vector<T1> v = vector;
}

//!ETTPFF: Template type in body, replace nested simple type.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
nestedOnly=true
primaryFile=ETTPFF_TemplTypeBody_ReplaceSimpleNested.h
//@ETTPFF_TemplTypeBody_ReplaceSimpleNested.h
#include <vector>
void /*$*/sort/*$*/(std::vector<int> vector) {
	std::vector<int> v = vector;
}
//=
#include <vector>
template<typename T1>
void sort(std::vector<T1> vector) {
	std::vector<T1> v = vector;
}

//!ETTPFF: Template type as parameter, replace nested named type.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
nestedOnly=true
primaryFile=ETTPFF_TemplTypeParam_ReplaceNamedNested.h
//@ETTPFF_TemplTypeParam_ReplaceNamedNested.h
#include <vector>
struct foobar;
void /*$*/sort/*$*/(std::vector<foobar> vector) {

}
//=
#include <vector>
struct foobar;
template<typename T1>
void sort(std::vector<T1> vector) {
}

//!ETTPFF: Template type as parameter, replace nested simple type.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
nestedOnly=true
primaryFile=ETTPFF_TemplTypeParam_ReplaceSimpleNested.h
//@ETTPFF_TemplTypeParam_ReplaceSimpleNested.h
#include <vector>
void /*$*/sort/*$*/(std::vector<int> vector) {
}
//=
#include <vector>
template<typename T1>
void sort(std::vector<T1> vector) {
}

//!ETTPFF: Template type as return, replace nested named type.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
nestedOnly=true
primaryFile=ETTPFF_TemplTypeReturn_ReplaceNamedNested.h
//@ETTPFF_TemplTypeReturn_ReplaceNamedNested.h
#include <vector>
struct foobar;
std::vector<foobar> /*$*/sort/*$*/() {
}
//=
#include <vector>
struct foobar;
template<typename T1>
std::vector<T1> sort() {
}

//!ETTPFF: Template type as return, replace nested simple type.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
nestedOnly=true
primaryFile=ETTPFF_TemplTypeReturn_ReplaceSimpleNested.h
//@ETTPFF_TemplTypeReturn_ReplaceSimpleNested.h
#include <vector>
std::vector<int> /*$*/sort/*$*/() {
}
//=
#include <vector>
template<typename T1>
std::vector<T1> sort() {
}

//!ETTPFF: Two named param, named return, replace all, adjust call, param before return order.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
parameterBeforeReturn=true
primaryFile=ETTPFF_TwoNamedParam_VoidReturn_ReplaceAll_AdjustCall.h
//@ETTPFF_TwoNamedParam_VoidReturn_ReplaceAll_AdjustCall.h
struct foobar {
};

struct foobar2 {
};

void /*$*/setValue/*$*/(foobar2 value, foobar f) {
}
//=
struct foobar {
};

struct foobar2 {
};

template<typename T1, typename T2, typename T3>
T3 setValue(T1 value, T2 f) {
}

//@ETTPFF_TwoNamedParam_VoidReturn_ReplaceAll_AdjustCall.cpp
#include "ETTPFF_TwoNamedParam_VoidReturn_ReplaceAll_AdjustCall.h"
int main() {
	foobar f;
	foobar2 r;
	setValue(r, f);
}
//=
#include "ETTPFF_TwoNamedParam_VoidReturn_ReplaceAll_AdjustCall.h"
int main() {
	foobar f;
	foobar2 r;
	setValue<foobar2, foobar, void>(r, f);
}
//!ETTPFF: Two simple param, void return, first param selection, replace selected.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_TwoSimpleParam_SimpleReturn_FirstParamSelection_ReplaceSelected.h
//@ETTPFF_TwoSimpleParam_SimpleReturn_FirstParamSelection_ReplaceSelected.h
void max(/*$*/int/*$*/ first, int second) {
}
//=
template<typename T1>
void max(T1 first, int second) {
}

//!ETTPFF: Two simple param, simple return, replace all.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_TwoSimpleParam_SimpleReturn_ReplaceAll.h
//@ETTPFF_TwoSimpleParam_SimpleReturn_ReplaceAll.h
int /*$*/max/*$*/(int first, int second) {
	return first > second ? first : second;
}
//=
template<typename T1>
T1 max(T1 first, T1 second) {
	return first > second ? first : second;
}

//!ETTPFF: Two simple param, simple return, return selection, replace selected.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_TwoSimpleParam_SimpleReturn_ReturnSelection_ReplaceSelected.h
//@ETTPFF_TwoSimpleParam_SimpleReturn_ReturnSelection_ReplaceSelected.h
/*$*/int/*$*/ max(int first, int second) {
	return 0;
}
//=
template<typename T1>
T1 max(int first, int second) {
	return 0;
}

//!ETTPFF: Two simple param, void return, second param selection, replace selected.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_TwoSimpleParam_SimpleReturn_SecondParamSelection_ReplaceSelected.h
//@ETTPFF_TwoSimpleParam_SimpleReturn_SecondParamSelection_ReplaceSelected.h
void max(int first, /*$*/int/*$*/ second) {
}
//=
template<typename T1>
void max(int first, T1 second) {
}

//!ETTPFF: Two simple param, simple return, simple body, replace all.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_TwoSimpleParam_SimpleReturn_SimpleBody_ReplaceAll.h
//@ETTPFF_TwoSimpleParam_SimpleReturn_SimpleBody_ReplaceAll.h
int /*$*/sum/*$*/(int first, int second) {
	int temp = first + second;
	return temp;
}
//=
template<typename T1>
T1 sum(T1 first, T1 second) {
	T1 temp = first + second;
	return temp;
}

//!ETTPFF: Two simple param, void return, replace all.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPFF_TwoSimpleParam_VoidReturn_ReplaceAll.h
//@ETTPFF_TwoSimpleParam_VoidReturn_ReplaceAll.h
void /*$*/max/*$*/(int first, int second) {
	return first > second ? first : second;
}
//=
template<typename T2, typename T1>
T2 max(T1 first, T1 second) {
	return first > second ? first : second;
}

//!ETTPMF: Function without Templatable Content.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
expectProblem=true
primaryFile=ETTPMF_Constructor_without_Templatable_Content.h
//@ETTPMF_Constructor_without_Templatable_Content.h
struct S {
	/*$*/S/*$*/() {
	}
};

int main(int argc, char **argv) {
	S s;
}
//=
struct S {
	S() {
	}
};

int main(int argc, char **argv) {
	S s;
}
//!ETTPMF: Two simple param, void return, replace all.
//#com.cevelop.clonewar.test.AbstractRefactoringTest
//@.config
primaryFile=ETTPMF_TwoSimpleParam_VoidReturn_ReplaceAll.h
//@ETTPMF_TwoSimpleParam_VoidReturn_ReplaceAll.h
struct foobar {
	void /*$*/max/*$*/(int first, int second) {
		return first > second ? first : second;
	}
};
//=
struct foobar {
	template<typename T2, typename T1>
	T2 max(T1 first, T1 second) {
		return first > second ? first : second;
	}
};