//! Implicitly capturing variable by reference
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	[&i]() -> std::int32_t {
		return i;
	};
}

//! Implicitly capturing variable by copy
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	[=]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	[i]() -> std::int32_t {
		return i;
	};
}

//! Implicitly capturing multiple variables
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	std::int32_t k = 82;
	[&]() -> std::int32_t {
		return i * k;
	};
}
//=
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	std::int32_t k = 82;
	[&i, &k]() -> std::int32_t {
		return i * k;
	};
}

//! Capturing one variable implicitly by reference and another explicitly variable by copy
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	std::int32_t k = 82;
	[&, k]() -> std::int32_t {
		return i * k;
	};
}
//=
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	std::int32_t k = 82;
	[k, &i]() -> std::int32_t {
		return i * k;
	};
}

//! Capturing one variable implicitly by copy and another explicitly variable by reference
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	std::int32_t k = 82;
	[=, &k]() -> std::int32_t {
		return i * k;
	};
}
//=
#include <cstdint>
void Fn() noexcept
{
	std::int32_t i = 12;
	std::int32_t k = 82;
	[&k, i]() -> std::int32_t {
		return i * k;
	};
}

//! Implicitly capturing this with by-reference capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
struct S
{
	std::int32_t i = 12;
	void F()
	{
		[&]() -> std::int32_t {
			i = 100;
			return i;
		};
	}
};
//=
#include <cstdint>
struct S
{
	std::int32_t i = 12;
	void F()
	{
		[this]() -> std::int32_t {
			i = 100;
			return i;
		};
	}
};

//! Implicitly capturing this with by-copy capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
struct S
{
	std::int32_t i = 12;
	void F()
	{
		[=]() -> std::int32_t {
			i = 100;
			return i;
		};
	}
};
//=
#include <cstdint>
struct S
{
	std::int32_t i = 12;
	void F()
	{
		[this]() -> std::int32_t {
			i = 100;
			return i;
		};
	}
};

//! Capturing this by reference with by-reference capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
struct S
{
	std::int32_t i = 12;
	void F()
	{
		[&, this]() -> std::int32_t {
			i = 100;
			return i;
		};
	}
};
//=
#include <cstdint>
struct S
{
	std::int32_t i = 12;
	void F()
	{
		[this]() -> std::int32_t {
			i = 100;
			return i;
		};
	}
};

//! Capturing this by copy with by-reference capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
struct S
{
	std::int32_t i = 12;
	void F()
	{
		[&, *this]() mutable -> std::int32_t {
			i = 100;
			return i;
		};
	}
};
//=
#include <cstdint>
struct S
{
	std::int32_t i = 12;
	void F()
	{
		[*this]() mutable -> std::int32_t {
			i = 100;
			return i;
		};
	}
};

//! Capturing nothing implicitly with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	[&]() -> std::int32_t {
		std::int32_t i = 12;
		i = 100;
		return i;
	};
}
//=
#include <cstdint>
void F()
{
	[]() -> std::int32_t {
		std::int32_t i = 12;
		i = 100;
		return i;
	};
}

//! Using global variable with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
std::int32_t i = 100;
void F()
{
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
std::int32_t i = 100;
void F()
{
	[]() -> std::int32_t {
		return i;
	};
}

//! Using namespaced global variable with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
namespace {
	std::int32_t i = 100;
}
void F()
{
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
namespace {
	std::int32_t i = 100;
}
void F()
{
	[]() -> std::int32_t {
		return i;
	};
}

//! Using static field with by-reference capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
struct S
{
	static std::int32_t i;
	void F()
	{
		[&]() -> std::int32_t {
			i = 100;
			return i;
		};
	}
};
//=
#include <cstdint>
struct S
{
	static std::int32_t i;
	void F()
	{
		[]() -> std::int32_t {
			i = 100;
			return i;
		};
	}
};

//! Using static local variable with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	static std::int32_t i = 100;
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
void F()
{
	static std::int32_t i = 100;
	[]() -> std::int32_t {
		return i;
	};
}

//! Implicitly capturing parameter with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F(std::int32_t i)
{
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
void F(std::int32_t i)
{
	[&i]() -> std::int32_t {
		return i;
	};
}

//! Using static inner lambda variable with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	[]() {
		static std::int32_t i = 12;
		[&]() -> std::int32_t {
			i = 100;
			return i;
		};
	}();
}
//=
#include <cstdint>
void F()
{
	[]() {
		static std::int32_t i = 12;
		[]() -> std::int32_t {
			i = 100;
			return i;
		};
	}();
}

//! Implicitly capturing inner lambda variable with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	[]() {
		std::int32_t i = 12;
		[&]() -> std::int32_t {
			i = 100;
			return i;
		};
	}();
}
//=
#include <cstdint>
void F()
{
	[]() {
		std::int32_t i = 12;
		[&i]() -> std::int32_t {
			i = 100;
			return i;
		};
	}();
}

//! Using local variable in typeid with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[&]() -> std::int32_t {
		const std::type_info& ti = typeid(i);
		return 0;
	};
}
//=
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[]() -> std::int32_t {
		const std::type_info& ti = typeid(i);
		return 0;
	};
}

//! Using local variable in sizeof with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[&]() -> std::int32_t {
		std::size_t st = sizeof(i);
		return 0;
	};
}
//=
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[]() -> std::int32_t {
		std::size_t st = sizeof(i);
		return 0;
	};
}

//! Using local variable in noexcept with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[&]() -> std::int32_t {
		bool ne = noexcept(i);
		return 0;
	};
}
//=
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[]() -> std::int32_t {
		bool ne = noexcept(i);
		return 0;
	};
}

//! Using local variable in decltype with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[&]() -> std::int32_t {
		decltype(i) dt;
		return 0;
	};
}
//=
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[]() -> std::int32_t {
		decltype(i) dt;
		return 0;
	};
}

//! Using local variable in unevaluated expression with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[&]() -> std::int32_t {
		const std::type_info& ti = typeid(i++ + 3);
		return 0;
	};
}
//=
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[]() -> std::int32_t {
		const std::type_info& ti = typeid(i++ + 3);
		return 0;
	};
}

//! Using reference initialized with constant integral expression and with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	static std::int32_t c = 12 * 82;
	std::int32_t& i = c;
	[&]() -> std::int32_t {
		i = 100;
		return i;
	};
}
//=
#include <cstdint>
void F()
{
	static std::int32_t c = 12 * 82;
	std::int32_t& i = c;
	[]() -> std::int32_t {
		i = 100;
		return i;
	};
}

//! Reading const non-volatile integral variable initialized with constant expression and with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	const std::int32_t i = 12 * 82;
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
void F()
{
	const std::int32_t i = 12 * 82;
	[]() -> std::int32_t {
		return i;
	};
}

//! Implicitly capturing volatile integral variable initialized with constant expression and with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	volatile std::int32_t i = 12 * 82;
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
void F()
{
	volatile std::int32_t i = 12 * 82;
	[&i]() -> std::int32_t {
		return i;
	};
}

//! Implicitly capturing const volatile integral variable initialized with constant expression and with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	const volatile std::int32_t i = 12 * 82;
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
void F()
{
	const volatile std::int32_t i = 12 * 82;
	[&i]() -> std::int32_t {
		return i;
	};
}

//! Implicitly capturing const integral variable initialized with non-constant expression and with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
std::int32_t G()
{
	return 12;
}
void F()
{
	const std::int32_t i = G();
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
std::int32_t G()
{
	return 12;
}
void F()
{
	const std::int32_t i = G();
	[&i]() -> std::int32_t {
		return i;
	};
}

//! Reading const non-volatile enumeration variable initialized with constant expression and with with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
enum class E { VALUE };
void F()
{
	const E e = E::VALUE;
	[&]() -> E {
		return e;
	};
}
//=
#include <cstdint>
enum class E { VALUE };
void F()
{
	const E e = E::VALUE;
	[]() -> E {
		return e;
	};
}

//! Reading typedefed const non-volatile integral variable initialized with constant expression and with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
typedef const std::int32_t cint32;
void F()
{
	cint32 i = 12 * 82;
	[&]() -> std::int32_t {
		return i;
	};
}
//=
#include <cstdint>
typedef const std::int32_t cint32;
void F()
{
	cint32 i = 12 * 82;
	[]() -> std::int32_t {
		return i;
	};
}

//! Implicitly capturing const non-integral variable initialized with constant expression and with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
struct S
{
	std::int32_t a;
	std::int32_t b;
};
void F()
{
	const S s{25, 47};
	[&]() -> S {
		return s;
	};
}
//=
#include <cstdint>
struct S
{
	std::int32_t a;
	std::int32_t b;
};
void F()
{
	const S s{25, 47};
	[&s]() -> S {
		return s;
	};
}

//! Reading constexpr trivially copy constructible variable with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
struct S
{
	std::int32_t a;
	std::int32_t b;
};
void F()
{
	constexpr S s{25, 47};
	[&]() -> S {
		return s;
	};
}
//=
#include <cstdint>
struct S
{
	std::int32_t a;
	std::int32_t b;
};
void F()
{
	constexpr S s{25, 47};
	[]() -> S {
		return s;
	};
}

//! Implicitly capturing constexpr non-trivially copy constructible variable with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
struct S
{
	std::int32_t a;
	std::int32_t b;

	virtual void V();
};
void F()
{
	constexpr S s{25, 47};
	[&]() -> S {
		return s;
	};
}
//=
#include <cstdint>
struct S
{
	std::int32_t a;
	std::int32_t b;

	virtual void V();
};
void F()
{
	constexpr S s{25, 47};
	[&s]() -> S {
		return s;
	};
}

//! Implicitly capturing variable explicitly captured by inner lambda with capture default
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[&]() {
		[&i]() -> std::int32_t {
			return 12;
		};
	}();
}
//=
#include <cstdint>
void F()
{
	std::int32_t i = 12;
	[&i]() {
		[&i]() -> std::int32_t {
			return 12;
		};
	}();
}
