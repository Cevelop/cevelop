//! Overriding function misses keyword, overriding pure virtual, add override keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		void F() noexcept {}
};
//=
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		void F() noexcept override {}
};

//! Overriding function has only virtual keyword, overriding pure virtual, add override keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		virtual void F() noexcept {}
};
//=
class A
{
	public:
		virtual void F() noexcept = 0;
};
class B : public A
{
	public:
		void F() noexcept override {}
};

//! Overriding function misses keyword, overriding virtual, add override keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		void F() noexcept {}
};
//=
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		void F() noexcept override {}
};

//! Overriding function has only virtual keyword, overriding virtual, add override keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		virtual void F() noexcept {}
};
//=
class A
{
	public:
		virtual void F() noexcept {}
};
class B : public A
{
	public:
		void F() noexcept override {}
};

//! Overriding pure virtual function with pure virtual function no keyword, add override keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		~B() = 0;
};
//=
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		~B() override = 0;
};

//! Overriding pure virtual function with pure virtual function,only virtual, add override keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		virtual ~B() = 0;
};
//=
class A
{
	public:
		virtual ~A() = 0;
};
class B : public A
{
	public:
		~B() override = 0;
};

//! Overriding virtual destructor misses keyword, add override keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		~B() {}
};
//=
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		~B() override {}
};

//! Overriding virtual destructor has only virtual keyword, add override keyword
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		virtual ~B() {}
};
//=
class A
{
	public:
		virtual ~A() {}
};
class B : public A
{
	public:
		~B() override {}
};
