//! Implicit lambda return type
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn() noexcept
{
	auto lambda = []() {
		std::uint8_t ret = 0U;
		return ret;
	};
}
//=
#include <cstdint>
void Fn() noexcept
{
	auto lambda = []() -> uint8_t {
		std::uint8_t ret = 0U;
		return ret;
	};
}

//! Implicit lambda return type without parameter list
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn() noexcept
{
	auto lambda = [] {
		std::uint8_t ret = 0U;
		return ret;
	};
}
//=
#include <cstdint>
void Fn() noexcept
{
	auto lambda = []() -> uint8_t {
		std::uint8_t ret = 0U;
		return ret;
	};
}

//! Decltype auto lambda return type which evaluates to uint8_t
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
#include <cstdint>
void Fn() noexcept
{
	auto lambda = []() -> decltype(auto) {
		std::uint8_t ret = 0U;
		return ret;
	};
}
//=
#include <cstdint>
void Fn() noexcept
{
	auto lambda = []() -> uint8_t {
		std::uint8_t ret = 0U;
		return ret;
	};
}

//! Implicit lambda return type with namespace
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
namespace xyz
{
	struct abc {};
}

void Fn() noexcept
{
	auto lambda = []() {
		xyz::abc ret{};
		return ret;
	};
}
//=
namespace xyz
{
	struct abc {};
}

void Fn() noexcept
{
	auto lambda = []() -> xyz::abc {
		xyz::abc ret{};
		return ret;
	};
}

//! Implicit std::nullptr_t lambda return type
//@.config
setPreferencesEval=(GUIDELINE_SETTING_ID|AUTOSAR_GUIDELINE_ID)
//@main.h
void Fn() noexcept
{
	auto lambda = []() { return nullptr; }
}
//=
void Fn() noexcept
{
	auto lambda = []() -> std::nullptr_t { return nullptr; }
}
