//!NonConstDeclLocallyChangedAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n = 21;
  }

//!NonConstDeclLocallyChangedPlusAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n += 21;
  }

//!NonConstDeclLocallyChangedMinusAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n -= 21;
  }

//!NonConstDeclLocallyChangedTimesAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n *= 21;
  }

//!NonConstDeclLocallyChangedDivisionAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n /= 21;
  }

//!NonConstDeclLocallyChangedModuloAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n %= 21;
  }

//!NonConstDeclLocallyChangedShiftRightAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n >>= 2;
  }

//!NonConstDeclLocallyChangedShiftLeftAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n <<= 21;
  }

//!NonConstDeclLocallyChangedBinaryOrAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n |= 21;
  }

//!NonConstDeclLocallyChangedBinaryAndAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n &= 21;
  }

//!NonConstDeclLocallyChangedBinaryXorAssignment
//@.config
//@main.cpp
int main()
  {
  int n{42};
  n ^= 21;
  }
 //!s + 1 with S::operator+(int): s stays non-const (LHS of overloaded non-const member operator)
//@.config
//@main.cpp
struct S {
  S operator +(int i) {
    return *this;  
  }
};
int main(int argc, char **argv) {
	S s{};
	s + 1;
}
//!s + 1 with S::operator+(int) const: s is marked as constable (LHS of overloaded const member operator)
//@.config
markerLines=7
//@main.cpp
struct S {
  S operator +(int i) const {
    return *this;  
  }
};
int main(int argc, char **argv) {
  S s{};
  s + 1;
}
//!s + 1 with operator+(S &, int): s stays non-const (non-const LHS of overloaded free operator)
//@.config
//@main.cpp
struct S {
};
S operator +(S & s, int i) {
  return s;  
}
int main(int argc, char **argv) {
  S s{};
  s + 1;
}
//!s + 1 with operator+(S const &, int): s is marked constable (const LHS of overloaded free operator)
//@.config
markerLines=7
//@main.cpp
struct S {
};
S operator +(S const & s, int i) {
  return s;  
}
int main(int argc, char **argv) {
	S s{};
	s + 1;
}
 //!s + s with S::operator+(S &) const: s stays non-const (non-const RHS of overloaded member operator)
//@.config
//@main.cpp
struct S {
  S operator +(S & s) const {
    return *this;  
  }
};
int main(int argc, char **argv) {
	S s{};
	s + s;
}

//!s + s with S::operator+(S const &) const: s is marked constable (const RHS of overloaded member operator)
//@.config
markerLines=7
//@main.cpp
struct S {
  S operator +(S const & s) const {
    return *this;  
  }
};
int main(int argc, char **argv) {
  S s{};
  s + s;
}
//!s + s with operator+(S const &, S &): s stays non-const (non-const RHS of overloaded free operator)
//@.config
//@main.cpp
struct S {
};
S operator +(S const & s, S & s) {
  return s;  
}
int main(int argc, char **argv) {
  S s{};
  s + s;
}
//!s + s with operator+(S const &, S const &): s is marked constablet (const RHS of overloaded free operator)
//@.config
markerLines=7
//@main.cpp
struct S {
};
S operator +(S const & s, S const & s) {
  return s;  
}
int main(int argc, char **argv) {
	S s{};
	s + s;
}
