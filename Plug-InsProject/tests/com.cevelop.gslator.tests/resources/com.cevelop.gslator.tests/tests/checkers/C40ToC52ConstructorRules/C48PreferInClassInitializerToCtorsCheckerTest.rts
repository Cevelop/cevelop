//!InitializeMemVarsInClass
//@.config
markerLines=17
//@example.h
class example {
	int x;
	double y { 42.0 };
	std::string s { };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x = 42, double y = 42.0, std::string s = "hello") :
		x { x }, y { y }, s { s } {}
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!InClassInitializeVarsFromMostComplexCtorWithDefValsButNotAllDefaulted
//@example.h
class example {
	int x;
	double y { 23.0 };
	std::string s { "42" };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x, double y = 42.0, std::string s);
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!InclassInitFromSingleArgCtor
//@.config
markerLines=9
//@A.h
struct A {
	bool is_valid() {
		return true;
	}
	void drive() {

	}
	int x;
	A(int x = 1) :
			x(x) {
	} // user-defined default constructor
};
//!IgnoreBecAttrInitializeMemVarsInClass
//@example.h
class example {
	int x;
	double y { 42.0 };
	std::string s { };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	[[gsl::suppress("Rc-in-class-initializer")]]
	example(int x = 42, double y = 42.0, std::string s = "hello") :
		x { x }, y { y }, s { s } {}
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!IgnoreBecAttrInitializeMemVarsInClassInline
//@example.h
class example {
	int x;
	double y { 42.0 };
	std::string s { };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	[[gsl::suppress("Rc-in-class-initializer")]]
	inline example(int x = 42, double y = 42.0, std::string s = "hello");
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};

inline example::example(int x = 42, double y = 42.0, std::string s = "hello") :
		x { x }, y { y }, s { s } {}
//!IgnoreBecAttrInitializeMemVarsInClassCPP
//@example.h
class example {
	int x;
	double y { 42.0 };
	std::string s { };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	[[gsl::suppress("Rc-in-class-initializer")]]
	example(int x = 42, double y = 42.0, std::string s = "hello");
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//@example.cpp
#include "example.h"
example::example(int x = 42, double y = 42.0, std::string s = "hello") :
		x { x }, y { y }, s { s } {}
//!SomeSpecialCaseFoundDuringImpl
//@X.h
class X {
	X() noexcept = delete;
};
//!InitializeMemVarsInClassMultipleDeclarations
//@.config
markerLines=17
//@example.h
class example {
	int x;
	double y { 42.0 }, z;
	std::string s { };

	void doStuff();

public:
	example(int x) :
			example { x, 42.0, "hello" } {
		std::cout << "created example\n";
	}
	explicit example(int x, double y = 0.0) :
			x { x }, y { y } {
		std::cout << "created example\n";
	}
	example(int x = 42, double y = 42.0, double z = 42.0, std::string s = "hello") :
		x { x }, y { y }, z { z }, s { s } {}
	~example() {
		std::cout << "destroying example " << y << "\n";
	}
};
//!TemplateClassInitializeMemVarsInClass
//@.config
markerLines=6
//@C.h
template<typename T>
class C {
	std::vector<T> v;
	std::string name;
public:
	C(std::vector<T> v = { 1,2,3 }, std::string name = "hello") : name { name }, v { v } { }
};