//!EmptyBodyDestructorWithOwner
//@main.h
struct Named_map {
public:
	~Named_map() {
	
	}

private:
	gsl::owner<int *> owy;
};
//=
struct Named_map {
public:
	~Named_map() {
		delete owy;
	}

private:
	gsl::owner<int *> owy;
};
//!DestructorWithOwner
//@main.h
struct Named_map {
public:
	~Named_map() {
		std::cout << "RIP";
	}

private:
	gsl::owner<int *> owy;
};
//=
struct Named_map {
public:
	~Named_map() {
		std::cout << "RIP";
		delete owy;
	}

private:
	gsl::owner<int *> owy;
};
//!DestructorWithSeveralOwnersAndPartiallyDeleted
//@main.h
struct Named_map {
public:
	~Named_map() {
		delete owy, delete otherOwy;
	}

private:
	gsl::owner<int *> owy;
	gsl::owner<int *> otherOwy;
	gsl::owner<int *> bestOwy;
};
//=
struct Named_map {
public:
	~Named_map() {
		delete owy, delete otherOwy;
		delete bestOwy;
	}

private:
	gsl::owner<int *> owy;
	gsl::owner<int *> otherOwy;
	gsl::owner<int *> bestOwy;
};
//!DestructorWithSeveralSpecialOwnersAndPartiallyDeleted
//@main.h
struct Named_map {
public:

	~Named_map() {
		delete io;
	}

	Named_map() noexcept :io {new int},ooooo {*(new int)},a {new int[4]},oo {*(new int[5])} {}
	
private:
	gsl::owner<int *> io;
	gsl::owner<int &> ooooo;
	gsl::owner<int *> a;
	gsl::owner<int &> oo;
};
//=
struct Named_map {
public:

	~Named_map() {
		delete io;
		delete &ooooo;
		delete[] a;
		delete[] &oo;
	}

	Named_map() noexcept :io {new int},ooooo {*(new int)},a {new int[4]},oo {*(new int[5])} {}
	
private:
	gsl::owner<int *> io;
	gsl::owner<int &> ooooo;
	gsl::owner<int *> a;
	gsl::owner<int &> oo;
};
//!EmptyBodyDestructorWithOwnerInCPP
//@main.h
struct Named_map {
public:
	~Named_map();

private:
	gsl::owner<int *> owy;
};
//@main.cpp
#include "main.h"
Named_map::~Named_map() {}
//=
#include "main.h"
Named_map::~Named_map() {
	delete owy;
}
//!DestructorWithOwnerInCPP
//@main.h
struct Named_map {
public:
	~Named_map();

private:
	gsl::owner<int *> owy;
};
//@main.cpp
#include "main.h"
Named_map::~Named_map() {
	std::cout << "RIP";
}
//=
#include "main.h"
Named_map::~Named_map() {
	std::cout << "RIP";
	delete owy;
}
//!DestructorWithSeveralOwnersAndPartiallyDeletedInCPP
//@main.h
struct Named_map {
public:
	~Named_map();

private:
	gsl::owner<int *> owy;
	gsl::owner<int *> otherOwy;
	gsl::owner<int *> bestOwy;
};
//@main.cpp
#include "main.h"
Named_map::~Named_map() {
	delete owy, delete otherOwy;
}
//=
#include "main.h"
Named_map::~Named_map() {
	delete owy, delete otherOwy;
	delete bestOwy;
}
//!DestructorWithSeveralSpecialOwnersAndPartiallyDeletedInCPP
//@main.h
struct Named_map {
public:

	~Named_map();

	Named_map() noexcept :io {new int},ooooo {*(new int)},a {new int[4]},oo {*(new int[5])} {}
	
private:
	gsl::owner<int *> io;
	gsl::owner<int &> ooooo;
	gsl::owner<int *> a;
	gsl::owner<int &> oo;
};
//@main.cpp
#include "main.h"
Named_map::~Named_map() {
	delete io;
}
//=
#include "main.h"
Named_map::~Named_map() {
	delete io;
	delete &ooooo;
	delete[] a;
	delete[] &oo;
}
//!SetAttributeEmptyBodyDestructorWithOwner
//@.config
setIgnoreAttribute=true
//@Named_map.h
struct Named_map {
public:
	~Named_map() {
	
	}

private:
	gsl::owner<int *> owy;
};
//=
struct Named_map {
public:
	[[gsl::suppress("Rc-dtor-release")]]
	~Named_map() {
	}

private:
	gsl::owner<int *> owy;
};