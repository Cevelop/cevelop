//!Resolution to Nested Class
//@src/main.cpp

int main(int argc, char **argv) {
	new X::NestedX();
	return 0;
}
//@src/X.h
#ifndef X_H_
#define X_H_

class X {
public:
	class NestedX {

	};
	X();
	virtual ~X();
};

#endif /* X_H_ */
//@src/X.cpp
#include "X.h"

X::X() {
	// TODO Auto-generated constructor stub

}

X::~X() {
	// TODO Auto-generated destructor stub
}
//!Resolution to Class in Namespace
//@src/main.cpp

int main(int argc, char **argv) {
	new NS::X();
	return 0;
}
//@src/X.h
#ifndef X_H_
#define X_H_

namespace NS {
	class X {
	public:
		X();
		virtual ~X();
	};
}

#endif /* X_H_ */
//@src/X.cpp
#include "X.h"

namespace NS {
X::X() {
}

X::~X() {
}
}
//!Resolution to Class in Nested Namespace
//@src/main.cpp

int main(int argc, char **argv) {
	new NS::SubNS::X();
	return 0;
}
//@src/X.h
#ifndef X_H_
#define X_H_

namespace NS {
  namespace SubNS{
	class X {
	public:
		X();
		virtual ~X();
	};
  }
}

#endif /* X_H_ */
//@src/X.cpp
#include "X.h"

namespace NS {
SubNS::X::X() {
}

SubNS::X::~X() {
}
}
//!Resolution to Class in Nested Template
//@src/main.cpp

int main(int argc, char **argv) {
	new X::NestedT<int>::NestedX();
	return 0;
}
//@src/X.h
#ifndef X_H_
#define X_H_

class X {
public:
	template<typename T>
	class NestedT {
	public:
		class NestedX {

		};
	};

		X();
		virtual ~X();
	};
};

#endif /* X_H_ */
//@src/X.cpp
#include "X.h"

namespace NS {
X::X() {
}

X::~X() {
}
}
//!Resolution to Class Nested in Template
//@src/main.cpp

int main(int argc, char **argv) {
	new Templ<int>::NestedX();
	return 0;
}
//@src/X.h
#ifndef X_H_
#define X_H_

template<typename T>
class Templ {
public:
	class NestedX {
	};
};

#endif /* X_H_ */
//!Resolution to Class Nested in Template, Separate Implementation
//@src/main.cpp

int main(int argc, char **argv) {
	new Templ<int>::NestedX();
	return 0;
}
//@src/X.h
#ifndef X_H_
#define X_H_

template<typename T>
class Templ {
public:
	class NestedX;
};

template<typename T>
class Templ<T>::NestedX {
};

#endif /* X_H_ */