//!Typedef and Usings
//@main.cpp
#include <cstdint>

using u_uint32t = std::uint32_t;
using u_int32t = std::int32_t;

typedef std::uint32_t td_uint32t;
typedef std::int32_t td_int32t;
//=
#include <cstdint>

using u_uint32t = unsigned int;
using u_int32t = int;

typedef unsigned int td_uint32t;
typedef int td_int32t;

//!Typedef and Usings unqualified
//@main.cpp
#include <cstdint>

using u_uint32t = uint32_t;
using u_int32t = int32_t;

typedef uint32_t td_uint32t;
typedef int32_t td_int32t;
//=
#include <cstdint>

using u_uint32t = unsigned int;
using u_int32t = int;

typedef unsigned int td_uint32t;
typedef int td_int32t;

//! Variables
//@main.cpp
#include <cstdint>

int castee{ 42 };

std::int32_t casted = (std::int32_t) castee;

std::int32_t casted1 = std::int32_t(castee);

std::int32_t casted2 = static_cast<std::int32_t>(castee);

std::int32_t *casted3 = reinterpret_cast<std::int32_t*>(&castee);

std::int32_t int32t { 12 };
std::uint32_t uint32t { 12 };
const std::int32_t cint32t { 12 };
const std::uint32_t cuint32t { 12 };
constexpr std::int32_t ceint32t { 12 };
constexpr std::uint32_t ceuint32t { 12 };
//=
#include <cstdint>

int castee { 42 };

int casted = (int) castee;

int casted1 = int(castee);

int casted2 = static_cast<int>(castee);

int *casted3 = reinterpret_cast<int*>(&castee);

int int32t { 12 };
unsigned int uint32t { 12 };
const int cint32t { 12 };
const unsigned int cuint32t { 12 };
constexpr int ceint32t { 12 };
constexpr unsigned int ceuint32t { 12 };

//! Variables unqualified
//@main.cpp
#include <cstdint>

int castee { 42 };

int32_t casted = (int32_t) castee;

int32_t casted1 = int32_t(castee);

int32_t casted2 = static_cast<int32_t>(castee);

int32_t *casted3 = reinterpret_cast<int32_t*>(&castee);

int32_t int32t { 12 };
uint32_t uint32t { 12 };
const int32_t cint32t { 12 };
const uint32_t cuint32t { 12 };
constexpr int32_t ceint32t { 12 };
constexpr uint32_t ceuint32t { 12 };
//=
#include <cstdint>

int castee { 42 };

int casted = (int) castee;

int casted1 = int(castee);

int casted2 = static_cast<int>(castee);

int *casted3 = reinterpret_cast<int*>(&castee);

int int32t { 12 };
unsigned int uint32t { 12 };
const int cint32t { 12 };
const unsigned int cuint32t { 12 };
constexpr int ceint32t { 12 };
constexpr unsigned int ceuint32t { 12 };

//!Variables Special Cases
//@main.cpp
#include <cstdint>

std::int32_t newint = std::int32_t(42);

auto foo1 = std::int32_t { 42 }, foo2 = std::int32_t { 43 }, foo3 = std::int32_t { 44 };
std::int32_t bar1, bar2, bar3;
std::int32_t baz1 = 42, baz2 = 43, baz3 = 43;
std::int32_t* blaz1 = new std::int32_t { 42 }, *blaz2 = new std::int32_t { 43 };
std::int32_t* bloz1 = new std::int32_t { 42 };
//=
#include <cstdint>

int newint = int(42);

auto foo1 = int { 42 }, foo2 = int { 43 }, foo3 = int { 44 };
int bar1, bar2, bar3;
int baz1 = 42, baz2 = 43, baz3 = 43;
int* blaz1 = new int { 42 }, *blaz2 = new int { 43 };
int* bloz1 = new int { 42 };

//!Variables Special Cases unqualified
//@main.cpp
#include <cstdint>

int32_t newint = int32_t(42);

auto foo1 = int32_t { 42 }, foo2 = int32_t { 43 }, foo3 = int32_t { 44 };
int32_t bar1, bar2, bar3;
int32_t baz1 = 42, baz2 = 43, baz3 = 43;
int32_t* blaz1 = new int32_t { 42 }, *blaz2 = new int32_t { 43 };
int32_t* bloz1 = new int32_t { 42 };
//=
#include <cstdint>

int newint = int(42);

auto foo1 = int { 42 }, foo2 = int { 43 }, foo3 = int { 44 };
int bar1, bar2, bar3;
int baz1 = 42, baz2 = 43, baz3 = 43;
int* blaz1 = new int { 42 }, *blaz2 = new int { 43 };
int* bloz1 = new int { 42 };

//!Templates
//@main.cpp
#include <cstdint>
#include <vector>

std::vector<std::int32_t> v_int { };
std::vector<std::uint32_t> v_uint { };
//=
#include <cstdint>
#include <vector>

std::vector<int> v_int { };
std::vector<unsigned int> v_uint { };

//!Templates unqualified
//@main.cpp
#include <cstdint>
#include <vector>

std::vector<int32_t> v_int { };
std::vector<uint32_t> v_uint { };
//=
#include <cstdint>
#include <vector>

std::vector<int> v_int { };
std::vector<unsigned int> v_uint { };

//!Template Special Cases
//@main.cpp
#include <cstdint>
#include <vector>
#include <functional>

std::vector<std::vector<std::vector<std::int32_t> > > v_vvint { };

template<std::int32_t I>
void foo(std::int32_t s) {
    std::cout << s*I << '\n';
}

std::function<std::int32_t(std::int32_t, std::int32_t)> func =
        [](std::int32_t a, std::int32_t b) {
    return a+b;
};

std::function<std::int32_t()> func2 = [] () -> std::int32_t {
    return 42;
};

std::function<std::int32_t()> foo8 = [] {
    return 42;
};

std::function<void(std::int32_t, std::int32_t)> func3 =
        [] (std::int32_t a, std::int32_t b) {
};

template<typename T>
void bar(T t){
    std::cout << t << "\n";
}

std::function<std::int32_t(std::int32_t, std::int32_t)>* fooPointer =
    new std::function<
        
        std::int32_t(std::int32_t, std::int32_t)>(
                                        [=](std::int32_t a, std::int32_t b) -> std::int32_t {
            return a + b;
        }
    );
//=
#include <cstdint>
#include <vector>
#include <functional>

std::vector<std::vector<std::vector<int> > > v_vvint { };

template<int I>
void foo(int s) {
    std::cout << s*I << '\n';
}

std::function<int(int, int)> func =
        [](int a, int b) {
    return a+b;
};

std::function<int()> func2 = [] () -> int {
    return 42;
};

std::function<int()> foo8 = [] {
    return 42;
};

std::function<void(int, int)> func3 =
        [] (int a, int b) {
};

template<typename T>
void bar(T t){
    std::cout << t << "\n";
}

std::function<int(int, int)>* fooPointer =
    new std::function<
        
        int(int, int)>(
                [=](int a, int b) -> int {
            return a + b;
        }
    );

//!Classes
//@main.cpp
#include <cstdint>

template<std::int32_t I>
class testClass {
    std::int32_t bar;


    friend std::int32_t foo(std::int32_t in) {
        return in * 42;
    }
    friend std::int32_t bar(std::int32_t in) {
        return in * in / (in + in);
    }
    std::int32_t strangename = 42;

public:
    testClass(std::int32_t i) {
        bar = i*I;
    }

};
//=
#include <cstdint>

template<int I>
class testClass {
    int bar;


    friend int foo(int in) {
        return in * 42;
    }
    friend int bar(int in) {
        return in * in / (in + in);
    }
    int strangename = 42;

public:
    testClass(int i) {
        bar = i*I;
    }

};

//!Functions
//@main.cpp
#include <cstdint>

std::int32_t f_int_int(std::int32_t) {
    auto retval = std::int32_t { 42 };
    return retval;
}
std::uint32_t f_uint_uint(std::uint32_t) {
    std::uint32_t retval { 42 };
    return retval;
}
std::int32_t f_sint_sint(std::int32_t) {
    std::int32_t retval { 42 };
    return retval;
}

//=
#include <cstdint>

int f_int_int(int) {
    auto retval = int { 42 };
    return retval;
}
unsigned int f_uint_uint(unsigned int) {
    unsigned int retval { 42 };
    return retval;
}
int f_sint_sint(int) {
    int retval { 42 };
    return retval;
}

//!Functions Special Cases
//@main.cpp
#include <cstdint>

void foovararg(std::int32_t...) {
}

auto f_auto_uint(std::int32_t) -> std::uint32_t {
    std::uint32_t retval { 42 };
    return retval;
}

auto f_auto_noTrailing(std::int32_t c) {
    return c * c;
}

std::int32_t rudolf { 42 };

std::int32_t f_declaration_definition(std::int32_t arg);

std::int32_t f_declaration_definition(std::int32_t arg) {
    return arg * arg;
}

auto f_declaration_definition_trailing(std::int32_t arg, std::int32_t arg2) -> std::int32_t;

auto f_declaration_definition_trailing(std::int32_t arg, std::int32_t arg2) -> std::int32_t {
    std::int32_t res = arg + arg2;
    return arg * arg2 / res;
}

auto lambda = [](std::int32_t a, std::int32_t&& b) -> std::int32_t {
    std::int32_t retval = a + b;
    return retval;
};
//=
#include <cstdint>

void foovararg(int, ...) {
}

auto f_auto_uint(int) -> unsigned int {
    unsigned int retval { 42 };
    return retval;
}

auto f_auto_noTrailing(int c) {
    return c * c;
}

int rudolf { 42 };

int f_declaration_definition(int arg);

int f_declaration_definition(int arg) {
    return arg * arg;
}

auto f_declaration_definition_trailing(int arg,
        int arg2) -> int;

auto f_declaration_definition_trailing(int arg,
        int arg2) -> int {
    int res = arg + arg2;
    return arg * arg2 / res;
}

auto lambda = [](int a, int&& b) -> int {
    int retval = a + b;
    return retval;
};

//!Function Main
//@main.cpp
#include <cstdint>

template<typename T>
int bar(T t){
    return 2*t;
}

int main(int argc, char** argv) {

    foo<12>(43);
    
    std::int32_t foo2 {42};

    bar<std::int32_t>(43);

}

//=
#include <cstdint>

template<typename T>
int bar(T t){
    return 2*t;
}

int main(int argc, char** argv) {

    foo<12>(43);
    
    int foo2 {42};

    bar<int>(43);

}


