
//!Typedef and Usings
//@main.cpp
#include <cstdint>

using u_uint64t = std::uint64_t;
using u_int64t = std::int64_t;

typedef std::uint64_t td_uint64t;
typedef std::int64_t td_int64t;
//=
#include <cstdint>

using u_uint64t = unsigned long long;
using u_int64t = long long;

typedef unsigned long long td_uint64t;
typedef long long td_int64t;

//!Typedef and Usings unqualified
//@main.cpp
#include <cstdint>

using u_uint64t = uint64_t;
using u_int64t = int64_t;

typedef uint64_t td_uint64t;
typedef int64_t td_int64t;
//=
#include <cstdint>

using u_uint64t = unsigned long long;
using u_int64t = long long;

typedef unsigned long long td_uint64t;
typedef long long td_int64t;

//! Variables
//@main.cpp
#include <cstdint>

long long castee{ 42 };

std::int64_t casted = (std::int64_t) castee;

std::int64_t casted2 = static_cast<std::int64_t>(castee);

std::int64_t *casted3 = reinterpret_cast<std::int64_t*>(&castee);

std::int64_t int64t { 12 };
std::uint64_t uint64t { 12 };
const std::int64_t cint64t { 12 };
const std::uint64_t cuint64t { 12 };
constexpr std::int64_t ceint64t { 12 };
constexpr std::uint64_t ceuint64t { 12 };
//=
#include <cstdint>

long long castee { 42 };

long long casted = (long long) castee;

long long casted2 = static_cast<long long>(castee);

long long *casted3 = reinterpret_cast<long long*>(&castee);

long long int64t { 12 };
unsigned long long uint64t { 12 };
const long long cint64t { 12 };
const unsigned long long cuint64t { 12 };
constexpr long long ceint64t { 12 };
constexpr unsigned long long ceuint64t { 12 };

//! Variables unqualified
//@main.cpp
#include <cstdint>

long long castee { 42 };

int64_t casted = (int64_t) castee;

int64_t casted2 = static_cast<int64_t>(castee);

int64_t *casted3 = reinterpret_cast<int64_t*>(&castee);

int64_t int64t { 12 };
uint64_t uint64t { 12 };
const int64_t cint64t { 12 };
const uint64_t cuint64t { 12 };
constexpr int64_t ceint64t { 12 };
constexpr uint64_t ceuint64t { 12 };
//=
#include <cstdint>

long long castee { 42 };

long long casted = (long long) castee;

long long casted2 = static_cast<long long>(castee);

long long *casted3 = reinterpret_cast<long long*>(&castee);

long long int64t { 12 };
unsigned long long uint64t { 12 };
const long long cint64t { 12 };
const unsigned long long cuint64t { 12 };
constexpr long long ceint64t { 12 };
constexpr unsigned long long ceuint64t { 12 };

//!Variables Special Cases
//@main.cpp
#include <cstdint>

auto foo1 = std::int64_t { 42 }, foo2 = std::int64_t { 43 }, foo3 = std::int64_t { 44 };
std::int64_t bar1, bar2, bar3;
std::int64_t baz1 = 42, baz2 = 43, baz3 = 43;
std::int64_t* blaz1 = new std::int64_t { 42 }, *blaz2 = new std::int64_t { 43 };
std::int64_t* bloz1 = new std::int64_t { 42 };
//=
#include <cstdint>

auto foo1 = static_cast<long long>(42), foo2 = static_cast<long long>(43), foo3 = static_cast<long long>(44);
long long bar1, bar2, bar3;
long long baz1 = 42, baz2 = 43, baz3 = 43;
long long* blaz1 = new long long{ 42 }, *blaz2 = new long long{ 43 };
long long* bloz1 = new long long{ 42 };

//!Variables Special Cases unqualified
//@main.cpp
#include <cstdint>

auto foo1 = int64_t { 42 }, foo2 = int64_t { 43 }, foo3 = int64_t { 44 };
int64_t bar1, bar2, bar3;
int64_t baz1 = 42, baz2 = 43, baz3 = 43;
int64_t* blaz1 = new int64_t { 42 }, *blaz2 = new int64_t { 43 };
int64_t* bloz1 = new int64_t { 42 };
//=
#include <cstdint>

auto foo1 = static_cast<long long>(42), foo2 = static_cast<long long>(43), foo3 = static_cast<long long>(44);
long long bar1, bar2, bar3;
long long baz1 = 42, baz2 = 43, baz3 = 43;
long long* blaz1 = new long long{ 42 }, *blaz2 = new long long{ 43 };
long long* bloz1 = new long long{ 42 };


//!Templates
//@main.cpp
#include <cstdint>
#include <vector>

std::vector<std::int64_t> v_int { };
std::vector<std::uint64_t> v_uint { };
//=
#include <cstdint>
#include <vector>

std::vector<long long> v_int { };
std::vector<unsigned long long> v_uint { };

//!Templates unqualified
//@main.cpp
#include <cstdint>
#include <vector>

std::vector<int64_t> v_int { };
std::vector<uint64_t> v_uint { };
//=
#include <cstdint>
#include <vector>

std::vector<long long> v_int { };
std::vector<unsigned long long> v_uint { };

//!Template Special Cases
//@main.cpp
#include <cstdint>
#include <vector>
#include <functional>

std::vector<std::vector<std::vector<std::int64_t> > > v_vvint { };

template<std::int64_t I>
void foo(std::int64_t s) {
    std::cout << s*I << '\n';
}

std::function<std::int64_t(std::int64_t, std::int64_t)> func =
        [](std::int64_t a, std::int64_t b) {
    return a+b;
};

std::function<std::int64_t()> func2 = [] () -> std::int64_t {
    return 42;
};

std::function<std::int64_t()> foo8 = [] {
    return 42;
};

std::function<void(std::int64_t, std::int64_t)> func3 =
        [] (std::int64_t a, std::int64_t b) {
};

template<typename T>
void bar(T t){
    std::cout << t << "\n";
}

std::function<std::int64_t(std::int64_t, std::int64_t)>* fooPointer =
    new std::function<
        
        std::int64_t(std::int64_t, std::int64_t)>(
                                        [=](std::int64_t a, std::int64_t b) -> std::int64_t {
            return a + b;
        }
    );
//=
#include <cstdint>
#include <vector>
#include <functional>

std::vector<std::vector<std::vector<long long> > > v_vvint { };

template<long long I>
void foo(long long s) {
    std::cout << s*I << '\n';
}

std::function<long long(long long, long long)> func =
        [](long long a, long long b) {
    return a+b;
};

std::function<long long()> func2 = [] () -> long long {
    return 42;
};

std::function<long long()> foo8 = [] {
    return 42;
};

std::function<void(long long, long long)> func3 =
        [] (long long a, long long b) {
};

template<typename T>
void bar(T t){
    std::cout << t << "\n";
}

std::function<long long(long long, long long)>* fooPointer =
    new std::function<
        
        long long(long long, long long)>(
                [=](long long a, long long b) -> long long {
            return a + b;
        }
    );

//!Classes
//@main.cpp
#include <cstdint>

template<std::int64_t I>
class testClass {
    std::int64_t bar;


    friend std::int64_t foo(std::int64_t in) {
        return in * 42;
    }
    friend std::int64_t bar(std::int64_t in) {
        return in * in / (in + in);
    }
    std::int64_t strangename = 42;

public:
    testClass(std::int64_t i) {
        bar = i*I;
    }

};
//=
#include <cstdint>

template<long long I>
class testClass {
    long long bar;


    friend long long foo(long long in) {
        return in * 42;
    }
    friend long long bar(long long in) {
        return in * in / (in + in);
    }
    long long strangename = 42;

public:
    testClass(long long i) {
        bar = i*I;
    }

};

//!Functions
//@main.cpp
#include <cstdint>

std::int64_t f_int_int(std::int64_t) {
    auto retval = std::int64_t { 42 };
    return retval;
}
std::uint64_t f_uint_uint(std::uint64_t) {
    std::uint64_t retval { 42 };
    return retval;
}
std::int64_t f_sint_sint(std::int64_t) {
    std::int64_t retval { 42 };
    return retval;
}

//=
#include <cstdint>

long long f_int_int(long long) {
    auto retval = static_cast<long long>(42);
    return retval;
}
unsigned long long f_uint_uint(unsigned long long) {
    unsigned long long retval {42};
    return retval;
}
long long f_sint_sint(long long) {
    long long retval {42};
    return retval;
}

//!Functions Special Cases
//@main.cpp
#include <cstdint>

void foovararg(std::int64_t...) {
}

auto f_auto_uint(std::int64_t) -> std::uint64_t {
    std::uint64_t retval { 42 };
    return retval;
}

auto f_auto_noTrailing(std::int64_t c) {
    return c * c;
}

std::int64_t rudolf { 42 };

std::int64_t f_declaration_definition(std::int64_t arg);

std::int64_t f_declaration_definition(std::int64_t arg) {
    return arg * arg;
}

auto f_declaration_definition_trailing(std::int64_t arg, std::int64_t arg2) -> std::int64_t;

auto f_declaration_definition_trailing(std::int64_t arg, std::int64_t arg2) -> std::int64_t {
    std::int64_t res = arg + arg2;
    return arg * arg2 / res;
}

auto lambda = [](std::int64_t a, std::int64_t&& b) -> std::int64_t {
    std::int64_t retval = a + b;
    return retval;
};
//=
#include <cstdint>

void foovararg(long long, ...) {
}

auto f_auto_uint(long long) -> unsigned long long {
    unsigned long long retval { 42 };
    return retval;
}

auto f_auto_noTrailing(long long c) {
    return c * c;
}

long long rudolf { 42 };

long long f_declaration_definition(long long arg);

long long f_declaration_definition(long long arg) {
    return arg * arg;
}

auto f_declaration_definition_trailing(long long arg,
        long long arg2) -> long long;

auto f_declaration_definition_trailing(long long arg,
        long long arg2) -> long long {
    long long res = arg + arg2;
    return arg * arg2 / res;
}

auto lambda = [](long long a, long long&& b) -> long long {
    long long retval = a + b;
    return retval;
};

//!Function Main
//@main.cpp
#include <cstdint>

template<typename T>
long long bar(T t){
    return 2*t;
}

int main(int argc, char** argv) {

    foo<12>(43);
    
    std::int64_t foo2 {42};

    bar<std::int64_t>(43);

}

//=
#include <cstdint>

template<typename T>
long long bar(T t){
    return 2*t;
}

int main(int argc, char** argv) {

    foo<12>(43);
    
    long long foo2 {42};

    bar<long long>(43);

}

