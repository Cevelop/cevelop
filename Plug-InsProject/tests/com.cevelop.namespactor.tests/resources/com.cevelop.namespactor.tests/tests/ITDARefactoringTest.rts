//!Inlining a 'typedef' for a simple type shall replace the occurrence with the aliased type while preserving the original alias declaration
//@A1.cpp
typedef int a;
/*$*/a/*$*/ i;
//=
typedef int a;
int i;

//!Inlining a 'using' alias for a pointer type shall replace the occurrence with the alias type while preserving the original alias declaration
//@A1.cpp
using PI=int (*);
/*$*/PI/*$*/ pi;
//=
using PI=int (*);
int* pi;

//!Inlining a 'using' alias for a pointer to const shall retain the cv-qualification of the aliased type
//@A1.cpp
using PI=int const (*);
/*$*/PI/*$*/ pi;
//=
using PI=int const (*);
const int* pi;

//!Inlining a 'using' alias for a pointer to const into an existing pointer usage shall preserve the pointer level of the aliased type
//@A1.cpp
using PI=int const (*);
/*$*/PI/*$*/ * const pi;
//=
using PI=int const (*);
const int** const pi;

//!Inlining a 'using' alias for a pointer to const into an existing volatile declaration shall preserve the existing cv-qualification
//@A1.cpp
using PI=int const (*);
/*$*/PI/*$*/ volatile * const & pi;
//=
using PI=int const (*);
const int* volatile * const & pi;

//!Inlining a 'using' alias for a pointer to const into an exsiting reference to const pointer to alias shall preserve the reference and cv-qualification
//@A1.cpp
using PI=int const (*);
static /*$*/PI/*$*/ * const & pi = nullptr;
//=
using PI=int const (*);
static const int** const & pi = nullptr;

//!'using' aliases shall be able to be inlined into function return type declarations
//@A1.cpp
using PI=int const (*);
inline /*$*/PI/*$*/ foo();
//=
using PI=int const (*);
inline const int* foo();

//!Inlining 'using' aliases into a declaration with multiple declarators shall preserve the declarator list
//@A1.cpp
using PI=int const (*);
extern /*$*/PI/*$*/ * const &pi = nullptr, pa { };
//=
using PI=int const (*);
extern const int ** const &pi = nullptr, *pa { };

//!'using' aliases shall be able to be inlined into function parameter declarations
//@A1.cpp
using PI=int const (*);
void foo(/*$*/PI/*$*/ * const &pi);
//=
using PI=int const (*);
void foo(const int** const & pi);

//!Inlining a 'using' alias for a simple const type into a volatile declaration shall result in the combined cv-qualification of the declaration
//@A1.cpp
using PV=int const;
extern /*$*/PV/*$*/ volatile &pv;
//=
using PV=int const;
extern const volatile int& pv;

//!Inlining a 'using' alias for a pointer to const into a reference to volatile alias declaration shall preserver the cv-qualification of the declaration
//@A1.cpp
using PV=int const *;
extern /*$*/PV/*$*/ volatile &pv;
//=
using PV=int const *;
extern const int* volatile & pv;

//!'using' aliases shall be able to be inlined into named cast expressions
//@A1.cpp
using PV=int const *;
auto x = reinterpret_cast</*$*/PV/*$*/>(1);
//=
using PV=int const *;
auto x = reinterpret_cast<const int*>(1);

//!'using' aliases shall be able to be inlined into named cast to pointer to alias expressions
//@A1.cpp
using PV=int const *;
auto x = reinterpret_cast</*$*/PV/*$*/*>(1);
//=
using PV=int const *;
auto x = reinterpret_cast<const int**>(1);

//!'typedef' aliases shall be able to be inlined into return type declarations of non-static member functions
//@A1.cpp
struct X{
	typedef int const *PCI;
	virtual /*$*/PCI/*$*/ const *foo() const &;
	friend PCI bar(){ return PCI{};}
};
//=
struct X{
	typedef int const *PCI;
	const virtual int* const * foo() const &;
	friend PCI bar(){ return PCI{};}
};

//!'typedef' aliases shall be able to be inlined into return type declarations of friend function declarations
//@A1.cpp
struct X{
	typedef int const *PCI;
	virtual PCI const *foo() const &;
	friend /*$*/PCI/*$*/ const & bar() {
		return PCI { };
	}
};

//=
struct X{
	typedef int const *PCI;
	virtual PCI const *foo() const &;
	const friend int* const & bar() {
		return PCI { };
	}
};

//!'typedef' aliases shall be able to be inlined into the return type declaration of a function definition
//@A1.cpp
typedef void * bar;
/*$*/bar/*$*/ foo() {
	return nullptr;
}
//=
typedef void * bar;
void* foo() {
	return nullptr;
}

//!Inlining a 'typedef' alias for an array type shall generate a valid array declaration
//@A1.cpp
typedef void * bar[10];
/*$*/bar/*$*/ kneipe;
//=
typedef void * bar[10];
void* kneipe[10];

//!Inlining a 'typedef' alias for an array type into a declaration of an array shall correctly place the array extent
//@A1.cpp
typedef void * bar[10];
/*$*/bar/*$*/ kneipe[2];
//=
typedef void * bar[10];
void* kneipe[2][10];

//!Inlining a 'typedef' alias for an array type into an array of alias type shall preserve semantics by placing parantheses
//@A1.cpp
typedef void * bar[10];
/*$*/bar/*$*/ * const kneipe[2];
// array with 2 elemens with are const pointers to array with 10 elements which are void *

//=
typedef void * bar[10];
void* (* const kneipe[2])[10];
// array with 2 elemens with are const pointers to array with 10 elements which are void *

//!Inlining a 'typedef' alias for an array of pointer to function shall preserve semantics by placing parentheses
//@A1.cpp
typedef void (* const bar[10])(int);
/*$*/bar/*$*/ const kneipe[2];
// array with 2 elemens with are const of array with 10 elements which are function pointers
//=
typedef void (* const bar[10])(int);
void (*const kneipe[2][10])(int);
// array with 2 elemens with are const of array with 10 elements which are function pointers

//!'using' aliases shall be able to be inlined into type template arguments
//@A1.cpp
template <typename T> struct X{};
using B=int const *;
static X</*$*/B/*$*/> x;
//=
template <typename T> struct X{};
using B=int const *;
static X<const int*> x;

//!'using' aliases shall be able to be inlined into reference and cv-qualified type template arguments
//@A1.cpp
template <typename T> struct X{};
using B=int const *;
static X</*$*/B/*$*/ const &> x;
//=
template <typename T> struct X{};
using B=int const *;
static X<const int* const &> x;

//!'using' aliases for qualified type name shall be able to be inlined
//@A1.cpp
#include <vector.hpp>
using siter=std::string::iterator;
/*$*/siter/*$*/ it;
//=
#include <vector.hpp>
using siter=std::string::iterator;
std::string::iterator it;

//!'using' aliases for qualified template id shall be able to be inlined
//@A1.cpp
#include <vector.hpp>
using iter=std::vector<std::string>::iterator;
/*$*/iter/*$*/ it;
//=
#include <vector.hpp>
using iter=std::vector<std::string>::iterator;
std::vector<std::string>::iterator it;

//!'using' aliases for qualified template id with declarator shall be able to be inlined
//@A1.cpp
#include <vector.hpp>
using iterref=std::vector<std::string>::iterator const &;
/*$*/iterref/*$*/ it;
//=
#include <vector.hpp>
using iterref=std::vector<std::string>::iterator const &;
const std::vector<std::string>::iterator& it;

//!Inlining a 'using' alias from a nested scope shall drop the scope qualification of the alias
//@A1.cpp
#include <vector.hpp>
namespace alias {
using siter=std::string::iterator;
}
alias::/*$*/siter/*$*/ it;
//=
#include <vector.hpp>
namespace alias {
using siter=std::string::iterator;
}
std::string::iterator it;

//!Inlining a 'using' alias for a nested type alias from a nested scope shall preserve the the scope qualification of the inner alias
//@A1.cpp
namespace alias {
struct X{typedef int I;};
using type=X::I;
}
alias::/*$*/type/*$*/ *it;
//=
namespace alias {
struct X{typedef int I;};
using type=X::I;
}
alias::X::I* it;

//!Inlining a 'using' alias for a type introduced into a nested scope using 'using' shall preserve the scope qualification of the nested type
//@A1.cpp
#include <vector.hpp>
namespace alias {
using std::string;
using siter=string::iterator;
}
alias::/*$*/siter/*$*/ it;
//=
#include <vector.hpp>
namespace alias {
using std::string;
using siter=string::iterator;
}
alias::string::iterator it;

//!Inlining a 'using' alias for a template id introduced into a nested scope using 'using' shall preserve the scope qualification of the nested template id
//@A1.cpp
#include <vector.hpp>
namespace alias {
using std::vector;
using vec=vector<int>;
}
alias::/*$*/vec/*$*/ v;
//=
#include <vector.hpp>
namespace alias {
using std::vector;
using vec=vector<int>;
}
alias::vector<int> v;

//!Inlining a scoped 'using' alias for a template id drops the scoped qualification of the alias
//@A1.cpp
#include <vector.hpp>
namespace alias {
using vec=std::vector<int>;
}
alias::/*$*/vec/*$*/ v;
//=
#include <vector.hpp>
namespace alias {
using vec=std::vector<int>;
}
std::vector<int> v;

//!Inlining a scoped 'using' alias for a nested type of a template type introduced into the scope using 'using' shall preserve the scope qualification of the alias
//@A1.cpp
#include <vector.hpp>
namespace alias {
using std::vector;
using siter=vector<int>::iterator;
}
alias::/*$*/siter/*$*/ it;
//=
#include <vector.hpp>
namespace alias {
using std::vector;
using siter=vector<int>::iterator;
}
alias::vector<int>::iterator it;

//!Inlining a scoped 'using' alias for a nested type of a template type shall drop the scope qualification of the alias
//@A1.cpp
#include <vector.hpp>
namespace alias {
using siter=std::vector<int>::iterator;
}
alias::/*$*/siter/*$*/ it;
//=
#include <vector.hpp>
namespace alias {
using siter=std::vector<int>::iterator;
}
std::vector<int>::iterator it;

