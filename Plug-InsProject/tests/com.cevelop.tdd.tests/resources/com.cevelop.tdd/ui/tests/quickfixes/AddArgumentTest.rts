//!Add Integer Argument
//@.config
markerLines=3
//@A.cpp
void func(int i) { }
void testFunc() {
	func();
}
//=
void func(int i) { }
void testFunc() {
	func (_);
}
//!Add Two Integer Arguments
//@.config
markerLines=3
//@A.cpp
void func(int i, int j) { }
void testFunc() {
	func();
}
//=
void func(int i, int j) { }
void testFunc() {
	func(_, _);
}
//!Add One Integer Argument
//@.config
markerLines=3
//@A.cpp
void func(int i, int j) { }
void testFunc() {
	func(0);
}
//=
void func(int i, int j) { }
void testFunc() {
	func(0, _);
}
//!Insert Type Argument
//@.config
markerCount=0
//@A.cpp
struct Type {};
void func(Type t, int i) { }
void testFunc() {
	func(0);
}
//=
struct Type {};
void func(Type t, int i) { }
void testFunc() {
	func(0);
}
//!Recognize Basic Types As Matching Arguments
//@.config
markerLines=3
//@A.cpp
void func(char c, int i) { }
void testFunc() {
	func(42);
}
//=
void func(char c, int i) { }
void testFunc() {
	func(42, _);
}
//!Recognize Ids
//@.config
markerLines=4
//@A.cpp
void func(int i, int j) { }
void testFunc() {
	int i = 42;
	func(i);
}
//=
void func(int i, int j) { }
void testFunc() {
	int i = 42;
	func(i, _);
}
//!Recognize Function Calls
//@.config
markerLines=4
//@A.cpp
void func(int i, int j) { }
int foo() {return 42;}
void testFunc() {
	func(foo());
}
//=
void func(int i, int j) { }
int foo() {return 42;}
void testFunc() {
	func(foo(), _);
}
//!Test First Candidate
//@.config
markerLines=16
candidate=0
//@A.cpp
struct A {
	void func(int i)
	{
	}
	void func(int i, int j)
	{
	}
	void func(int i, int j, int k)
	{
	}
};

void test()
{
	A a;
	a.func();
}
//=
struct A {
	void func(int i)
	{
	}
	void func(int i, int j)
	{
	}
	void func(int i, int j, int k)
	{
	}
};

void test()
{
	A a;
	a.func(_);
}
//!Test Second Candidate
//@.config
markerLines=16
candidate=1
//@A.cpp
struct A {
	void func(int i)
	{
	}
	void func(int i, int j)
	{
	}
	void func(int i, int j, int k)
	{
	}
};

void test()
{
	A a;
	a.func();
}
//=
struct A {
	void func(int i)
	{
	}
	void func(int i, int j)
	{
	}
	void func(int i, int j, int k)
	{
	}
};

void test()
{
	A a;
	a.func(_, _);
}
//!Test Third Candidate
//@.config
markerLines=16
candidate=2
//@A.cpp
struct A {
	void func(int i)
	{
	}
	void func(int i, int j)
	{
	}
	void func(int i, int j, int k)
	{
	}
};

void test()
{
	A a;
	a.func();
}
//=
struct A {
	void func(int i)
	{
	}
	void func(int i, int j)
	{
	}
	void func(int i, int j, int k)
	{
	}
};

void test()
{
	A a;
	a.func(_, _, _);
}
//!Dont Offer Addargs That Cant Be Appended
//@.config
markerCount=0
//@A.cpp
#include<string>
void foo(std::string, int);
void test() {
  foo(42);
}
//=
#include<string>
void foo(std::string, int);
void test() {
  foo(42);
}
//!Check String and Char Arrays
//@.config
markerCount=0
//@A.cpp
#include <string>

void foo(std::string s)
{
}

void test() {
	foo("asdfs");
}
//=
#include <string>

void foo(std::string s)
{
}

void test() {
	foo("asdfs");
}
//!Remove Single Last Argument
//@.config
markerLines=5
//@A.cpp
void foo() {
}

void test() {
	foo(3);
}
//=
void foo() {
}

void test() {
	foo();
}
//!Remove Bunch Last Arguments
//@.config
markerLines=5
//@A.cpp
void foo(int i) {
}

void test() {
	foo(3, 2.3, "asdf", 2);
}
//=
void foo(int i) {
}

void test() {
	foo(3);
}
//!Add Integer Argument for Function from Header
//@.config
markerLines=4
//@A.cpp
#include "A.h"

void testFunc() {
	func();
}
//=
#include "A.h"

void testFunc() {
	func (_);
}
//@A.h
void func(int i) { }
//=
void func(int i) { }
//!Remove Argument for Function from Header
//@.config
markerLines=4
//@A.cpp
#include "A.h"

void test() {
	foo(3);
}
//=
#include "A.h"

void test() {
	foo();
}
//@A.h
void foo() {
}
//=
void foo() {
}
//!Match Empty Argument List to void
//@.config
markerCount=0
//@A.cpp
struct TemplArg {
};
template<typename T>
struct Base {
	void foo(void) {
	}
};
struct S : Base<TemplArg> {
	void foo();
};
void S::foo() {
	Base<TemplArg>::foo();
}
//=
struct TemplArg {
};
template<typename T>
struct Base {
	void foo(void) {
	}
};
struct S : Base<TemplArg> {
	void foo();
};
void S::foo() {
	Base<TemplArg>::foo();
}
