//!Unary operator prefix
//@.config
definition=1
rectangleIndex=0
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

template <typename T, typename S>
Tuple<T,S> operator++(const Tuple<T,S>& rhs) {
	return Tuple<T,S> { };
}

Tuple<int,int> t;

int main() {
	++t;
}

//!Unary Operator postfix
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

template <typename T, typename S>
Tuple<T,S>& operator++(const Tuple<T,S>& lhs, int) {
	return Tuple<T,S> { };
}

Tuple<int,int> t { };

int main() {
	t++;	
}

//!Binary Operator
//@MyFileName.cpp
template <typename T, typename S>
struct Tuple {
};

template <typename T, typename S>
Tuple<T,S> operator/(const Tuple<T,S>& lhs, const Tuple<T,S>& rhs) {
	return Tuple<T,S> { };
}

int main() {
	Tuple<int,int> {} / Tuple<int,int> { };
}